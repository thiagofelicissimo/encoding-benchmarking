#REQUIRE sttfa.
def leibniz : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))))).
[] leibniz --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) (A : sttfa.{|Type|} => (sttfa.abs A (sttfa.{|⇝|} A sttfa.prop) (x : (sttfa.El A) => (sttfa.abs A sttfa.prop (y : (sttfa.El A) => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))).
def refl_leibniz : (sttfa.Prf (sttfa.{|∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))))).
[] refl_leibniz --> (sttfa.{|in-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) (A : sttfa.{|Type|} => (sttfa.{|in-∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (x : (sttfa.El A) => (sttfa.{|in-∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.app A sttfa.prop P x sttfa.{|■|}))) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|in-⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.app A sttfa.prop P x sttfa.{|■|}) (H : (sttfa.Prf (sttfa.app A sttfa.prop P x sttfa.{|■|})) => H)))))))).
sym_leibniz : (sttfa.Prf (sttfa.{|∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz A sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}))))))))).
