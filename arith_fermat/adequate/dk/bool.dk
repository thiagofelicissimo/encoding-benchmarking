#REQUIRE connectives.
#REQUIRE leibniz.
#REQUIRE logic.
#REQUIRE relations.
#REQUIRE sttfa.
bool : sttfa.{|Type|}.
true : (sttfa.Els (sttfa.{|↑|} bool)).
false : (sttfa.Els (sttfa.{|↑|} bool)).
match_bool_prop : (sttfa.Prf (sttfa.{|∀|} (sttfa.{|⇝|} bool sttfa.prop) (return_ : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop return_ z sttfa.{|■|})))))))).
match_bool_type : (sttfa.Els (sttfa.{|∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))))).
axiom_match_bool_type_true : (sttfa.Prf (sttfa.{|∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))))))).
def eq_match_bool_type_true : (sttfa.Prf (sttfa.{|∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))))))).
[] eq_match_bool_type_true --> (sttfa.{|in-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))))) (return_ : sttfa.{|Type|} => (sttfa.{|in-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))) (case_true : (sttfa.El return_) => (sttfa.{|in-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})) (case_false : (sttfa.El return_) => (sttfa.{|el-⇒|} ((case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})) case_false) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.{|el-∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|∀|} (sttfa.{|⇝|} return_ sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} return_ sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop P (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app return_ sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} return_ (x : (sttfa.El return_) => (sttfa.{|∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|∀|} (sttfa.{|⇝|} return_ sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} return_ sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop P x sttfa.{|■|}) (sttfa.app return_ sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) connectives.equal_leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.{|el-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})) (sttfa.{|el-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))))) axiom_match_bool_type_true return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) sttfa.{|■|}))))))).
axiom_match_bool_type_false : (sttfa.Prf (sttfa.{|∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))))))).
def eq_match_bool_type_false : (sttfa.Prf (sttfa.{|∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))))))).
[] eq_match_bool_type_false --> (sttfa.{|in-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))))) (return_ : sttfa.{|Type|} => (sttfa.{|in-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))) (case_true : (sttfa.El return_) => (sttfa.{|in-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})) (case_false : (sttfa.El return_) => (sttfa.{|el-⇒|} ((case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})) case_false) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.{|el-∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|∀|} (sttfa.{|⇝|} return_ sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} return_ sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop P (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app return_ sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} return_ (x : (sttfa.El return_) => (sttfa.{|∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|∀|} (sttfa.{|⇝|} return_ sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} return_ sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop P x sttfa.{|■|}) (sttfa.app return_ sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) connectives.equal_leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.{|el-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})) (sttfa.{|el-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) connectives.equal return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))))) axiom_match_bool_type_false return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) sttfa.{|■|}))))))).
def sym_eq_match_bool_type_true : (sttfa.Prf (sttfa.{|∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))))))).
[] sym_eq_match_bool_type_true --> (sttfa.{|in-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))))) (return_ : sttfa.{|Type|} => (sttfa.{|in-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))) (case_true : (sttfa.El return_) => (sttfa.{|in-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})) (case_false : (sttfa.El return_) => (sttfa.{|el-⇒|} ((case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})) case_false) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} return_ (x : (sttfa.El return_) => (sttfa.{|∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz A sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}))))))) leibniz.sym_leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.{|el-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})) (sttfa.{|el-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))))) eq_match_bool_type_true return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) sttfa.{|■|}))))))).
def sym_eq_match_bool_type_false : (sttfa.Prf (sttfa.{|∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))))))).
[] sym_eq_match_bool_type_false --> (sttfa.{|in-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))))) (return_ : sttfa.{|Type|} => (sttfa.{|in-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))) (case_true : (sttfa.El return_) => (sttfa.{|in-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})) (case_false : (sttfa.El return_) => (sttfa.{|el-⇒|} ((case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})) case_false) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} return_ (x : (sttfa.El return_) => (sttfa.{|∀|} return_ (y : (sttfa.El return_) => (sttfa.{|⇒|} (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz A sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}))))))) leibniz.sym_leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.{|el-∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})) (sttfa.{|el-∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))))) eq_match_bool_type_false return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) sttfa.{|■|}))))))).
def bool_discr : (sttfa.Prf (sttfa.{|∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}))))))).
[] bool_discr --> (sttfa.{|in-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}))))) (x : (sttfa.El bool) => (sttfa.{|in-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}))) (y : (sttfa.El bool) => (sttfa.{|in-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}) (Deq : (sttfa.Prf (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|})) => (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}) (sttfa.{|el-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (x_13 : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) x_13 sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) x_13 sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}))) y sttfa.{|■|}))) (sttfa.{|el-⇒|} ((z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) z sttfa.{|■|})) x) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (x_13 : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) x_13 sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) x_13 sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}))) y sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) logic.eq_ind bool sttfa.{|■|}) x sttfa.{|■|}) (sttfa.abs bool sttfa.prop (x_13 : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) x_13 sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) x_13 sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) z sttfa.{|■|})) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) z sttfa.{|■|}))) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) z sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (return_ : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop return_ z sttfa.{|■|})))))) match_bool_prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.app sttfa.prop sttfa.prop (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) true sttfa.{|■|}) (sttfa.{|el-∀|} (sttfa.{|⇝|} sttfa.prop sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} sttfa.prop sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} sttfa.prop (case_true : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_true sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.{|∀|} sttfa.prop (x0 : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} x0 x0))) (sttfa.app sttfa.prop sttfa.prop (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} (sttfa.{|⇝|} sttfa.prop sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} sttfa.prop sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop P (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} sttfa.prop (case_true : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_true sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) sttfa.{|■|}) (sttfa.{|in-∀|} sttfa.prop (x0 : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} x0 x0)) (P : (sttfa.El sttfa.prop) => (sttfa.{|in-⇒|} P P (DH : (sttfa.Prf P) => DH)))) sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.app sttfa.prop sttfa.prop (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) __ sttfa.{|■|}) sttfa.{|■|}) __ sttfa.{|■|}))) false sttfa.{|■|}) (sttfa.{|el-∀|} (sttfa.{|⇝|} sttfa.prop sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} sttfa.prop sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} sttfa.prop (case_true : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_false sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.{|∀|} sttfa.prop (x0 : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} x0 x0))) (sttfa.app sttfa.prop sttfa.prop (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} (sttfa.{|⇝|} sttfa.prop sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} sttfa.prop sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop P (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} sttfa.prop (case_true : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_false sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.abs sttfa.prop sttfa.prop (x0 : (sttfa.El sttfa.prop) => x0)) sttfa.{|■|}) (sttfa.{|in-∀|} sttfa.prop (x0 : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} x0 x0)) (P : (sttfa.El sttfa.prop) => (sttfa.{|in-⇒|} P P (DH : (sttfa.Prf P) => DH)))) sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) y sttfa.{|■|}) Deq sttfa.{|■|}))))))).
def not_eq_true_false : (sttfa.Prf (sttfa.app sttfa.prop sttfa.prop connectives.Not (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})).
[] not_eq_true_false --> (sttfa.{|el-⇒|} (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|}) connectives.False) (sttfa.app sttfa.prop sttfa.prop connectives.Not (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} (sttfa.{|⇒|} A connectives.False) (sttfa.app sttfa.prop sttfa.prop connectives.Not A sttfa.{|■|}))) connectives.nmk (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|in-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|}) connectives.False (Heq : (sttfa.Prf (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|})) => (sttfa.{|el-∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P) (sttfa.{|el-⇒|} (sttfa.app sttfa.prop sttfa.prop (sttfa.abs sttfa.prop sttfa.prop (x : (sttfa.El sttfa.prop) => x)) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) (sttfa.{|el-∀|} (sttfa.{|⇝|} sttfa.prop sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} sttfa.prop sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop P (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})) (sttfa.{|el-∀|} sttfa.prop (case_true : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|})))))) eq_match_bool_type_false sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.abs sttfa.prop sttfa.prop (x : (sttfa.El sttfa.prop) => x)) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop (sttfa.abs sttfa.prop sttfa.prop (x : (sttfa.El sttfa.prop) => x)) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} (sttfa.{|⇝|} sttfa.prop sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} sttfa.prop sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop P (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} sttfa.prop (case_true : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (case_false : (sttfa.El sttfa.prop) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) case_true sttfa.{|■|})))))) eq_match_bool_type_true sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.abs sttfa.prop sttfa.prop (x : (sttfa.El sttfa.prop) => x)) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.{|el-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}))) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type sttfa.prop sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => P)) sttfa.{|■|}) (sttfa.{|∀|} sttfa.prop (P : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} P P))) sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) x sttfa.{|■|}))))) bool_discr true sttfa.{|■|}) false sttfa.{|■|}) Heq sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}) connectives.False sttfa.{|■|}))) sttfa.{|■|}).
def notb : (sttfa.Els (sttfa.{|↑|} (sttfa.{|⇝|} bool bool))).
[] notb --> (sttfa.abs bool bool (b : (sttfa.El bool) => (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) b sttfa.{|■|}))).
def andb : (sttfa.Els (sttfa.{|↑|} (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)))).
[] andb --> (sttfa.abs bool (sttfa.{|⇝|} bool bool) (b1 : (sttfa.El bool) => (sttfa.abs bool bool (b2 : (sttfa.El bool) => (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) b2 sttfa.{|■|}) false sttfa.{|■|}) b1 sttfa.{|■|}))))).
def andb_true_l : (sttfa.Prf (sttfa.{|∀|} bool (b1 : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb b1 sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b1 sttfa.{|■|}) true sttfa.{|■|}))))))).
[] andb_true_l --> (sttfa.{|in-∀|} bool (b1 : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb b1 sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b1 sttfa.{|■|}) true sttfa.{|■|}))))) (b1 : (sttfa.El bool) => (sttfa.{|el-∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))))) z sttfa.{|■|})) (sttfa.{|el-⇒|} (sttfa.{|∀|} bool (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb false sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})))) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))))) z sttfa.{|■|}))) (sttfa.{|el-⇒|} (sttfa.{|∀|} bool (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb true sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|})))) (sttfa.{|⇒|} (sttfa.{|∀|} bool (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb false sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})))) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))))) z sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (return_ : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop return_ z sttfa.{|■|})))))) match_bool_prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))))) sttfa.{|■|}) (sttfa.{|in-∀|} bool (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb true sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}))) (b2 : (sttfa.El bool) => (sttfa.{|el-⇒|} (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|})) ((x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb true sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}))) b2) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P b2 sttfa.{|■|}) (sttfa.app bool sttfa.prop P (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) b2 sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) b2 sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) b2 sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} bool (case_true : (sttfa.El bool) => (sttfa.{|∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_true bool sttfa.{|■|}) b2 sttfa.{|■|}) false sttfa.{|■|}) (sttfa.abs bool sttfa.prop (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|})))) sttfa.{|■|}) (sttfa.{|in-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}) (auto : (sttfa.Prf (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})) => (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}) (sttfa.{|el-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) y sttfa.{|■|}))) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) b2 sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) y sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P b2 sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) logic.rewrite_l bool sttfa.{|■|}) b2 sttfa.{|■|}) (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) b2 sttfa.{|■|}) (sttfa.{|el-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) __ sttfa.{|■|}))) y sttfa.{|■|}))) (sttfa.{|el-⇒|} ((x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) b2) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) __ sttfa.{|■|}))) y sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P b2 sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) logic.rewrite_l bool sttfa.{|■|}) b2 sttfa.{|■|}) (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) __ sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) logic.refl bool sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) auto sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) auto sttfa.{|■|}))) sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|in-∀|} bool (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb false sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}))) (_b2 : (sttfa.El bool) => (sttfa.{|el-⇒|} (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})) ((x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb false sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}))) _b2) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P false sttfa.{|■|}) (sttfa.app bool sttfa.prop P (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) _b2 sttfa.{|■|}) false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) _b2 sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} bool (case_true : (sttfa.El bool) => (sttfa.{|∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_false bool sttfa.{|■|}) _b2 sttfa.{|■|}) false sttfa.{|■|}) (sttfa.abs bool sttfa.prop (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})))) sttfa.{|■|}) (sttfa.{|in-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (auto : (sttfa.Prf (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})) => (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.{|el-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) y sttfa.{|■|}))) (sttfa.{|el-⇒|} ((x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) true) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) y sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P true sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) logic.rewrite_r bool sttfa.{|■|}) true sttfa.{|■|}) (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) logic.refl bool sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) false sttfa.{|■|}) auto sttfa.{|■|}))) sttfa.{|■|}))) sttfa.{|■|}) b1 sttfa.{|■|}))).
def andb_true_r : (sttfa.Prf (sttfa.{|∀|} bool (b1 : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb b1 sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}))))))).
[] andb_true_r --> (sttfa.{|in-∀|} bool (b1 : (sttfa.El bool) => (sttfa.{|∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb b1 sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}))))) (b1 : (sttfa.El bool) => (sttfa.{|in-∀|} bool (b2 : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb b1 sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}))) (b2 : (sttfa.El bool) => (sttfa.{|el-∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) z sttfa.{|■|})) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) z sttfa.{|■|}))) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) z sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (return_ : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop return_ z sttfa.{|■|})))))) match_bool_prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) sttfa.{|■|}) (sttfa.{|el-⇒|} (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) true sttfa.{|■|}) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P b2 sttfa.{|■|}) (sttfa.app bool sttfa.prop P (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) b2 sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) b2 sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) b2 sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} bool (case_true : (sttfa.El bool) => (sttfa.{|∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_true sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_true bool sttfa.{|■|}) b2 sttfa.{|■|}) false sttfa.{|■|}) (sttfa.abs bool sttfa.prop (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) sttfa.{|■|}) (sttfa.{|in-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (auto : (sttfa.Prf (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})) => (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|}) (sttfa.{|el-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) __ sttfa.{|■|}))) y sttfa.{|■|}))) (sttfa.{|el-⇒|} ((x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) b2) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) __ sttfa.{|■|}))) y sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P b2 sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) logic.rewrite_l bool sttfa.{|■|}) b2 sttfa.{|■|}) (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) __ sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) logic.refl bool sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) auto sttfa.{|■|}))) sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-⇒|} ((z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))) z sttfa.{|■|})) b2) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) andb __ sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) false sttfa.{|■|}) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P false sttfa.{|■|}) (sttfa.app bool sttfa.prop P (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) b2 sttfa.{|■|}) false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) (sttfa.{|el-∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) b2 sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀|} bool (case_true : (sttfa.El bool) => (sttfa.{|∀|} bool (case_false : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz bool sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool bool (sttfa.app bool (sttfa.{|⇝|} bool bool) (sttfa.app bool (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool bool)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type bool sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))) (sttfa.{|el-∀ₚ|} (return_ : sttfa.{|Type|} => (sttfa.{|∀|} return_ (case_true : (sttfa.El return_) => (sttfa.{|∀|} return_ (case_false : (sttfa.El return_) => (sttfa.app return_ sttfa.prop (sttfa.app return_ (sttfa.{|⇝|} return_ sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) leibniz.leibniz return_ sttfa.{|■|}) case_false sttfa.{|■|}) (sttfa.app bool return_ (sttfa.app return_ (sttfa.{|⇝|} bool return_) (sttfa.app return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_)) (sttfa.{|el-∀ₖ|} (return_ : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} return_ (sttfa.{|⇝|} return_ (sttfa.{|⇝|} bool return_))))) match_bool_type return_ sttfa.{|■|}) case_true sttfa.{|■|}) case_false sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))))) sym_eq_match_bool_type_false bool sttfa.{|■|}) b2 sttfa.{|■|}) false sttfa.{|■|}) (sttfa.abs bool sttfa.prop (x : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b2 sttfa.{|■|}) true sttfa.{|■|})))) sttfa.{|■|}) (sttfa.{|el-∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))) z sttfa.{|■|})) (sttfa.{|el-⇒|} (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))) z sttfa.{|■|}))) (sttfa.{|el-⇒|} (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|})) (sttfa.{|⇒|} (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))) z sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (return_ : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop return_ z sttfa.{|■|})))))) match_bool_prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|})))) sttfa.{|■|}) (sttfa.{|in-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}) (auto : (sttfa.Prf (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})) => (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) logic.refl bool sttfa.{|■|}) true sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|in-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (auto : (sttfa.Prf (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|})) => (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}) (sttfa.{|el-∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) y sttfa.{|■|}))) (sttfa.{|el-⇒|} ((x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) true) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) y sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P true sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.{|∀|} (sttfa.{|⇝|} bool sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} bool (y : (sttfa.El bool) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}) (sttfa.app bool sttfa.prop P y sttfa.{|■|})))))))) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) y sttfa.{|■|}) x sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))) logic.rewrite_r bool sttfa.{|■|}) true sttfa.{|■|}) (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) logic.refl bool sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) false sttfa.{|■|}) auto sttfa.{|■|}))) sttfa.{|■|}) b2 sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}) b1 sttfa.{|■|}))))).
def true_or_false : (sttfa.Prf (sttfa.{|∀|} bool (b : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})))).
[] true_or_false --> (sttfa.{|in-∀|} bool (b : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) b sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|})) (b : (sttfa.El bool) => (sttfa.{|el-∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) z sttfa.{|■|})) (sttfa.{|el-⇒|} ((x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) relations.RC bool sttfa.{|■|}) (sttfa.abs bool (sttfa.{|⇝|} bool sttfa.prop) (__ : (sttfa.El bool) => (sttfa.abs bool sttfa.prop (_0 : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}))))) sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) false) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) z sttfa.{|■|}))) (sttfa.{|el-⇒|} (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) true sttfa.{|■|}) (sttfa.{|⇒|} ((x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) relations.RC bool sttfa.{|■|}) (sttfa.abs bool (sttfa.{|⇝|} bool sttfa.prop) (__ : (sttfa.El bool) => (sttfa.abs bool sttfa.prop (_0 : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}))))) sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) false) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) z sttfa.{|■|})))) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool sttfa.prop) (return_ : (sttfa.El (sttfa.{|⇝|} bool sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ true sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app bool sttfa.prop return_ false sttfa.{|■|}) (sttfa.{|∀|} bool (z : (sttfa.El bool) => (sttfa.app bool sttfa.prop return_ z sttfa.{|■|})))))) match_bool_prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) sttfa.{|■|}) (sttfa.{|el-⇒|} ((x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) true) (sttfa.app bool sttfa.prop (sttfa.abs bool sttfa.prop (__ : (sttfa.El bool) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) __ sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}))) true sttfa.{|■|}) (sttfa.{|el-∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}) (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) B sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} A (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or A sttfa.{|■|}) B sttfa.{|■|}))))) connectives.or_introl (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) true sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) logic.refl bool sttfa.{|■|}) true sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} bool (x : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.app (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) relations.RC bool sttfa.{|■|}) (sttfa.abs bool (sttfa.{|⇝|} bool sttfa.prop) (__ : (sttfa.El bool) => (sttfa.abs bool sttfa.prop (_0 : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}))))) sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀|} (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (R : (sttfa.El (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop))) => (sttfa.app (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) sttfa.prop (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))) relations.reflexive bool sttfa.{|■|}) (sttfa.app (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|⇝|} bool (sttfa.{|⇝|} bool sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) relations.RC bool sttfa.{|■|}) R sttfa.{|■|}) sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))) relations.reflexive A sttfa.{|■|}) (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) relations.RC A sttfa.{|■|}) R sttfa.{|■|}) sttfa.{|■|})))) relations.RC_reflexive bool sttfa.{|■|}) (sttfa.abs bool (sttfa.{|⇝|} bool sttfa.prop) (__ : (sttfa.El bool) => (sttfa.abs bool sttfa.prop (_0 : (sttfa.El bool) => (sttfa.app bool sttfa.prop (sttfa.app bool (sttfa.{|⇝|} bool sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq bool sttfa.{|■|}) false sttfa.{|■|}) true sttfa.{|■|}))))) sttfa.{|■|}) false sttfa.{|■|}) sttfa.{|■|}) b sttfa.{|■|}))).
