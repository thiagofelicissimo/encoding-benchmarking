#REQUIRE sttfa.
True : (sttfa.Els (sttfa.{|↑|} sttfa.prop)).
False : (sttfa.Els (sttfa.{|↑|} sttfa.prop)).
Not : (sttfa.Els (sttfa.{|↑|} (sttfa.{|⇝|} sttfa.prop sttfa.prop))).
And : (sttfa.Els (sttfa.{|↑|} (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop)))).
Or : (sttfa.Els (sttfa.{|↑|} (sttfa.{|⇝|} sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop)))).
ex : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A sttfa.prop) sttfa.prop))))).
equal : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))))).
I : (sttfa.Prf True).
falsity : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (t : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} False t)))).
nmk : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} (sttfa.{|⇒|} A False) (sttfa.app sttfa.prop sttfa.prop Not A sttfa.{|■|}))))).
Not_ind : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (Q : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} (sttfa.{|⇒|} (sttfa.{|⇒|} A False) Q) (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop Not A sttfa.{|■|}) Q))))))).
conj : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} A (sttfa.{|⇒|} B (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) And A sttfa.{|■|}) B sttfa.{|■|})))))))).
match_And_prop : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (return_ : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} (sttfa.{|⇒|} A (sttfa.{|⇒|} B return_)) (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) And A sttfa.{|■|}) B sttfa.{|■|}) return_))))))))).
or_introl : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} A (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) Or A sttfa.{|■|}) B sttfa.{|■|}))))))).
or_intror : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} B (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) Or A sttfa.{|■|}) B sttfa.{|■|}))))))).
match_Or_prop : (sttfa.Prf (sttfa.{|∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (return_ : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} (sttfa.{|⇒|} A return_) (sttfa.{|⇒|} (sttfa.{|⇒|} B return_) (sttfa.{|⇒|} (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) Or A sttfa.{|■|}) B sttfa.{|■|}) return_)))))))))).
ex_intro : (sttfa.Prf (sttfa.{|∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.app (sttfa.{|⇝|} A sttfa.prop) sttfa.prop (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A sttfa.prop) sttfa.prop))) ex A sttfa.{|■|}) P sttfa.{|■|}))))))))).
match_ex_prop : (sttfa.Prf (sttfa.{|∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|∀|} sttfa.prop (return_ : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) return_))) (sttfa.{|⇒|} (sttfa.app (sttfa.{|⇝|} A sttfa.prop) sttfa.prop (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A sttfa.prop) sttfa.prop))) ex A sttfa.{|■|}) P sttfa.{|■|}) return_))))))))).
refl_equal : (sttfa.Prf (sttfa.{|∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) equal A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))))).
equal_leibniz : (sttfa.Prf (sttfa.{|∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) equal A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|∀|} (sttfa.{|⇝|} A sttfa.prop) (P : (sttfa.El (sttfa.{|⇝|} A sttfa.prop)) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop P x sttfa.{|■|}) (sttfa.app A sttfa.prop P y sttfa.{|■|})))))))))))).
