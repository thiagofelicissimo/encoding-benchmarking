#REQUIRE connectives.
#REQUIRE logic.
#REQUIRE sttfa.
def reflexive : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))))).
[] reflexive --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))) (A : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R x sttfa.{|■|}) x sttfa.{|■|}))))))).
def transitive : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))))).
[] transitive --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))) (A : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|∀|} A (z : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R y sttfa.{|■|}) z sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R x sttfa.{|■|}) z sttfa.{|■|}))))))))))))).
def RC : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))))).
[] RC --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) (A : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.abs A (sttfa.{|⇝|} A sttfa.prop) (x : (sttfa.El A) => (sttfa.abs A sttfa.prop (y : (sttfa.El A) => (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R x sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}))))))))).
def RC_reflexive : (sttfa.Prf (sttfa.{|∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))) reflexive A sttfa.{|■|}) (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) RC A sttfa.{|■|}) R sttfa.{|■|}) sttfa.{|■|})))))).
[] RC_reflexive --> (sttfa.{|in-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))) reflexive A sttfa.{|■|}) (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) RC A sttfa.{|■|}) R sttfa.{|■|}) sttfa.{|■|})))) (A : sttfa.{|Type|} => (sttfa.{|in-∀|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) sttfa.prop))) reflexive A sttfa.{|■|}) (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) RC A sttfa.{|■|}) R sttfa.{|■|}) sttfa.{|■|})) (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.{|in-∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) RC A sttfa.{|■|}) R sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (x : (sttfa.El A) => (sttfa.{|el-⇒|} ((x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) x) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.app (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))))) RC A sttfa.{|■|}) R sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|}) (sttfa.{|el-∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} B (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R x sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) B sttfa.{|■|}))) (sttfa.{|el-∀|} sttfa.prop (A : (sttfa.El sttfa.prop) => (sttfa.{|∀|} sttfa.prop (B : (sttfa.El sttfa.prop) => (sttfa.{|⇒|} B (sttfa.app sttfa.prop sttfa.prop (sttfa.app sttfa.prop (sttfa.{|⇝|} sttfa.prop sttfa.prop) connectives.Or A sttfa.{|■|}) B sttfa.{|■|}))))) connectives.or_intror (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R x sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}) (sttfa.{|el-∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})) (sttfa.{|el-∀ₚ|} (A : sttfa.{|Type|} => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) x sttfa.{|■|})))) logic.refl A sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}))))))).
def injective_ : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|∀ₖ|} (B : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A B) sttfa.prop))))))).
[] injective_ --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|∀ₖ|} (B : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A B) sttfa.prop))))) (A : sttfa.{|Type|} => (sttfa.{|in-∀ₖ|} (B : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A B) sttfa.prop))) (B : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A B) sttfa.prop (f : (sttfa.El (sttfa.{|⇝|} A B)) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app B sttfa.prop (sttfa.app B (sttfa.{|⇝|} B sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq B sttfa.{|■|}) (sttfa.app A B f x sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A B f y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) x sttfa.{|■|}) y sttfa.{|■|})))))))))))).
def commutative_ : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop))))).
[] commutative_ --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop))) (A : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop (f : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A A))) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f x sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f y sttfa.{|■|}) x sttfa.{|■|}) sttfa.{|■|}))))))))).
def associative_ : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop))))).
[] associative_ --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop))) (A : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop (f : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A A))) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|∀|} A (z : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f x sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) z sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f x sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f y sttfa.{|■|}) z sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}))))))))))).
def monotonic : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} (sttfa.{|⇝|} A A) sttfa.prop)))))).
[] monotonic --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} (sttfa.{|⇝|} A A) sttfa.prop)))) (A : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)) (sttfa.{|⇝|} (sttfa.{|⇝|} A A) sttfa.prop) (R : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop))) => (sttfa.abs (sttfa.{|⇝|} A A) sttfa.prop (f : (sttfa.El (sttfa.{|⇝|} A A)) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|⇒|} (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R x sttfa.{|■|}) y sttfa.{|■|}) (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) R (sttfa.app A A f x sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A A f y sttfa.{|■|}) sttfa.{|■|})))))))))))).
def distributive : (sttfa.Els (sttfa.{|∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop)))))).
[] distributive --> (sttfa.{|in-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop)))) (A : sttfa.{|Type|} => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) (sttfa.{|⇝|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop) (f : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A A))) => (sttfa.abs (sttfa.{|⇝|} A (sttfa.{|⇝|} A A)) sttfa.prop (g : (sttfa.El (sttfa.{|⇝|} A (sttfa.{|⇝|} A A))) => (sttfa.{|∀|} A (x : (sttfa.El A) => (sttfa.{|∀|} A (y : (sttfa.El A) => (sttfa.{|∀|} A (z : (sttfa.El A) => (sttfa.app A sttfa.prop (sttfa.app A (sttfa.{|⇝|} A sttfa.prop) (sttfa.{|el-∀ₖ|} (A : sttfa.{|Type|} => (sttfa.{|↑|} (sttfa.{|⇝|} A (sttfa.{|⇝|} A sttfa.prop)))) logic.eq A sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f x sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) g y sttfa.{|■|}) z sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) g (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f x sttfa.{|■|}) y sttfa.{|■|}) sttfa.{|■|}) (sttfa.app A A (sttfa.app A (sttfa.{|⇝|} A A) f x sttfa.{|■|}) z sttfa.{|■|}) sttfa.{|■|}) sttfa.{|■|}))))))))))))).
