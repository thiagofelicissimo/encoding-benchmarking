require open coq.sttfa;
require coq.bool;
require coq.connectives;
require coq.leibniz;
require coq.logic;
require coq.relations;
constant symbol nat : Type;
constant symbol O : Els (↑ (nat));
constant symbol S : Els (↑ (nat ⇝ nat));
constant symbol match_nat_prop : Prf (∀ (λ return_ : El ((nat ⇝ prop)), (app (return_) O ■) ⇒ (∀ (λ n : El (nat), app (return_) (app (S) n ■) ■)) ⇒ ∀ (λ z : El (nat), app (return_) z ■)));
constant symbol match_nat_type : Els (∀ₖ (λ return_, ↑ (return_ ⇝ (nat ⇝ return_) ⇝ nat ⇝ return_)));
constant symbol axiom_match_nat_type_O : Prf (∀ₚ (λ return_type, ∀ (λ case_O : El (return_type), ∀ (λ case_S : El ((nat ⇝ return_type)), app (app (el-∀ₖ (coq.connectives.equal) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) O ■) ■) case_O ■))));
symbol eq_match_nat_type_O : Prf (∀ₚ (λ return_type, ∀ (λ case_O : El (return_type), ∀ (λ case_S : El ((nat ⇝ return_type)), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) O ■) ■) case_O ■)))) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) O ■) ■) (case_O) ■) (el-∀ (el-∀ (el-∀ₚ (axiom_match_nat_type_O) (return_type) ■) (case_O) ■) (case_S) ■) ■)));
symbol sym_eq_match_nat_type_O : Prf (∀ₚ (λ return_type, ∀ (λ case_O : El (return_type), ∀ (λ case_S : El ((nat ⇝ return_type)), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) case_O ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) O ■) ■)))) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) O ■) ■) (case_O) ■) (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (return_type) ■) (case_O) ■) (case_S) ■) ■)));
constant symbol axiom_match_nat_type_S : Prf (∀ₚ (λ return_type, ∀ (λ case_O : El (return_type), ∀ (λ case_S : El ((nat ⇝ return_type)), ∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) (app (S) n ■) ■) ■) (app (case_S) n ■) ■)))));
symbol eq_match_nat_type_S : Prf (∀ₚ (λ return_type, ∀ (λ case_O : El (return_type), ∀ (λ case_S : El ((nat ⇝ return_type)), ∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) (app (S) n ■) ■) ■) (app (case_S) n ■) ■))))) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) (app (S) n ■) ■) ■) (app (case_S) n ■) ■) (el-∀ (el-∀ (el-∀ (el-∀ₚ (axiom_match_nat_type_S) (return_type) ■) (case_O) ■) (case_S) ■) (n) ■) ■))));
symbol sym_eq_match_nat_type_S : Prf (∀ₚ (λ return_type, ∀ (λ case_O : El (return_type), ∀ (λ case_S : El ((nat ⇝ return_type)), ∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) (app (case_S) n ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) (app (S) n ■) ■) ■))))) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type) ■) (app (app (app (el-∀ₖ (match_nat_type) (return_type) ■) case_O ■) case_S ■) (app (S) n ■) ■) ■) (app (case_S) n ■) ■) (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (return_type) ■) (case_O) ■) (case_S) ■) (n) ■) ■))));
constant symbol filter_nat_type : Els (∀ₖ (λ return_, ↑ ((nat ⇝ return_) ⇝ nat ⇝ return_)));
constant symbol axiom_filter_nat_type_O : Prf (∀ₚ (λ return_type, ∀ (λ return_ : El ((nat ⇝ return_type)), app (app (el-∀ₖ (coq.connectives.equal) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) O ■) ■) (app (return_) O ■) ■)));
symbol eq_filter_nat_type_O : Prf (∀ₚ (λ return_type, ∀ (λ return_ : El ((nat ⇝ return_type)), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) O ■) ■) (app (return_) O ■) ■))) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) O ■) ■) (app (return_) O ■) ■) (el-∀ (el-∀ₚ (axiom_filter_nat_type_O) (return_type) ■) (return_) ■) ■));
symbol sym_eq_filter_nat_type_O : Prf (∀ₚ (λ return_type, ∀ (λ return_ : El ((nat ⇝ return_type)), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) (app (return_) O ■) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) O ■) ■))) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) O ■) ■) (app (return_) O ■) ■) (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (return_type) ■) (return_) ■) ■));
constant symbol axiom_filter_nat_type_S : Prf (∀ₚ (λ return_type, ∀ (λ return_ : El ((nat ⇝ return_type)), ∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) (app (S) n ■) ■) ■) (app (return_) (app (S) n ■) ■) ■))));
symbol eq_filter_nat_type_S : Prf (∀ₚ (λ return_type, ∀ (λ return_ : El ((nat ⇝ return_type)), ∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) (app (S) n ■) ■) ■) (app (return_) (app (S) n ■) ■) ■)))) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) (app (S) n ■) ■) ■) (app (return_) (app (S) n ■) ■) ■) (el-∀ (el-∀ (el-∀ₚ (axiom_filter_nat_type_S) (return_type) ■) (return_) ■) (n) ■) ■)));
symbol sym_eq_filter_nat_type_S : Prf (∀ₚ (λ return_type, ∀ (λ return_ : El ((nat ⇝ return_type)), ∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_type) ■) (app (return_) (app (S) n ■) ■) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) (app (S) n ■) ■) ■)))) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type) ■) (app (app (el-∀ₖ (filter_nat_type) (return_type) ■) return_ ■) (app (S) n ■) ■) ■) (app (return_) (app (S) n ■) ■) ■) (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_S) (return_type) ■) (return_) ■) (n) ■) ■)));
constant symbol nat_ind : Prf (∀ (λ Q : El ((nat ⇝ prop)), (app (Q) O ■) ⇒ (∀ (λ x : El (nat), (app (Q) x ■) ⇒ app (Q) (app (S) x ■) ■)) ⇒ ∀ (λ x : El (nat), app (Q) x ■)));
symbol pred : Els (↑ (nat ⇝ nat)) ≔ abs (λ n : El (nat), app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) n ■);
symbol not_zero : Els (↑ (nat ⇝ prop)) ≔ abs (λ n : El (nat), app (app (app (el-∀ₖ (match_nat_type) (prop) ■) coq.connectives.False ■) (abs (λ p : El (nat), coq.connectives.True)) ■) n ■);
constant symbol le : Els (↑ (nat ⇝ nat ⇝ prop));
constant symbol le_n : Prf (∀ (λ n : El (nat), app (app (le) n ■) n ■));
constant symbol le_S : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (le) n ■) (app (S) m ■) ■)));
constant symbol match_le_prop : Prf (∀ (λ n : El (nat), ∀ (λ return_ : El ((nat ⇝ prop)), (app (return_) n ■) ⇒ (∀ (λ m : El (nat), app (return_) (app (S) m ■) ■)) ⇒ ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (return_) m ■))));
constant symbol le_ind : Prf (∀ (λ n : El (nat), ∀ (λ Q : El ((nat ⇝ prop)), (app (Q) n ■) ⇒ (∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ (app (Q) m ■) ⇒ app (Q) (app (S) m ■) ■)) ⇒ ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (Q) m ■))));
symbol lt : Els (↑ (nat ⇝ nat ⇝ prop)) ≔ abs (λ n : El (nat), abs (λ m : El (nat), app (app (le) (app (S) n ■) ■) m ■));
constant symbol plus : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol plus_body : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol axiom_plus : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (plus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) n ■) ■));
symbol eq_plus : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (plus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (plus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) n ■) ■) (el-∀ (axiom_plus) (n) ■) ■);
symbol sym_eq_plus : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) n ■) ■) (app (plus) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (plus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) n ■) ■) (el-∀ (eq_plus) (n) ■) ■);
constant symbol axiom_plus_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (plus_body) O ■) ■) (abs (λ m : El (nat), m)) ■);
symbol eq_plus_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (plus_body) O ■) ■) (abs (λ m : El (nat), m)) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (plus_body) O ■) ■) (abs (λ m : El (nat), m)) ■) (axiom_plus_body_O) ■;
symbol sym_eq_plus_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (abs (λ m : El (nat), m)) ■) (app (plus_body) O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (plus_body) O ■) ■) (abs (λ m : El (nat), m)) ■) (eq_plus_body_O) ■;
constant symbol axiom_plus_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (plus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (S) (app (app (plus) n ■) m ■) ■)) ■));
symbol eq_plus_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (plus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (S) (app (app (plus) n ■) m ■) ■)) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (plus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (S) (app (app (plus) n ■) m ■) ■)) ■) (el-∀ (axiom_plus_body_S) (n) ■) ■);
symbol sym_eq_plus_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (abs (λ m : El (nat), app (S) (app (app (plus) n ■) m ■) ■)) ■) (app (plus_body) (app (S) n ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (plus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (S) (app (app (plus) n ■) m ■) ■)) ■) (el-∀ (eq_plus_body_S) (n) ■) ■);
constant symbol times : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol times_body : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol axiom_times : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (times) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) n ■) ■));
symbol eq_times : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (times) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (times) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) n ■) ■) (el-∀ (axiom_times) (n) ■) ■);
symbol sym_eq_times : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) n ■) ■) (app (times) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (times) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) n ■) ■) (el-∀ (eq_times) (n) ■) ■);
constant symbol axiom_times_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (times_body) O ■) ■) (abs (λ m : El (nat), O)) ■);
symbol eq_times_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (times_body) O ■) ■) (abs (λ m : El (nat), O)) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (times_body) O ■) ■) (abs (λ m : El (nat), O)) ■) (axiom_times_body_O) ■;
symbol sym_eq_times_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (abs (λ m : El (nat), O)) ■) (app (times_body) O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (times_body) O ■) ■) (abs (λ m : El (nat), O)) ■) (eq_times_body_O) ■;
constant symbol axiom_times_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (times_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (plus) m ■) (app (app (times) n ■) m ■) ■)) ■));
symbol eq_times_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (times_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (plus) m ■) (app (app (times) n ■) m ■) ■)) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (times_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (plus) m ■) (app (app (times) n ■) m ■) ■)) ■) (el-∀ (axiom_times_body_S) (n) ■) ■);
symbol sym_eq_times_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (abs (λ m : El (nat), app (app (plus) m ■) (app (app (times) n ■) m ■) ■)) ■) (app (times_body) (app (S) n ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (times_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (plus) m ■) (app (app (times) n ■) m ■) ■)) ■) (el-∀ (eq_times_body_S) (n) ■) ■);
constant symbol minus : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol minus_body : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol axiom_minus : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (minus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) n ■) ■));
symbol eq_minus : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (minus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (minus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) n ■) ■) (el-∀ (axiom_minus) (n) ■) ■);
symbol sym_eq_minus : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) n ■) ■) (app (minus) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (minus) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) n ■) ■) (el-∀ (eq_minus) (n) ■) ■);
constant symbol axiom_minus_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (minus_body) O ■) ■) (abs (λ m : El (nat), O)) ■);
symbol eq_minus_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (minus_body) O ■) ■) (abs (λ m : El (nat), O)) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (minus_body) O ■) ■) (abs (λ m : El (nat), O)) ■) (axiom_minus_body_O) ■;
symbol sym_eq_minus_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (abs (λ m : El (nat), O)) ■) (app (minus_body) O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (minus_body) O ■) ■) (abs (λ m : El (nat), O)) ■) (eq_minus_body_O) ■;
constant symbol axiom_minus_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ nat) ■) (app (minus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) m ■)) ■));
symbol eq_minus_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (app (minus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) m ■)) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat) ■) (app (minus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) m ■)) ■) (el-∀ (axiom_minus_body_S) (n) ■) ■);
symbol sym_eq_minus_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ nat) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) m ■)) ■) (app (minus_body) (app (S) n ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat) ■) (app (minus_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) m ■)) ■) (el-∀ (eq_minus_body_S) (n) ■) ■);
symbol nat_case : Prf (∀ (λ n : El (nat), ∀ (λ P : El ((nat ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) O ■) ⇒ app (P) O ■) ⇒ (∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (S) m ■) ■) ⇒ app (P) (app (S) m ■) ■)) ⇒ app (P) n ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ P : El (nat ⇝ prop),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) _x_365 ■) O ■) ⇒ app (P) O ■) ⇒ (∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) _x_365 ■) (app (S) m ■) ■) ⇒ app (P) (app (S) m ■) ■)) ⇒ app (P) _x_365 ■)) ■) (in-⇒ (λ auto : Prf ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ⇒ app (P) O ■), in-⇒ (λ auto' : Prf (∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) m ■) ■) ⇒ app (P) (app (S) m ■) ■)), el-⇒ (auto) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■))) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) x_366 ■) O ■) ⇒ app (P) O ■) ⇒ (∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) x_366 ■) (app (S) m ■) ■) ⇒ app (P) (app (S) m ■) ■)) ⇒ app (P) x_366 ■), in-⇒ (λ auto : Prf ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) x_366 ■) ■) O ■) ⇒ app (P) O ■), in-⇒ (λ auto' : Prf (∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) x_366 ■) ■) (app (S) m ■) ■) ⇒ app (P) (app (S) m ■) ■)), el-⇒ (el-∀ (auto') (x_366) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) x_366 ■) ■) ■))))) ■) (n) ■));
symbol nat_elim2 : Prf (∀ (λ R : El ((nat ⇝ nat ⇝ prop)), (∀ (λ n : El (nat), app (app (R) O ■) n ■)) ⇒ (∀ (λ n : El (nat), app (app (R) (app (S) n ■) ■) O ■)) ⇒ (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (R) n ■) m ■) ⇒ app (app (R) (app (S) n ■) ■) (app (S) m ■) ■))) ⇒ ∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (R) n ■) m ■)))) ≔ in-∀ (λ R : El (nat ⇝ nat ⇝ prop),  in-⇒ (λ ROn : Prf (∀ (λ n : El (nat), app (app (R) O ■) n ■)), in-⇒ (λ RSO : Prf (∀ (λ n : El (nat), app (app (R) (app (S) n ■) ■) O ■)), in-⇒ (λ RSS : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (R) n ■) m ■) ⇒ app (app (R) (app (S) n ■) ■) (app (S) m ■) ■))), in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ m : El (nat), app (app (R) _x_365 ■) m ■))) ■) (in-∀ (λ m : El (nat),  el-∀ (ROn) (m) ■)) ■) (in-∀ (λ n0 : El (nat),  in-⇒ (λ Rn0m : Prf (∀ (λ m : El (nat), app (app (R) n0 ■) m ■)), in-∀ (λ m : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), app (app (R) (app (S) n0 ■) ■) __ ■)) ■) (el-∀ (RSO) (n0) ■) ■) (in-∀ (λ auto : El (nat),  el-⇒ (el-∀ (el-∀ (RSS) (n0) ■) (auto) ■) (el-∀ (Rn0m) (auto) ■) ■)) ■) (m) ■)))) ■) (n) ■)))));
symbol le_gen : Prf (∀ (λ P : El ((nat ⇝ prop)), ∀ (λ n : El (nat), (∀ (λ i : El (nat), (app (app (le) i ■) n ■) ⇒ app (P) i ■)) ⇒ app (P) n ■))) ≔ in-∀ (λ P : El (nat ⇝ prop),  in-∀ (λ n : El (nat),  in-⇒ (λ auto : Prf (∀ (λ i : El (nat), (app (app (le) i ■) n ■) ⇒ app (P) i ■)), el-⇒ (el-∀ (auto) (n) ■) (el-∀ (le_n) (n) ■) ■)));
symbol pred_Sn : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (pred) (app (S) n ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (O) ■) (abs (λ p : El (nat), p)) ■) (n) ■) (abs (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (n) ■) ■);
symbol injective_S : Prf (app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) S ■) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) x ■) ■) (app (S) y ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (y) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (y) ■) ■) (x) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (pred) (app (S) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) y ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (S) y ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) y ■) (app (pred) __ ■) ■)) ■) (el-∀ (pred_Sn) (y) ■) ■) (app (S) x ■) ■) (auto) ■) ■) (x) ■) (el-∀ (pred_Sn) (x) ■) ■) ■)));
symbol S_pred : Prf (∀ (λ n : El (nat), (app (app (lt) O ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (pred) n ■) ■) ■) n ■)) ≔ in-∀ (λ n : El (nat),  in-⇒ (λ posn : Prf (app (app (lt) O ■) n ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (match_le_prop) (app (S) O ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (pred) __ ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) __ ■) ■) (app (S) O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) O ■) ■) ■) (app (pred) (app (S) O ■) ■) ■) (el-∀ (pred_Sn) (O) ■) ■) ■) (in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) __ ■) ■) (app (S) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) m ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) (el-∀ (pred_Sn) (m) ■) ■)) ■) (n) ■) (posn) ■));
symbol plus_O_n : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) O ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (y) n ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (n) ■) ■) ■) ■);
symbol plus_n_O : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) n ■) O ■) ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) _x_365 ■) (app (app (plus) _x_365 ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) x_366 ■) (app (app (plus) x_366 ■) O ■) ■), el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) x_366 ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) x_366 ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) x_366 ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (x_366) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) x_366 ■) ■) (app (S) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) x_366 ■) ■) ■) (app (app (plus) x_366 ■) O ■) ■) (_x_368) ■) ■) ■) ■))) ■) (n) ■);
symbol plus_n_Sm : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (plus) n ■) m ■) ■) ■) (app (app (plus) n ■) (app (S) m ■) ■) ■))) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (plus) _x_365 ■) m ■) ■) ■) (app (app (plus) _x_365 ■) (app (S) m ■) ■) ■))) ■) (in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (y) m ■) ■) ■) (app (app (plus) O ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (y) m ■) ■) ■) (app (app (plus_body) O ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (y) m ■) ■) ■) (app (app (plus_body) O ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) m ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) m ■) ■) ■) ■) ■) ■) ■) ■)) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■)), in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (y) m ■) ■) ■) (app (app (plus) (app (S) x_366 ■) ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) x_366 ■) ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) x_366 ■) ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (y) m ■) ■) ■) (app (app (plus_body) (app (S) x_366 ■) ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (y) m ■) ■) ■) (app (app (plus_body) (app (S) x_366 ■) ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) __ ■) ■) (app (S) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) (app (S) m ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (S) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) (app (S) m ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (S) (app (S) m ■) ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) x_366 ■) (app (S) (app (S) m ■) ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■) (el-∀ (_x_368) (app (S) m ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■) (el-∀ (_x_368) (app (S) m ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■) (el-∀ (_x_368) (m) ■) ■) ■) ■) ■) ■) ■) ■)))) ■) (n) ■);
symbol commutative_plus : Prf (app (el-∀ₖ (coq.relations.commutative_) (nat) ■) plus ■) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) _x_365 ■) y ■) ■) (app (app (plus) y ■) _x_365 ■) ■))) ■) (in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (plus) y ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (plus) y ■) O ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (plus) y ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (y) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) y ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (y) ■) ■) (app (app (plus) y ■) O ■) ■) (el-∀ (plus_n_O) (y) ■) ■) ■) ■) ■)) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) y ■) ■) (app (app (plus) y ■) x_366 ■) ■)), in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) y ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■) ■) (app (app (plus) x_366 ■) (app (S) y ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) y ■) x_366 ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) __ ■) ■) (app (app (plus) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-∀ (el-∀ (plus_n_Sm) (y) ■) (x_366) ■) ■) (app (app (plus) x_366 ■) y ■) ■) (el-∀ (_x_368) (y) ■) ■) ■) (app (app (plus) x_366 ■) (app (S) y ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (y) ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (y) ■) ■) ■) ■) ■)))) ■) (n) ■);
symbol associative_plus : Prf (app (el-∀ₖ (coq.relations.associative_) (nat) ■) plus ■) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus) _x_365 ■) y ■) ■) z ■) ■) (app (app (plus) _x_365 ■) (app (app (plus) y ■) z ■) ■) ■)))) ■) (in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus) O ■) y ■) ■) z ■) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus_body) O ■) y ■) ■) z ■) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus_body) O ■) y ■) ■) z ■) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (x) y ■) ■) z ■) ■) (app (app (plus) y ■) z ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) ■) ■) ■))) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus) x_366 ■) y ■) ■) z ■) ■) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■))), in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus) (app (S) x_366 ■) ■) y ■) ■) z ■) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus_body) (app (S) x_366 ■) ■) y ■) ■) z ■) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (plus_body) (app (S) x_366 ■) ■) y ■) ■) z ■) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (x) y ■) ■) z ■) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) z ■) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (app (app (plus) x_366 ■) y ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) z ■) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (app (app (plus) x_366 ■) y ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) z ■) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) __ ■) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) (app (app (plus) (app (app (plus) x_366 ■) y ■) ■) z ■) ■) (el-∀ (el-∀ (_x_368) (y) ■) (z) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■))))) ■) (n) ■);
symbol assoc_plus1 : Prf (∀ (λ a : El (nat), ∀ (λ b : El (nat), ∀ (λ c : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) c ■) (app (app (plus) b ■) a ■) ■) ■) (app (app (plus) (app (app (plus) b ■) c ■) ■) a ■) ■)))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) b ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) c ■) __ ■) ■) (app (app (plus) (app (app (plus) b ■) c ■) ■) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) (app (app (plus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) c ■) (app (app (plus) a ■) b ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) (app (app (plus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (plus) a ■) (app (app (plus) b ■) c ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) a ■) (app (app (plus) b ■) c ■) ■) ■) ■) (app (app (plus) c ■) (app (app (plus) a ■) b ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) (app (app (plus) a ■) b ■) ■) c ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) c ■) (app (app (plus) a ■) b ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ (commutative_plus) (c) ■) (app (app (plus) a ■) b ■) ■) ■) (app (app (plus) a ■) (app (app (plus) b ■) c ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (a) ■) (b) ■) (c) ■) ■) ■) ■) (app (app (plus) (app (app (plus) b ■) c ■) ■) a ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (plus) b ■) c ■) ■) (a) ■) ■) ■) (app (app (plus) b ■) a ■) ■) (el-∀ (el-∀ (commutative_plus) (b) ■) (a) ■) ■)));
symbol injective_plus_r : Prf (∀ (λ n : El (nat), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (app (plus) n ■) m ■)) ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (app (plus) _x_365 ■) m ■)) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (y) m ■)) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (y) m ■)) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (y) m ■)) ■)) ■) (in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) x ■) y ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (x) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) x ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (x) ■) ■) (y) ■) (auto) ■)))) ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ x : El (nat), ∀ (λ y : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) x ■) ■) (app (app (plus) x_366 ■) y ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) x ■) y ■))), el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (y) m ■)) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (y) m ■)) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (nat) ■) (nat) ■) (abs (λ m : El (nat), app (y) m ■)) ■)) ■) (in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (plus) x_366 ■) x ■) ■) ■) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■), el-⇒ (el-∀ (el-∀ (_x_368) (x) ■) (y) ■) (el-⇒ (el-∀ (el-∀ (injective_S) (app (app (plus) x_366 ■) x ■) ■) (app (app (plus) x_366 ■) y ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) y ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (S) x ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) x_366 ■) (app (S) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (S) x ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) x_366 ■) (app (S) x ■) ■) ■) ■) (app (app (plus) x_366 ■) (app (S) y ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (S) x ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) (app (app (plus) x_366 ■) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■)) ■) (auto) ■) (app (app (plus) x_366 ■) (app (S) x ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (x) ■) ■) ■) (app (app (plus) x_366 ■) (app (S) y ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (y) ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) y ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (y) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) x ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (x) ■) ■) ■) ■)))) ■) ■) ■))) ■) (n) ■);
symbol times_Sn_m : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (times) n ■) m ■) ■) ■) (app (app (times) (app (S) n ■) ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (times) n ■) m ■) ■) ■) (app (y) m ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (times) n ■) m ■) ■) ■) (app (y) m ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (times) n ■) m ■) ■) ■) (app (y) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) m ■) (app (app (times) n ■) m ■) ■) ■) ■) ■) ■));
symbol times_O_n : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (times) O ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) n ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) ■) ■);
symbol times_n_O : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (times) n ■) O ■) ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (times) _x_365 ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) (app (app (times) O ■) O ■) ■) (el-∀ (times_O_n) (O) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (times) x_366 ■) O ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) O ■) (app (app (times) x_366 ■) O ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (plus) O ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) (app (app (plus) O ■) O ■) ■) (el-∀ (plus_O_n) (O) ■) ■) ■) (app (app (times) x_366 ■) O ■) ■) (_x_368) ■) ■) (app (app (times) (app (S) x_366 ■) ■) O ■) ■) (el-∀ (el-∀ (times_Sn_m) (x_366) ■) (O) ■) ■))) ■) (n) ■);
symbol times_n_Sm : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) n ■) (app (app (times) n ■) m ■) ■) ■) (app (app (times) n ■) (app (S) m ■) ■) ■))) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) _x_365 ■) (app (app (times) _x_365 ■) m ■) ■) ■) (app (app (times) _x_365 ■) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) O ■) (app (app (times) O ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) O ■) (app (y) m ■) ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) O ■) (app (y) m ■) ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) O ■) (app (app (times_body) O ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) O ■) (app (app (times_body) O ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) O ■) (app (y) m ■) ■) ■) O ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) O ■) ■) O ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) O ■) ■) O ■))) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) O ■) ■) O ■))) ■) (in-∀ (λ _m : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■)) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (app (times) x_366 ■) m ■) ■) ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■)), in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (S) x_366 ■) ■) (app (app (times) (app (S) x_366 ■) ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (S) x_366 ■) ■) (app (y) m ■) ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (S) x_366 ■) ■) (app (y) m ■) ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (S) x_366 ■) ■) (app (app (times_body) (app (S) x_366 ■) ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (S) x_366 ■) ■) (app (app (times_body) (app (S) x_366 ■) ■) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (S) x_366 ■) ■) (app (y) m ■) ■) ■) (app (app (plus) (app (S) m ■) ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (app (app (plus) (app (S) m ■) ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (app (app (plus) (app (S) m ■) ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (app (app (plus) (app (S) m ■) ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) m ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (y) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (m) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (y) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (y) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (S) (app (app (plus) m ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) (app (S) (app (app (times) x_366 ■) m ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) __ ■) ■) (app (S) (app (app (plus) m ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) x_366 ■) (app (app (times) x_366 ■) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (S) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (S) (app (app (plus) m ■) __ ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (S) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (S) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (S) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) (app (S) (app (app (times) x_366 ■) m ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (S) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (app (plus) x_366 ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (S) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) ■) (app (S) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (m) ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (app (plus) m ■) (app (app (plus) x_366 ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) (app (app (plus) x_366 ■) m ■) ■) (app (app (times) x_366 ■) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (plus) x_366 ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ (el-∀ (assoc_plus1) (app (app (times) x_366 ■) m ■) ■) (x_366) ■) (m) ■) ■) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (x_366) ■) (m) ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (app (app (times) x_366 ■) (app (S) m ■) ■) ■) (el-∀ (_x_368) (m) ■) ■) ■) (app (S) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (m) ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (app (app (plus) m ■) (app (app (times) x_366 ■) m ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■)))) ■) (n) ■);
symbol commutative_times : Prf (app (el-∀ₖ (coq.relations.commutative_) (nat) ■) times ■) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) _x_365 ■) y ■) ■) (app (app (times) y ■) _x_365 ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) z ■) ■) (app (app (times) z ■) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) z ■) ■) (app (app (times) z ■) O ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) z ■) ■) (app (app (times) z ■) O ■) ■))) ■) (in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) (app (app (times) y ■) O ■) ■) (el-∀ (times_n_O) (y) ■) ■)) ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) x_366 ■) y ■) ■) (app (app (times) y ■) x_366 ■) ■)), in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (times) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (times) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (z) y ■) ■) (app (app (times) y ■) (app (S) x_366 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) y ■) (app (app (times) y ■) x_366 ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (times) x_366 ■) y ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) (app (app (plus) y ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) ■) (app (app (times) y ■) x_366 ■) ■) (el-∀ (_x_368) (y) ■) ■) ■) (app (app (times) y ■) (app (S) x_366 ■) ■) ■) (el-∀ (el-∀ (times_n_Sm) (y) ■) (x_366) ■) ■) ■) ■) ■)))) ■) (n) ■);
symbol distributive_times_plus : Prf (app (app (el-∀ₖ (coq.relations.distributive) (nat) ■) times ■) plus ■) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) _x_365 ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times) _x_365 ■) y ■) ■) (app (app (times) _x_365 ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) O ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times) O ■) y ■) ■) (app (x) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) O ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (x) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) O ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (x) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) O ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times_body) O ■) y ■) ■) (app (x) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) O ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times_body) O ■) y ■) ■) (app (x) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) O ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (x) y ■) ■) O ■) ■)))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) O ■) O ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (x) O ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (x) O ■) ■)))) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (x) O ■) ■)))) ■) (in-∀ (λ _y : El (nat),  in-∀ (λ _z : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■))) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times) x_366 ■) y ■) ■) (app (app (times) x_366 ■) z ■) ■) ■))), in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times) (app (S) x_366 ■) ■) y ■) ■) (app (x) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (x) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (x) y ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times_body) (app (S) x_366 ■) ■) y ■) ■) (app (x) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (times_body) (app (S) x_366 ■) ■) y ■) ■) (app (x) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times_body) (app (S) x_366 ■) ■) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (x) y ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) (app (app (plus) y ■) z ■) ■) ■) (app (app (plus) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) y ■) (app (app (plus) z ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (plus) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) y ■) (app (app (plus) (app (app (times) x_366 ■) y ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) y ■) (app (app (plus) z ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) z ■) (app (app (plus) (app (app (times) x_366 ■) y ■) ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) y ■) (app (app (plus) z ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) (app (app (plus) y ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) y ■) (app (app (plus) z ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) (app (app (plus) y ■) (app (app (plus) z ■) __ ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) y ■) (app (app (plus) z ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) ■) (app (app (plus) (app (app (times) x_366 ■) y ■) ■) (app (app (times) x_366 ■) z ■) ■) ■) (el-∀ (el-∀ (_x_368) (y) ■) (z) ■) ■) ■) (app (app (plus) (app (app (times) x_366 ■) y ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) (app (app (plus) z ■) (app (app (times) x_366 ■) y ■) ■) ■) (app (app (times) x_366 ■) z ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (times) x_366 ■) y ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ (el-∀ (assoc_plus1) (app (app (times) x_366 ■) z ■) ■) (z) ■) (app (app (times) x_366 ■) y ■) ■) ■) (app (app (plus) z ■) (app (app (plus) (app (app (times) x_366 ■) y ■) ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (z) ■) (app (app (times) x_366 ■) y ■) ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) ■) (app (app (plus) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (y) ■) (app (app (times) x_366 ■) y ■) ■) (app (app (plus) z ■) (app (app (times) x_366 ■) z ■) ■) ■) ■) ■) (app (app (plus) (app (app (plus) y ■) z ■) ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (y) ■) (z) ■) (app (app (times) x_366 ■) (app (app (plus) y ■) z ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■))))) ■) (n) ■);
symbol distributive_times_plus_r : Prf (∀ (λ a : El (nat), ∀ (λ b : El (nat), ∀ (λ c : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (plus) b ■) c ■) ■) a ■) ■) (app (app (plus) (app (app (times) b ■) a ■) ■) (app (app (times) c ■) a ■) ■) ■)))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) a ■) (app (app (plus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (plus) (app (app (times) b ■) a ■) ■) (app (app (times) c ■) a ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) a ■) b ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) a ■) (app (app (plus) b ■) c ■) ■) ■) (app (app (plus) __ ■) (app (app (times) c ■) a ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) a ■) c ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) a ■) (app (app (plus) b ■) c ■) ■) ■) (app (app (plus) (app (app (times) a ■) b ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (times) a ■) (app (app (plus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) a ■) (app (app (plus) b ■) c ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (times) a ■) (app (app (plus) b ■) c ■) ■) ■) ■) (app (app (plus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■) (el-∀ (el-∀ (el-∀ (distributive_times_plus) (a) ■) (b) ■) (c) ■) ■) ■) (app (app (times) c ■) a ■) ■) (el-∀ (el-∀ (commutative_times) (c) ■) (a) ■) ■) ■) (app (app (times) b ■) a ■) ■) (el-∀ (el-∀ (commutative_times) (b) ■) (a) ■) ■) ■) (app (app (times) (app (app (plus) b ■) c ■) ■) a ■) ■) (el-∀ (el-∀ (commutative_times) (app (app (plus) b ■) c ■) ■) (a) ■) ■)));
symbol associative_times : Prf (app (el-∀ₖ (coq.relations.associative_) (nat) ■) times ■) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times) _x_365 ■) y ■) ■) z ■) ■) (app (app (times) _x_365 ■) (app (app (times) y ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times) O ■) y ■) ■) z ■) ■) (app (x) (app (app (times) y ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) (app (app (times) y ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) (app (app (times) y ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times_body) O ■) y ■) ■) z ■) ■) (app (x) (app (app (times) y ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times_body) O ■) y ■) ■) z ■) ■) (app (x) (app (app (times) y ■) z ■) ■) ■)))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (x) y ■) ■) z ■) ■) O ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) z ■) ■) O ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) z ■) ■) O ■)))) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ x : El ((nat ⇝ nat)), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (x) z ■) ■) O ■)))) ■) (in-∀ (λ _y : El (nat),  in-∀ (λ _z : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■))) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times) x_366 ■) y ■) ■) z ■) ■) (app (app (times) x_366 ■) (app (app (times) y ■) z ■) ■) ■))), in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times) (app (S) x_366 ■) ■) y ■) ■) z ■) ■) (app (x) (app (app (times) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) x_366 ■) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) (app (app (times) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (x) y ■) ■) z ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) x_366 ■) ■) (app (app (times) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times_body) (app (S) x_366 ■) ■) y ■) ■) z ■) ■) (app (x) (app (app (times) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (times_body) (app (S) x_366 ■) ■) y ■) ■) z ■) ■) (app (x) (app (app (times) y ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366) ■) (abs (λ x : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (x) y ■) ■) z ■) ■) (app (app (plus) (app (app (times) y ■) z ■) ■) (app (app (times) x_366 ■) (app (app (times) y ■) z ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) (app (app (times) y ■) z ■) ■) (app (app (times) x_366 ■) (app (app (times) y ■) z ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (plus) (app (app (times) y ■) z ■) ■) (app (app (times) x_366 ■) (app (app (times) y ■) z ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) (app (app (times) y ■) z ■) ■) (app (app (times) x_366 ■) (app (app (times) y ■) z ■) ■) ■) ■) ■) (app (app (times) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) z ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (times) (app (app (times) x_366 ■) y ■) ■) z ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) (app (app (plus) y ■) (app (app (times) x_366 ■) y ■) ■) ■) z ■) ■) (app (app (plus) (app (app (times) y ■) z ■) ■) __ ■) ■)) ■) (el-∀ (el-∀ (el-∀ (distributive_times_plus_r) (z) ■) (y) ■) (app (app (times) x_366 ■) y ■) ■) ■) (app (app (times) x_366 ■) (app (app (times) y ■) z ■) ■) ■) (el-∀ (el-∀ (_x_368) (y) ■) (z) ■) ■) ■) ■) ■) ■) ■) ■) ■))))) ■) (n) ■);
symbol times_times : Prf (∀ (λ x : El (nat), ∀ (λ y : El (nat), ∀ (λ z : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) x ■) (app (app (times) y ■) z ■) ■) ■) (app (app (times) y ■) (app (app (times) x ■) z ■) ■) ■)))) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) y ■) (app (app (times) x ■) z ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (times) y ■) (app (app (times) x ■) z ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (times) y ■) (app (app (times) x ■) z ■) ■) ■) ■) (app (app (times) x ■) (app (app (times) y ■) z ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (times) (app (app (times) x ■) y ■) ■) z ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (times) y ■) (app (app (times) x ■) z ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (times) y ■) x ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) __ ■) z ■) ■) (app (app (times) y ■) (app (app (times) x ■) z ■) ■) ■)) ■) (el-∀ (el-∀ (el-∀ (associative_times) (y) ■) (x) ■) (z) ■) ■) (app (app (times) x ■) y ■) ■) (el-∀ (el-∀ (commutative_times) (y) ■) (x) ■) ■) ■) (app (app (times) x ■) (app (app (times) y ■) z ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_times) (x) ■) (y) ■) (z) ■) ■) ■)));
symbol times_n_1 : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (times) n ■) (app (S) O ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) n ■) (app (app (times) n ■) O ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) n ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (n) ■) ■) (app (app (plus) n ■) O ■) ■) (el-∀ (plus_n_O) (n) ■) ■) ■) (app (app (times) n ■) O ■) ■) (el-∀ (times_n_O) (n) ■) ■) ■) (app (app (times) n ■) (app (S) O ■) ■) ■) (el-∀ (el-∀ (times_n_Sm) (n) ■) (O) ■) ■);
symbol minus_S_S : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (app (minus) n ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) (m) ■) (abs (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) m ■) ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (eq_minus_body_S) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (eq_minus) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (y) (app (S) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) m ■) ■) ■) ■) ■) ■) ■));
symbol minus_O_n : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (minus) O ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (minus) O ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (minus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_minus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ n0 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) (app (S) n0 ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (minus_body) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ n0 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) (app (S) n0 ■) ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_minus_body_O) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ n0 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (y) (app (S) n0 ■) ■) ■))) ■) (in-∀ (λ auto : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■)) ■) ■) ■) ■) (n) ■);
symbol minus_n_O : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) n ■) O ■) ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (minus) __ ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) (app (app (minus) O ■) O ■) ■) (el-∀ (minus_O_n) (O) ■) ■) ■) (in-∀ (λ auto : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) auto ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) auto ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (auto) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) auto ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (auto) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) auto ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat) ■) (app (S) auto ■) ■) (abs (λ q : El (nat), app (app (minus) auto ■) q ■)) ■) (abs (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) auto ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) auto ■) ■) ■) ■) ■) ■)) ■) (n) ■);
symbol minus_n_n : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (minus) n ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (minus) _x_365 ■) _x_365 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) (app (app (minus) O ■) O ■) ■) (el-∀ (minus_O_n) (O) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (app (minus) x_366 ■) x_366 ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (minus) x_366 ■) x_366 ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) (app (app (minus) x_366 ■) x_366 ■) ■) (_x_368) ■) ■) (app (app (minus) (app (S) x_366 ■) ■) (app (S) x_366 ■) ■) ■) (el-∀ (el-∀ (minus_S_S) (x_366) ■) (x_366) ■) ■))) ■) (n) ■);
symbol eq_minus_S_pred : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (abs (λ __ : El (nat), abs (λ _0 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) __ ■) (app (S) _0 ■) ■) ■) (app (pred) (app (app (minus) __ ■) _0 ■) ■) ■))) ■) (in-∀ (λ _n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) O ■) (app (S) _n ■) ■) ■) (app (pred) (app (y) _n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) _n ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) O ■) _n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (minus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) _n ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) O ■) _n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (minus_body) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus_body) O ■) (app (S) _n ■) ■) ■) (app (pred) (app (y) _n ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_minus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus_body) O ■) (app (S) _n ■) ■) ■) (app (pred) (app (y) _n ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_minus_body_O) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) _n ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat) ■) (O) ■) (abs (λ p : El (nat), p)) ■) (abs (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) ■) ■) ■) ■) ■) ■)) ■) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) O ■) ■) ■) (app (pred) (app (y) O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) O ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) (app (S) n ■) ■) O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) O ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) (app (S) n ■) ■) O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus_body) (app (S) n ■) ■) (app (S) O ■) ■) ■) (app (pred) (app (y) O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus_body) (app (S) n ■) ■) (app (S) O ■) ■) ■) (app (pred) (app (y) O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) O ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) (O) ■) (abs (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) y ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) (abs (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) O ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (O) ■) (abs (λ q : El (nat), q)) ■) (n) ■) (abs (λ y : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) O ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) n ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (n) ■) ■) (app (app (minus) n ■) O ■) ■) (el-∀ (minus_n_O) (n) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■)) ■) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (S) n ■) ■) (app (S) (app (S) m ■) ■) ■) ■) (app (pred) (app (y) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) (app (S) m ■) ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) (app (S) m ■) ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus_body) (app (S) n ■) ■) (app (S) (app (S) m ■) ■) ■) ■) (app (pred) (app (y) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus_body) (app (S) n ■) ■) (app (S) (app (S) m ■) ■) ■) ■) (app (pred) (app (y) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (y) (app (S) (app (S) m ■) ■) ■) ■) (app (pred) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) (app (S) m ■) ■) (abs (λ y : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) y ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) n ■) ■) (abs (λ q : El (nat), app (app (minus) n ■) q ■)) ■) (m) ■) (abs (λ y : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (pred) (app (app (minus) n ■) m ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) y ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) (app (app (minus) n ■) m ■) ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) (app (app (minus) n ■) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) (app (app (minus) n ■) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) (app (app (minus) n ■) m ■) ■) ■) ■) (app (app (minus) n ■) (app (S) m ■) ■) ■) (auto) ■)) ■) ■) ■) ■) ■) ■) ■) ■))) ■;
symbol not_eq_S : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) (in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) m ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (m) ■) ■) (n) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (pred) (app (S) n ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) m ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (S) m ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) m ■) (app (pred) __ ■) ■)) ■) (el-∀ (pred_Sn) (m) ■) ■) (app (S) n ■) ■) (auto') ■) ■) (n) ■) (el-∀ (pred_Sn) (n) ■) ■) ■)) ■) (auto) ■)));
symbol not_eq_O_S : Prf (∀ (λ n : El (nat), app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) n ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (coq.connectives.nmk) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) n ■) ■) ■) (in-⇒ (λ eqOS : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) n ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (prop) ■) (coq.connectives.False) ■) (abs (λ p : El (nat), coq.connectives.True)) ■) (abs (λ y : El (prop), y)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat) ■) (app (S) n ■) ■) (abs (λ x : El (nat), app (not_zero) x ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (prop) ■) (coq.connectives.False) ■) (abs (λ p : El (nat), coq.connectives.True)) ■) (n) ■) (abs (λ y : El (prop), y)) ■) (coq.connectives.I) ■) ■) (O) ■) (eqOS) ■) ■)) ■);
symbol lt_to_not_zero : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (lt) n ■) m ■) ⇒ app (not_zero) m ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ Hlt : Prf (app (app (lt) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (app (S) n ■) ■) (abs (λ x_417 : El (nat), app (not_zero) x_417 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (prop) ■) (coq.connectives.False) ■) (abs (λ p : El (nat), coq.connectives.True)) ■) (n) ■) (abs (λ y : El (prop), y)) ■) (coq.connectives.I) ■) ■) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) (app (S) n ■) ■) m0 ■), in-⇒ (λ _x_421 : Prf (app (not_zero) m0 ■), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (prop) ■) (coq.connectives.False) ■) (abs (λ p : El (nat), coq.connectives.True)) ■) (m0) ■) (abs (λ y : El (prop), y)) ■) (coq.connectives.I) ■)))) ■) (m) ■) (Hlt) ■)));
symbol le_S_S : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (le) (app (S) n ■) ■) (app (S) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n) ■) (abs (λ x_417 : El (nat), app (app (le) (app (S) n ■) ■) (app (S) x_417 ■) ■)) ■) (el-∀ (le_n) (app (S) n ■) ■) ■) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) n ■) m0 ■), in-⇒ (λ _x_421 : Prf (app (app (le) (app (S) n ■) ■) (app (S) m0 ■) ■), el-⇒ (el-∀ (el-∀ (le_S) (app (S) n ■) ■) (app (S) m0 ■) ■) (_x_421) ■)))) ■) (m) ■) (lenm) ■)));
symbol le_O_n : Prf (∀ (λ n : El (nat), app (app (le) O ■) n ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (app (le) O ■) ■) (el-∀ (le_n) (O) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (app (app (le) O ■) x_366 ■), el-⇒ (el-∀ (el-∀ (le_S) (O) ■) (x_366) ■) (_x_368) ■))) ■) (n) ■);
symbol le_n_Sn : Prf (∀ (λ n : El (nat), app (app (le) n ■) (app (S) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (le_S) (n) ■) (n) ■) (el-∀ (le_n) (n) ■) ■);
symbol transitive_le : Prf (app (el-∀ₖ (coq.relations.transitive) (nat) ■) le ■) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ leab : Prf (app (app (le) a ■) b ■), in-⇒ (λ lebc : Prf (app (app (le) b ■) c ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (b) ■) (abs (λ x_417 : El (nat), app (app (le) a ■) x_417 ■)) ■) (leab) ■) (in-∀ (λ m : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) b ■) m ■), in-⇒ (λ _x_421 : Prf (app (app (le) a ■) m ■), el-⇒ (el-∀ (el-∀ (le_S) (a) ■) (m) ■) (_x_421) ■)))) ■) (c) ■) (lebc) ■)))));
symbol le_pred_n : Prf (∀ (λ n : El (nat), app (app (le) (app (pred) n ■) ■) n ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (app (le) (app (pred) _x_365 ■) ■) _x_365 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (nat) ■) (O) ■) (abs (λ p : El (nat), p)) ■) (abs (λ y : El (nat), app (app (le) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) O ■) ■) y ■)) ■) (el-∀ (le_n) (app (pred) O ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (app (app (le) (app (pred) x_366 ■) ■) x_366 ■), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat) ■) (O) ■) (abs (λ p : El (nat), p)) ■) (x_366) ■) (abs (λ y : El (nat), app (app (le) (app (pred) (app (S) x_366 ■) ■) ■) (app (S) y ■) ■)) ■) (el-∀ (le_n_Sn) (app (pred) (app (S) x_366 ■) ■) ■) ■))) ■) (n) ■);
symbol monotonic_pred : Prf (app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) le ■) pred ■) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n) ■) (abs (λ x_417 : El (nat), app (app (le) (app (pred) n ■) ■) (app (pred) x_417 ■) ■)) ■) (el-∀ (le_n) (app (pred) n ■) ■) ■) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) n ■) m0 ■), in-⇒ (λ _x_421 : Prf (app (app (le) (app (pred) n ■) ■) (app (pred) m0 ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (app (pred) n ■) ■) (n) ■) (app (pred) (app (S) m0 ■) ■) ■) (el-∀ (le_pred_n) (n) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (O) ■) (abs (λ p : El (nat), p)) ■) (m0) ■) (abs (λ y : El (nat), app (app (le) n ■) y ■)) ■) (_x_419) ■) ■)))) ■) (m) ■) (lenm) ■)));
symbol le_S_S_to_le : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (le) n ■) m ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat) ■) (O) ■) (abs (λ p : El (nat), p)) ■) (m) ■) (abs (λ y : El (nat), app (app (le) n ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat) ■) (O) ■) (abs (λ p : El (nat), p)) ■) (n) ■) (abs (λ y : El (nat), app (app (le) y ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) O ■) (abs (λ p : El (nat), p)) ■) (app (S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (monotonic_pred) (app (S) n ■) ■) (app (S) m ■) ■) (auto) ■) ■) ■)));
symbol monotonic_le_plus_r : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) le ■) (abs (λ m : El (nat), app (app (plus) n ■) m ■)) ■)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), (app (app (le) a ■) b ■) ⇒ app (app (le) (app (app (plus) _x_365 ■) a ■) ■) (app (app (plus) _x_365 ■) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) a ■) b ■) ⇒ app (app (le) (app (app (plus) O ■) a ■) ■) (app (y) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) a ■) b ■) ⇒ app (app (le) (app (y) a ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) a ■) b ■) ⇒ app (app (le) (app (y) a ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) a ■) b ■) ⇒ app (app (le) (app (app (plus_body) O ■) a ■) ■) (app (y) b ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) a ■) b ■) ⇒ app (app (le) (app (app (plus_body) O ■) a ■) ■) (app (y) b ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) a ■) b ■) ⇒ app (app (le) (app (y) a ■) ■) b ■)) ■) (in-⇒ (λ auto : Prf (app (app (le) a ■) b ■), auto)) ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf ((app (app (le) a ■) b ■) ⇒ app (app (le) (app (app (plus) m ■) a ■) ■) (app (app (plus) m ■) b ■) ■), in-⇒ (λ leab : Prf (app (app (le) a ■) b ■), el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) m ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (app (plus) (app (S) m ■) ■) a ■) ■) (app (y) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) m ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (y) a ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) m ■) ■) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (m) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (y) a ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) m ■) ■) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (m) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (app (plus_body) (app (S) m ■) ■) a ■) ■) (app (y) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (app (plus_body) (app (S) m ■) ■) a ■) ■) (app (y) b ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (y) a ■) ■) (app (S) (app (app (plus) m ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (le_S_S) (app (app (plus) m ■) a ■) ■) (app (app (plus) m ■) b ■) ■) (el-⇒ (H) (leab) ■) ■) ■) ■) ■) ■) ■) ■)))) ■) (n) ■)));
symbol monotonic_le_plus_l : Prf (∀ (λ m : El (nat), app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) le ■) (abs (λ n : El (nat), app (app (plus) n ■) m ■)) ■)) ≔ in-∀ (λ m : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (app (app (le) x ■) y ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (plus) m ■) x ■) ■) (app (app (plus) m ■) y ■) ■) ■) (app (app (le) (app (app (plus) x ■) m ■) ■) (app (app (plus) y ■) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (m) ■) (x) ■) (y) ■) (auto) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) x ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) m ■) x ■) ■) (app (app (plus) m ■) y ■) ■) ■) (app (app (le) __ ■) (app (app (plus) y ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) y ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) m ■) x ■) ■) (app (app (plus) m ■) y ■) ■) ■) (app (app (le) (app (app (plus) m ■) x ■) ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (plus) m ■) x ■) ■) (app (app (plus) m ■) y ■) ■) ■) ■) (app (app (plus) y ■) m ■) ■) (el-∀ (el-∀ (commutative_plus) (y) ■) (m) ■) ■) ■) (app (app (plus) x ■) m ■) ■) (el-∀ (el-∀ (commutative_plus) (x) ■) (m) ■) ■) ■))));
symbol le_plus : Prf (∀ (λ n1 : El (nat), ∀ (λ n2 : El (nat), ∀ (λ m1 : El (nat), ∀ (λ m2 : El (nat), (app (app (le) n1 ■) n2 ■) ⇒ (app (app (le) m1 ■) m2 ■) ⇒ app (app (le) (app (app (plus) n1 ■) m1 ■) ■) (app (app (plus) n2 ■) m2 ■) ■))))) ≔ in-∀ (λ n1 : El (nat),  in-∀ (λ n2 : El (nat),  in-∀ (λ m1 : El (nat),  in-∀ (λ m2 : El (nat),  in-⇒ (λ len : Prf (app (app (le) n1 ■) n2 ■), in-⇒ (λ lem : Prf (app (app (le) m1 ■) m2 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (app (app (plus) n1 ■) m1 ■) ■) (app (app (plus) n1 ■) m2 ■) ■) (app (app (plus) n2 ■) m2 ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (n1) ■) (m1) ■) (m2) ■) (lem) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_l) (m2) ■) (n1) ■) (n2) ■) (len) ■) ■))))));
symbol le_plus_n : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (le) m ■) (app (app (plus) n ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (plus) O ■) m ■) ■) (app (app (plus) n ■) m ■) ■) ■) (app (app (le) m ■) (app (app (plus) n ■) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_l) (m) ■) (O) ■) (n) ■) (el-∀ (le_O_n) (n) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (app (plus) n ■) m ■) ■) ■) (app (app (le) m ■) (app (app (plus) n ■) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) m ■) (app (app (plus) n ■) m ■) ■) ■) ■) (app (app (plus) O ■) m ■) ■) (el-∀ (plus_O_n) (m) ■) ■) ■));
symbol le_plus_b : Prf (∀ (λ b : El (nat), ∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) (app (app (plus) n ■) b ■) ■) m ■) ⇒ app (app (le) n ■) m ■)))) ≔ in-∀ (λ b : El (nat),  in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (app (le) (app (app (plus) n ■) b ■) ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n) ■) (app (app (plus) n ■) b ■) ■) (m) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) n ■) (app (app (plus) b ■) n ■) ■) ■) (app (app (le) n ■) (app (app (plus) n ■) b ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (b) ■) (n) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) b ■) n ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) n ■) (app (app (plus) b ■) n ■) ■) ■) (app (app (le) n ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) n ■) (app (app (plus) b ■) n ■) ■) ■) ■) (app (app (plus) n ■) b ■) ■) (el-∀ (el-∀ (commutative_plus) (n) ■) (b) ■) ■) ■) ■) (auto) ■))));
symbol le_plus_n_r : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (le) m ■) (app (app (plus) m ■) n ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) m ■) (app (app (plus) n ■) m ■) ■) ■) (app (app (le) m ■) (app (app (plus) m ■) n ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (n) ■) (m) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) m ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) m ■) (app (app (plus) n ■) m ■) ■) ■) (app (app (le) m ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) m ■) (app (app (plus) n ■) m ■) ■) ■) ■) (app (app (plus) m ■) n ■) ■) (el-∀ (el-∀ (commutative_plus) (m) ■) (n) ■) ■) ■));
symbol le_plus_to_le : Prf (∀ (λ a : El (nat), ∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) (app (app (plus) a ■) n ■) ■) (app (app (plus) a ■) m ■) ■) ⇒ app (app (le) n ■) m ■)))) ≔ in-∀ (λ a : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) (app (app (plus) _x_365 ■) n ■) ■) (app (app (plus) _x_365 ■) m ■) ■) ⇒ app (app (le) n ■) m ■)))) ■) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (app (plus) O ■) n ■) ■) (app (y) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (y) n ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (y) n ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) O ■) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (app (plus_body) O ■) n ■) ■) (app (y) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (app (plus_body) O ■) n ■) ■) (app (y) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (sym_eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (y) n ■) ■) m ■) ⇒ app (app (le) n ■) m ■)) ■) (in-⇒ (λ auto : Prf (app (app (le) n ■) m ■), auto)) ■) ■) ■) ■) ■) ■))) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) (app (app (plus) x_366 ■) n ■) ■) (app (app (plus) x_366 ■) m ■) ■) ⇒ app (app (le) n ■) m ■))), in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (app (plus) (app (S) x_366 ■) ■) n ■) ■) (app (y) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (y) n ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) x_366 ■) ■) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (y) n ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) plus_body ■) (app (S) x_366 ■) ■) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (app (plus_body) (app (S) x_366 ■) ■) n ■) ■) (app (y) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (app (plus_body) (app (S) x_366 ■) ■) n ■) ■) (app (y) m ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (y) n ■) ■) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■) ⇒ app (app (le) n ■) m ■)) ■) (in-⇒ (λ auto : Prf (app (app (le) (app (S) (app (app (plus) x_366 ■) n ■) ■) ■) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (pred) (app (S) n ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (monotonic_pred) (app (S) n ■) ■) (app (S) m ■) ■) (el-⇒ (el-∀ (el-∀ (_x_368) (app (S) n ■) ■) (app (S) m ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) (app (app (plus) x_366 ■) n ■) ■) ■) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■) ■) (app (app (le) (app (app (plus) x_366 ■) (app (S) n ■) ■) ■) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■) (auto) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) n ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■) ■) (app (app (le) (app (app (plus) x_366 ■) (app (S) n ■) ■) ■) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) x_366 ■) (app (S) n ■) ■) ■) __ ■) ■) (app (app (le) (app (app (plus) x_366 ■) (app (S) n ■) ■) ■) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (plus) x_366 ■) (app (S) n ■) ■) ■) (app (app (plus) x_366 ■) (app (S) m ■) ■) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) m ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (m) ■) ■) ■) (app (S) (app (app (plus) x_366 ■) n ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (x_366) ■) (n) ■) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) n ■) __ ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) n ■) m ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) (el-∀ (pred_Sn) (m) ■) ■) ■) (app (pred) (app (S) n ■) ■) ■) (el-∀ (pred_Sn) (n) ■) ■) ■)) ■) ■) ■) ■) ■) ■))))) ■) (a) ■);
symbol le_plus_to_le_r : Prf (∀ (λ a : El (nat), ∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) (app (app (plus) n ■) a ■) ■) (app (app (plus) m ■) a ■) ■) ⇒ app (app (le) n ■) m ■)))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (app (le) (app (app (plus) n ■) a ■) ■) (app (app (plus) m ■) a ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_le) (a) ■) (n) ■) (m) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (plus) n ■) a ■) ■) (app (app (plus) m ■) a ■) ■) ■) (app (app (le) (app (app (plus) a ■) n ■) ■) (app (app (plus) a ■) m ■) ■) ■) (auto) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) n ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (app (plus) m ■) a ■) ■) ■) (app (app (le) (app (app (plus) a ■) n ■) ■) (app (app (plus) a ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) m ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) a ■) n ■) ■) __ ■) ■) (app (app (le) (app (app (plus) a ■) n ■) ■) (app (app (plus) a ■) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (plus) a ■) n ■) ■) (app (app (plus) a ■) m ■) ■) ■) ■) (app (app (plus) m ■) a ■) ■) (el-∀ (el-∀ (commutative_plus) (m) ■) (a) ■) ■) ■) (app (app (plus) n ■) a ■) ■) (el-∀ (el-∀ (commutative_plus) (n) ■) (a) ■) ■) ■) ■))));
symbol monotonic_le_times_r : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) le ■) (abs (λ m : El (nat), app (app (times) n ■) m ■)) ■)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ lexy : Prf (app (app (le) x ■) y ■), el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (app (le) (app (app (times) _x_365 ■) x ■) ■) (app (app (times) _x_365 ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (app (times) O ■) x ■) ■) (app (z) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (z) x ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (z) x ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) O ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (times_body) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (app (times_body) O ■) x ■) ■) (app (z) y ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (app (times_body) O ■) x ■) ■) (app (z) y ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_times_body_O) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (z) x ■) ■) O ■)) ■) (el-∀ (le_O_n) (O) ■) ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ a : El (nat),  in-⇒ (λ lea : Prf (app (app (le) (app (app (times) a ■) x ■) ■) (app (app (times) a ■) y ■) ■), el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) a ■) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (app (times) (app (S) a ■) ■) x ■) ■) (app (z) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (app (S) a ■) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (z) x ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) a ■) ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (a) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (z) x ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) times_body ■) (app (S) a ■) ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (times_body) ■) (a) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (app (times_body) (app (S) a ■) ■) x ■) ■) (app (z) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (a) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (app (times_body) (app (S) a ■) ■) x ■) ■) (app (z) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (a) ■) (abs (λ z : El ((nat ⇝ nat)), app (app (le) (app (z) x ■) ■) (app (app (plus) y ■) (app (app (times) a ■) y ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (le_plus) (x) ■) (y) ■) (app (app (times) a ■) x ■) ■) (app (app (times) a ■) y ■) ■) (lexy) ■) (lea) ■) ■) ■) ■) ■) ■) ■))) ■) (n) ■))));
symbol le_times : Prf (∀ (λ n1 : El (nat), ∀ (λ n2 : El (nat), ∀ (λ m1 : El (nat), ∀ (λ m2 : El (nat), (app (app (le) n1 ■) n2 ■) ⇒ (app (app (le) m1 ■) m2 ■) ⇒ app (app (le) (app (app (times) n1 ■) m1 ■) ■) (app (app (times) n2 ■) m2 ■) ■))))) ≔ in-∀ (λ n1 : El (nat),  in-∀ (λ n2 : El (nat),  in-∀ (λ m1 : El (nat),  in-∀ (λ m2 : El (nat),  in-⇒ (λ len : Prf (app (app (le) n1 ■) n2 ■), in-⇒ (λ lem : Prf (app (app (le) m1 ■) m2 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (app (app (times) n1 ■) m1 ■) ■) (app (app (times) n1 ■) m2 ■) ■) (app (app (times) n2 ■) m2 ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (n1) ■) (m1) ■) (m2) ■) (lem) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (times) m2 ■) n1 ■) ■) (app (app (times) m2 ■) n2 ■) ■) ■) (app (app (le) (app (app (times) n1 ■) m2 ■) ■) (app (app (times) n2 ■) m2 ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (m2) ■) (n1) ■) (n2) ■) (len) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) n1 ■) m2 ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (app (times) m2 ■) n2 ■) ■) ■) (app (app (le) (app (app (times) n1 ■) m2 ■) ■) (app (app (times) n2 ■) m2 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) n2 ■) m2 ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (times) n1 ■) m2 ■) ■) __ ■) ■) (app (app (le) (app (app (times) n1 ■) m2 ■) ■) (app (app (times) n2 ■) m2 ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (times) n1 ■) m2 ■) ■) (app (app (times) n2 ■) m2 ■) ■) ■) ■) (app (app (times) m2 ■) n2 ■) ■) (el-∀ (el-∀ (commutative_times) (m2) ■) (n2) ■) ■) ■) (app (app (times) m2 ■) n1 ■) ■) (el-∀ (el-∀ (commutative_times) (m2) ■) (n1) ■) ■) ■) ■))))));
symbol le_plus_minus_m_m : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (le) n ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), ∀ (λ m : El (nat), app (app (le) _x_365 ■) (app (app (plus) (app (app (minus) _x_365 ■) m ■) ■) m ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (le) O ■) (app (app (plus) (app (y) m ■) ■) m ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat) ■) (minus_body) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (le) O ■) (app (app (plus) (app (y) m ■) ■) m ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_minus_body_O) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ m : El (nat), app (app (le) O ■) (app (app (plus) (app (y) m ■) ■) m ■) ■))) ■) (in-∀ (λ m : El (nat),  el-∀ (el-∀ (le_plus_n_r) (m) ■) (O) ■)) ■) ■) ■) ■) (in-∀ (λ a : El (nat),  in-⇒ (λ Hind : Prf (∀ (λ m : El (nat), app (app (le) a ■) (app (app (plus) (app (app (minus) a ■) m ■) ■) m ■) ■)), in-∀ (λ m : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), app (app (le) (app (S) a ■) ■) (app (app (plus) (app (app (minus) (app (S) a ■) ■) __ ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) a ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (S) a ■) ■) (app (app (plus) (app (y) O ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (a) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (S) a ■) ■) (app (app (plus) (app (y) O ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (a) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (S) a ■) ■) (app (app (plus) (app (y) O ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat) ■) (app (S) a ■) ■) (abs (λ q : El (nat), app (app (minus) a ■) q ■)) ■) (abs (λ y : El (nat), app (app (le) (app (S) a ■) ■) (app (app (plus) y ■) O ■) ■)) ■) (el-∀ (el-∀ (le_plus_n_r) (O) ■) (app (S) a ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ n0 : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) a ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (S) a ■) ■) (app (app (plus) (app (y) (app (S) n0 ■) ■) ■) (app (S) n0 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (a) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (S) a ■) ■) (app (app (plus) (app (y) (app (S) n0 ■) ■) ■) (app (S) n0 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (a) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (S) a ■) ■) (app (app (plus) (app (y) (app (S) n0 ■) ■) ■) (app (S) n0 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) a ■) ■) (abs (λ q : El (nat), app (app (minus) a ■) q ■)) ■) (n0) ■) (abs (λ y : El (nat), app (app (le) (app (S) a ■) ■) (app (app (plus) y ■) (app (S) n0 ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) a ■) ■) (app (S) (app (app (plus) (app (app (minus) a ■) n0 ■) ■) n0 ■) ■) ■) ■) (app (app (le) (app (S) a ■) ■) (app (app (plus) (app (app (minus) a ■) n0 ■) ■) (app (S) n0 ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (le_S_S) (a) ■) (app (app (plus) (app (app (minus) a ■) n0 ■) ■) n0 ■) ■) (el-∀ (Hind) (n0) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) (app (app (minus) a ■) n0 ■) ■) (app (S) n0 ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) a ■) ■) __ ■) ■) (app (app (le) (app (S) a ■) ■) (app (app (plus) (app (app (minus) a ■) n0 ■) ■) (app (S) n0 ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) a ■) ■) (app (app (plus) (app (app (minus) a ■) n0 ■) ■) (app (S) n0 ■) ■) ■) ■) ■) (app (S) (app (app (plus) (app (app (minus) a ■) n0 ■) ■) n0 ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (app (app (minus) a ■) n0 ■) ■) (n0) ■) ■) ■) ■) ■) ■) ■)) ■) (m) ■)))) ■) (n) ■);
symbol le_plus_to_minus_r : Prf (∀ (λ a : El (nat), ∀ (λ b : El (nat), ∀ (λ c : El (nat), (app (app (le) (app (app (plus) a ■) b ■) ■) c ■) ⇒ app (app (le) a ■) (app (app (minus) c ■) b ■) ■)))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ H : Prf (app (app (le) (app (app (plus) a ■) b ■) ■) c ■), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_le_r) (b) ■) (a) ■) (app (app (minus) c ■) b ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (app (app (plus) a ■) b ■) ■) (c) ■) (app (app (plus) (app (app (minus) c ■) b ■) ■) b ■) ■) (H) ■) (el-∀ (el-∀ (le_plus_minus_m_m) (c) ■) (b) ■) ■) ■))));
symbol lt_to_le : Prf (∀ (λ x : El (nat), ∀ (λ y : El (nat), (app (app (lt) x ■) y ■) ⇒ app (app (le) x ■) y ■))) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (app (app (lt) x ■) y ■), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_b) (app (S) O ■) ■) (x) ■) (y) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) x ■) ■) y ■) ■) (app (app (le) (app (app (plus) x ■) (app (S) O ■) ■) ■) y ■) ■) (auto) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x ■) (app (S) O ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) y ■) ■) (app (app (le) (app (app (plus) x ■) (app (S) O ■) ■) ■) y ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (plus) x ■) (app (S) O ■) ■) ■) y ■) ■) ■) (app (S) x ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x ■) O ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) __ ■) ■) (app (app (plus) x ■) (app (S) O ■) ■) ■)) ■) (el-∀ (el-∀ (plus_n_Sm) (x) ■) (O) ■) ■) (x) ■) (el-∀ (plus_n_O) (x) ■) ■) ■) ■) ■)));
symbol transitive_lt : Prf (app (el-∀ₖ (coq.relations.transitive) (nat) ■) lt ■) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ ltab : Prf (app (app (lt) a ■) b ■), in-⇒ (λ ltbc : Prf (app (app (lt) b ■) c ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (app (S) b ■) ■) (abs (λ x_417 : El (nat), app (app (lt) a ■) x_417 ■)) ■) (el-⇒ (el-∀ (el-∀ (le_S) (app (S) a ■) ■) (b) ■) (ltab) ■) ■) (in-∀ (λ m : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) (app (S) b ■) ■) m ■), in-⇒ (λ _x_421 : Prf (app (app (lt) a ■) m ■), el-⇒ (el-∀ (el-∀ (le_S) (app (S) a ■) ■) (m) ■) (_x_421) ■)))) ■) (c) ■) (ltbc) ■)))));
symbol lt_to_le_to_lt : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), (app (app (lt) n ■) m ■) ⇒ (app (app (le) m ■) p ■) ⇒ app (app (lt) n ■) p ■)))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ H : Prf (app (app (lt) n ■) m ■), in-⇒ (λ H1 : Prf (app (app (le) m ■) p ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (m) ■) (abs (λ x_417 : El (nat), app (app (lt) n ■) x_417 ■)) ■) (H) ■) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) m ■) m0 ■), in-⇒ (λ _x_421 : Prf (app (app (lt) n ■) m0 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_lt) (n) ■) (m0) ■) (app (S) m0 ■) ■) (_x_421) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) m0 ■) ■) (app (app (plus) O ■) (app (S) m0 ■) ■) ■) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (O) ■) (app (S) m0 ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) m0 ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) m0 ■) ■) __ ■) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■) ■) (app (app (plus) O ■) (app (S) m0 ■) ■) ■) (el-∀ (plus_O_n) (app (S) m0 ■) ■) ■) ■) ■)))) ■) (p) ■) (H1) ■)))));
symbol le_to_lt_to_lt : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), (app (app (le) n ■) m ■) ⇒ (app (app (lt) m ■) p ■) ⇒ app (app (lt) n ■) p ■)))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ H : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n) ■) (abs (λ x_417 : El (nat), (app (app (lt) x_417 ■) p ■) ⇒ app (app (lt) n ■) p ■)) ■) (in-⇒ (λ auto : Prf (app (app (lt) n ■) p ■), auto)) ■) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) n ■) m0 ■), in-⇒ (λ _x_421 : Prf ((app (app (lt) m0 ■) p ■) ⇒ app (app (lt) n ■) p ■), in-⇒ (λ auto : Prf (app (app (lt) (app (S) m0 ■) ■) p ■), el-⇒ (_x_421) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_lt) (m0) ■) (app (S) m0 ■) ■) (p) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) m0 ■) ■) (app (app (plus) O ■) (app (S) m0 ■) ■) ■) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (O) ■) (app (S) m0 ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) m0 ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) m0 ■) ■) __ ■) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■) ■) (app (app (plus) O ■) (app (S) m0 ■) ■) ■) (el-∀ (plus_O_n) (app (S) m0 ■) ■) ■) ■) ■) (auto) ■) ■))))) ■) (m) ■) (H) ■))));
symbol lt_S_to_lt : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (lt) (app (S) n ■) ■) m ■) ⇒ app (app (lt) n ■) m ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (app (lt) (app (S) n ■) ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_lt) (n) ■) (app (S) n ■) ■) (m) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) n ■) ■) (app (app (plus) O ■) (app (S) n ■) ■) ■) ■) (app (app (le) (app (S) n ■) ■) (app (S) n ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (O) ■) (app (S) n ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) n ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) n ■) ■) __ ■) ■) (app (app (le) (app (S) n ■) ■) (app (S) n ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) n ■) ■) (app (S) n ■) ■) ■) ■) (app (app (plus) O ■) (app (S) n ■) ■) ■) (el-∀ (plus_O_n) (app (S) n ■) ■) ■) ■) ■) (auto) ■)));
symbol ltn_to_ltO : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (lt) n ■) m ■) ⇒ app (app (lt) O ■) m ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (app (lt) n ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (lt_to_le_to_lt) (O) ■) (app (S) n ■) ■) (m) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) O ■) ■) (app (app (plus) n ■) (app (S) O ■) ■) ■) ■) (app (app (le) (app (S) O ■) ■) (app (S) n ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (n) ■) (app (S) O ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) n ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) O ■) ■) __ ■) ■) (app (app (le) (app (S) O ■) ■) (app (S) n ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) O ■) ■) (app (S) n ■) ■) ■) ■) (app (app (plus) n ■) (app (S) O ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) O ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) __ ■) ■) (app (app (plus) n ■) (app (S) O ■) ■) ■)) ■) (el-∀ (el-∀ (plus_n_Sm) (n) ■) (O) ■) ■) (n) ■) (el-∀ (plus_n_O) (n) ■) ■) ■) ■) ■) (auto) ■)));
symbol lt_O_S : Prf (∀ (λ n : El (nat), app (app (lt) O ■) (app (S) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (ltn_to_ltO) (n) ■) (app (S) n ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) n ■) ■) (app (app (plus) O ■) (app (S) n ■) ■) ■) ■) (app (app (le) (app (S) n ■) ■) (app (S) n ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (O) ■) (app (S) n ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) n ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) n ■) ■) __ ■) ■) (app (app (le) (app (S) n ■) ■) (app (S) n ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) n ■) ■) (app (S) n ■) ■) ■) ■) (app (app (plus) O ■) (app (S) n ■) ■) ■) (el-∀ (plus_O_n) (app (S) n ■) ■) ■) ■) ■);
symbol monotonic_lt_plus_r : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) lt ■) (abs (λ m : El (nat), app (app (plus) n ■) m ■)) ■)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (app (app (lt) x ■) y ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) (app (app (le) (app (S) (app (app (plus) n ■) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (n) ■) (app (S) x ■) ■) (y) ■) (auto) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) (app (S) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) (app (app (le) __ ■) (app (app (plus) n ■) y ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) ■) (app (S) (app (app (plus) n ■) x ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (n) ■) (x) ■) ■) ■))));
symbol monotonic_lt_plus_l : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) lt ■) (abs (λ m : El (nat), app (app (plus) m ■) n ■)) ■)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (app (app (lt) x ■) y ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) (app (app (le) (app (S) (app (app (plus) x ■) n ■) ■) ■) (app (app (plus) y ■) n ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (n) ■) (app (S) x ■) ■) (y) ■) (auto) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) x ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) (app (app (le) (app (S) __ ■) ■) (app (app (plus) y ■) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) (app (S) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) (app (app (le) __ ■) (app (app (plus) y ■) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) y ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (plus) n ■) (app (S) x ■) ■) ■) (app (app (plus) n ■) y ■) ■) ■) ■) (app (app (plus) y ■) n ■) ■) (el-∀ (el-∀ (commutative_plus) (y) ■) (n) ■) ■) ■) (app (S) (app (app (plus) n ■) x ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (n) ■) (x) ■) ■) ■) (app (app (plus) x ■) n ■) ■) (el-∀ (el-∀ (commutative_plus) (x) ■) (n) ■) ■) ■))));
symbol monotonic_lt_times_r : Prf (∀ (λ c : El (nat), (app (app (lt) O ■) c ■) ⇒ app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) lt ■) (abs (λ t : El (nat), app (app (times) c ■) t ■)) ■)) ≔ in-∀ (λ c : El (nat),  in-⇒ (λ posc : Prf (app (app (lt) O ■) c ■), in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ ltnm : Prf (app (app (lt) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (app (S) n ■) ■) (abs (λ x_417 : El (nat), app (app (lt) (app (app (times) c ■) n ■) ■) (app (app (times) c ■) x_417 ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) (app (app (plus) O ■) (app (app (times) c ■) n ■) ■) ■) ■) (app (app (plus) c ■) (app (app (times) c ■) n ■) ■) ■) ■) (app (app (le) (app (S) (app (app (times) c ■) n ■) ■) ■) (app (app (times) c ■) (app (S) n ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_lt_plus_l) (app (app (times) c ■) n ■) ■) (O) ■) (c) ■) (posc) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) O ■) (app (S) (app (app (times) c ■) n ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (app (plus) c ■) (app (app (times) c ■) n ■) ■) ■) ■) (app (app (le) (app (S) (app (app (times) c ■) n ■) ■) ■) (app (app (times) c ■) (app (S) n ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) c ■) (app (app (times) c ■) n ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (plus) O ■) (app (S) (app (app (times) c ■) n ■) ■) ■) ■) (app (app (plus) c ■) (app (app (times) c ■) n ■) ■) ■) ■) (app (app (le) (app (S) (app (app (times) c ■) n ■) ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) (app (app (times) c ■) n ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (app (plus) c ■) (app (app (times) c ■) n ■) ■) ■) ■) (app (app (le) (app (S) (app (app (times) c ■) n ■) ■) ■) (app (app (plus) c ■) (app (app (times) c ■) n ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) (app (app (times) c ■) n ■) ■) ■) (app (app (plus) c ■) (app (app (times) c ■) n ■) ■) ■) ■) ■) (app (app (plus) O ■) (app (S) (app (app (times) c ■) n ■) ■) ■) ■) (el-∀ (plus_O_n) (app (S) (app (app (times) c ■) n ■) ■) ■) ■) ■) (app (app (times) c ■) (app (S) n ■) ■) ■) (el-∀ (el-∀ (times_n_Sm) (c) ■) (n) ■) ■) ■) (app (S) (app (app (plus) O ■) (app (app (times) c ■) n ■) ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (O) ■) (app (app (times) c ■) n ■) ■) ■) ■) ■) (in-∀ (λ a : El (nat),  in-⇒ (λ __ : Prf (app (app (le) (app (S) n ■) ■) a ■), in-⇒ (λ lt1 : Prf (app (app (le) (app (S) (app (app (times) c ■) n ■) ■) ■) (app (app (times) c ■) a ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (app (S) (app (app (times) c ■) n ■) ■) ■) (app (app (times) c ■) a ■) ■) (app (app (times) c ■) (app (S) a ■) ■) ■) (lt1) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (times) c ■) a ■) ■) (app (app (plus) (app (app (times) c ■) a ■) ■) c ■) ■) ■) (app (app (le) (app (app (times) c ■) a ■) ■) (app (app (times) c ■) (app (S) a ■) ■) ■) ■) (el-∀ (el-∀ (le_plus_n_r) (c) ■) (app (app (times) c ■) a ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) c ■) (app (app (times) c ■) a ■) ■) ■) (abs (λ __1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (times) c ■) a ■) ■) (app (app (plus) (app (app (times) c ■) a ■) ■) c ■) ■) ■) (app (app (le) (app (app (times) c ■) a ■) ■) __1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) c ■) (app (app (times) c ■) a ■) ■) ■) (abs (λ __1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (times) c ■) a ■) ■) __1 ■) ■) (app (app (le) (app (app (times) c ■) a ■) ■) (app (app (plus) c ■) (app (app (times) c ■) a ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (times) c ■) a ■) ■) (app (app (plus) c ■) (app (app (times) c ■) a ■) ■) ■) ■) ■) (app (app (plus) (app (app (times) c ■) a ■) ■) c ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (times) c ■) a ■) ■) (c) ■) ■) ■) (app (app (times) c ■) (app (S) a ■) ■) ■) (el-∀ (el-∀ (times_n_Sm) (c) ■) (a) ■) ■) ■) ■)))) ■) (m) ■) (ltnm) ■)))));
symbol monotonic_lt_times_l : Prf (∀ (λ c : El (nat), (app (app (lt) O ■) c ■) ⇒ app (app (el-∀ₖ (coq.relations.monotonic) (nat) ■) lt ■) (abs (λ t : El (nat), app (app (times) t ■) c ■)) ■)) ≔ in-∀ (λ c : El (nat),  in-⇒ (λ auto : Prf (app (app (lt) O ■) c ■), in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto' : Prf (app (app (lt) x ■) y ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) (app (app (times) c ■) x ■) ■) ■) (app (app (times) c ■) y ■) ■) ■) (app (app (le) (app (S) (app (app (times) x ■) c ■) ■) ■) (app (app (times) y ■) c ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (monotonic_lt_times_r) (c) ■) (auto) ■) (x) ■) (y) ■) (auto') ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) c ■) x ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) (app (app (times) c ■) x ■) ■) ■) (app (app (times) c ■) y ■) ■) ■) (app (app (le) (app (S) __ ■) ■) (app (app (times) y ■) c ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (times) c ■) y ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) (app (app (times) c ■) x ■) ■) ■) (app (app (times) c ■) y ■) ■) ■) (app (app (le) (app (S) (app (app (times) c ■) x ■) ■) ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) (app (app (times) c ■) x ■) ■) ■) (app (app (times) c ■) y ■) ■) ■) ■) (app (app (times) y ■) c ■) ■) (el-∀ (el-∀ (commutative_times) (y) ■) (c) ■) ■) ■) (app (app (times) x ■) c ■) ■) (el-∀ (el-∀ (commutative_times) (x) ■) (c) ■) ■) ■)))));
symbol lt_to_le_to_lt_times : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), ∀ (λ q : El (nat), (app (app (lt) n ■) m ■) ⇒ (app (app (le) p ■) q ■) ⇒ (app (app (lt) O ■) q ■) ⇒ app (app (lt) (app (app (times) n ■) p ■) ■) (app (app (times) m ■) q ■) ■))))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ ltnm : Prf (app (app (lt) n ■) m ■), in-⇒ (λ lepq : Prf (app (app (le) p ■) q ■), in-⇒ (λ posq : Prf (app (app (lt) O ■) q ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (le_to_lt_to_lt) (app (app (times) n ■) p ■) ■) (app (app (times) n ■) q ■) ■) (app (app (times) m ■) q ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (n) ■) (p) ■) (q) ■) (lepq) ■) ■) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (monotonic_lt_times_l) (q) ■) (posq) ■) (n) ■) (m) ■) (ltnm) ■) ■)))))));
symbol lt_times : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), ∀ (λ q : El (nat), (app (app (lt) n ■) m ■) ⇒ (app (app (lt) p ■) q ■) ⇒ app (app (lt) (app (app (times) n ■) p ■) ■) (app (app (times) m ■) q ■) ■))))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ ltnm : Prf (app (app (lt) n ■) m ■), in-⇒ (λ ltpq : Prf (app (app (lt) p ■) q ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (lt_to_le_to_lt_times) (n) ■) (m) ■) (p) ■) (q) ■) (ltnm) ■) (el-⇒ (el-∀ (el-∀ (lt_to_le) (p) ■) (q) ■) (ltpq) ■) ■) (el-⇒ (el-∀ (el-∀ (ltn_to_ltO) (p) ■) (q) ■) (ltpq) ■) ■))))));
symbol lt_plus_to_minus_r : Prf (∀ (λ a : El (nat), ∀ (λ b : El (nat), ∀ (λ c : El (nat), (app (app (lt) (app (app (plus) a ■) b ■) ■) c ■) ⇒ app (app (lt) a ■) (app (app (minus) c ■) b ■) ■)))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ H : Prf (app (app (lt) (app (app (plus) a ■) b ■) ■) c ■), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_minus_r) (app (S) a ■) ■) (b) ■) (c) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) a ■) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (y) b ■) ■) c ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (a) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (y) b ■) ■) c ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (a) ■) (abs (λ y : El ((nat ⇝ nat)), app (app (le) (app (y) b ■) ■) c ■)) ■) (H) ■) ■) ■) ■))));
symbol lt_plus_Sn_r : Prf (∀ (λ a : El (nat), ∀ (λ x : El (nat), ∀ (λ n : El (nat), app (app (lt) a ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) (app (S) n ■) ■) ■)))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ n : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) a ■) ■) (app (S) (app (app (plus) (app (app (plus) a ■) x ■) ■) n ■) ■) ■) ■) (app (app (le) (app (S) a ■) ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) (app (S) n ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (le_S_S) (a) ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) n ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) a ■) (app (app (plus) a ■) (app (app (plus) x ■) n ■) ■) ■) ■) (app (app (le) a ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) n ■) ■) ■) (el-∀ (el-∀ (le_plus_n_r) (app (app (plus) x ■) n ■) ■) (a) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) (app (app (plus) a ■) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) a ■) (app (app (plus) a ■) (app (app (plus) x ■) n ■) ■) ■) ■) (app (app (le) a ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) (app (app (plus) n ■) x ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) a ■) (app (app (plus) a ■) (app (app (plus) x ■) n ■) ■) ■) ■) (app (app (le) a ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) x ■) n ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) a ■) (app (app (plus) a ■) (app (app (plus) x ■) n ■) ■) ■) ■) (app (app (le) a ■) (app (app (plus) a ■) __ ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) a ■) (app (app (plus) a ■) (app (app (plus) x ■) n ■) ■) ■) ■) ■) (app (app (plus) n ■) x ■) ■) (el-∀ (el-∀ (commutative_plus) (n) ■) (x) ■) ■) ■) (app (app (plus) n ■) (app (app (plus) a ■) x ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) (app (app (plus) a ■) n ■) ■) x ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) n ■) (app (app (plus) a ■) x ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ (el-∀ (assoc_plus1) (x) ■) (a) ■) (n) ■) ■) (app (app (plus) a ■) (app (app (plus) n ■) x ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (a) ■) (n) ■) (x) ■) ■) ■) ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) n ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (plus) a ■) x ■) ■) (n) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) (app (app (plus) x ■) (app (S) n ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) a ■) ■) (app (S) (app (app (plus) (app (app (plus) a ■) x ■) ■) n ■) ■) ■) ■) (app (app (le) (app (S) a ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) (app (S) n ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) a ■) ■) __ ■) ■) (app (app (le) (app (S) a ■) ■) (app (app (plus) a ■) (app (app (plus) x ■) (app (S) n ■) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) a ■) (app (app (plus) x ■) (app (S) n ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) a ■) ■) __ ■) ■) (app (app (le) (app (S) a ■) ■) (app (app (plus) a ■) (app (app (plus) x ■) (app (S) n ■) ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) a ■) ■) (app (app (plus) a ■) (app (app (plus) x ■) (app (S) n ■) ■) ■) ■) ■) ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) (app (S) n ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (a) ■) (x) ■) (app (S) n ■) ■) ■) ■) (app (S) (app (app (plus) (app (app (plus) a ■) x ■) ■) n ■) ■) ■) (el-∀ (el-∀ (plus_n_Sm) (app (app (plus) a ■) x ■) ■) (n) ■) ■) ■) (app (app (plus) (app (app (plus) a ■) x ■) ■) (app (S) n ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (a) ■) (x) ■) (app (S) n ■) ■) ■) ■)));
symbol not_le_Sn_O : Prf (∀ (λ n : El (nat), app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) O ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (coq.connectives.nmk) (app (app (le) (app (S) n ■) ■) O ■) ■) (in-⇒ (λ Hlen0 : Prf (app (app (le) (app (S) n ■) ■) O ■), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (prop) ■) (coq.connectives.False) ■) (abs (λ p : El (nat), coq.connectives.True)) ■) (abs (λ y : El (prop), y)) ■) (el-⇒ (el-∀ (el-∀ (lt_to_not_zero) (n) ■) (O) ■) (Hlen0) ■) ■)) ■);
symbol not_le_to_not_le_S_S : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (app (le) n ■) m ■) ■) (in-⇒ (λ auto' : Prf (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (pred) (app (S) n ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (monotonic_pred) (app (S) n ■) ■) (app (S) m ■) ■) (auto') ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) n ■) __ ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) n ■) m ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) (el-∀ (pred_Sn) (m) ■) ■) ■) (app (pred) (app (S) n ■) ■) ■) (el-∀ (pred_Sn) (n) ■) ■) ■)) ■) (auto) ■)));
symbol not_le_S_S_to_not_le : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (coq.connectives.Not) (app (app (le) n ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (le) n ■) m ■) ■) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) (in-⇒ (λ auto' : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-∀ (le_S_S) (n) ■) (m) ■) (auto') ■)) ■) (auto) ■)));
symbol not_le_Sn_n : Prf (∀ (λ n : El (nat), app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (coq.connectives.Not) (app (app (le) (app (S) _x_365 ■) ■) _x_365 ■) ■)) ■) (el-∀ (not_le_Sn_O) (O) ■) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (app (coq.connectives.Not) (app (app (le) (app (S) x_366 ■) ■) x_366 ■) ■), el-⇒ (el-∀ (el-∀ (not_le_to_not_le_S_S) (app (S) x_366 ■) ■) (x_366) ■) (_x_368) ■))) ■) (n) ■);
symbol lt_to_not_le : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (lt) n ■) m ■) ⇒ app (coq.connectives.Not) (app (app (le) m ■) n ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ Hltnm : Prf (app (app (lt) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (app (S) n ■) ■) (abs (λ x_417 : El (nat), app (coq.connectives.Not) (app (app (le) x_417 ■) n ■) ■)) ■) (el-∀ (not_le_Sn_n) (n) ■) ■) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) (app (S) n ■) ■) m0 ■), in-⇒ (λ _x_421 : Prf (app (coq.connectives.Not) (app (app (le) m0 ■) n ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (le) (app (S) m0 ■) ■) n ■) ■) (app (app (le) m0 ■) n ■) ■) (in-⇒ (λ auto : Prf (app (app (le) (app (S) m0 ■) ■) n ■), el-⇒ (el-∀ (el-∀ (lt_to_le) (m0) ■) (n) ■) (auto) ■)) ■) (_x_421) ■)))) ■) (m) ■) (Hltnm) ■)));
symbol not_le_to_lt : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (app (lt) m ■) n ■)));
symbol not_lt_to_le : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (lt) n ■) m ■) ■) ⇒ app (app (le) m ■) n ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf (app (coq.connectives.Not) (app (app (lt) n ■) m ■) ■), el-⇒ (el-∀ (el-∀ (le_S_S_to_le) (m) ■) (n) ■) (el-⇒ (el-∀ (el-∀ (not_le_to_lt) (app (S) n ■) ■) (m) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (le) (app (S) n ■) ■) m ■) ■) (app (app (lt) n ■) m ■) ■) (in-⇒ (λ auto : Prf (app (app (le) (app (S) n ■) ■) m ■), auto)) ■) (H) ■) ■) ■)));
symbol le_to_not_lt : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (coq.connectives.Not) (app (app (lt) m ■) n ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-∀ (lt_to_not_le) (n) ■) (app (S) m ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (le_to_lt_to_lt) (n) ■) (m) ■) (app (S) m ■) ■) (H) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) m ■) ■) (app (app (plus) O ■) (app (S) m ■) ■) ■) ■) (app (app (le) (app (S) m ■) ■) (app (S) m ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (O) ■) (app (S) m ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) m ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) m ■) ■) __ ■) ■) (app (app (le) (app (S) m ■) ■) (app (S) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) m ■) ■) (app (S) m ■) ■) ■) ■) (app (app (plus) O ■) (app (S) m ■) ■) ■) (el-∀ (plus_O_n) (app (S) m ■) ■) ■) ■) ■) ■)));
symbol decidable_le : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (coq.logic.decidable) (app (app (le) n ■) m ■) ■))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (abs (λ __ : El (nat), abs (λ _0 : El (nat), app (coq.logic.decidable) (app (app (le) __ ■) _0 ■) ■))) ■) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (app (app (le) O ■) n ■) ■) (app (coq.connectives.Not) (app (app (le) O ■) n ■) ■) ■) (el-∀ (le_O_n) (n) ■) ■)) ■) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (coq.connectives.or_intror) (app (app (le) (app (S) n ■) ■) O ■) ■) (app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) O ■) ■) ■) (el-∀ (not_le_Sn_O) (n) ■) ■)) ■) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ _clearme : Prf (app (coq.logic.decidable) (app (app (le) n ■) m ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (le) n ■) m ■) ■) (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ■) (app (coq.logic.decidable) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ■) (in-⇒ (λ auto : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (le_S_S) (n) ■) (m) ■) (auto) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■), el-⇒ (el-∀ (el-∀ (coq.connectives.or_intror) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) (app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (not_le_to_not_le_S_S) (n) ■) (m) ■) (auto) ■) ■)) ■) (_clearme) ■)))) ■;
symbol decidable_lt : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (coq.logic.decidable) (app (app (lt) n ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-∀ (el-∀ (decidable_le) (app (S) n ■) ■) (m) ■));
symbol le_to_or_lt_eq : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (coq.connectives.Or) (app (app (lt) n ■) m ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n) ■) (abs (λ x_417 : El (nat), app (app (coq.connectives.Or) (app (app (lt) n ■) x_417 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) x_417 ■) ■)) ■) (el-∀ (el-∀ (el-∀ₚ (coq.relations.RC_reflexive) (nat) ■) (lt) ■) (n) ■) ■) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (app (app (le) n ■) m0 ■), in-⇒ (λ _x_421 : Prf (app (app (coq.connectives.Or) (app (app (lt) n ■) m0 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m0 ■) ■), el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (app (app (lt) n ■) (app (S) m0 ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (S) m0 ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (le_to_lt_to_lt) (n) ■) (m0) ■) (app (S) m0 ■) ■) (_x_419) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) m0 ■) ■) (app (app (plus) O ■) (app (S) m0 ■) ■) ■) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■) (el-∀ (el-∀ (le_plus_n) (O) ■) (app (S) m0 ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (S) m0 ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) m0 ■) ■) __ ■) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) m0 ■) ■) (app (S) m0 ■) ■) ■) ■) (app (app (plus) O ■) (app (S) m0 ■) ■) ■) (el-∀ (plus_O_n) (app (S) m0 ■) ■) ■) ■) ■) ■)))) ■) (m) ■) (lenm) ■)));
symbol lt_O_n_elim : Prf (∀ (λ n : El (nat), (app (app (lt) O ■) n ■) ⇒ ∀ (λ P : El ((nat ⇝ prop)), (∀ (λ m : El (nat), app (P) (app (S) m ■) ■)) ⇒ app (P) n ■))) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), (app (app (lt) O ■) _x_365 ■) ⇒ ∀ (λ P : El ((nat ⇝ prop)), (∀ (λ m : El (nat), app (P) (app (S) m ■) ■)) ⇒ app (P) _x_365 ■))) ■) (in-⇒ (λ abs : Prf (app (app (lt) O ■) O ■), el-⇒ (el-∀ (coq.connectives.falsity) (∀ (λ P : El ((nat ⇝ prop)), (∀ (λ m : El (nat), app (P) (app (S) m ■) ■)) ⇒ app (P) O ■)) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (le) (app (S) O ■) ■) O ■) ■) (abs) ■) (el-∀ (not_le_Sn_O) (O) ■) ■) ■)) ■) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf ((app (app (lt) O ■) x_366 ■) ⇒ ∀ (λ P : El ((nat ⇝ prop)), (∀ (λ m : El (nat), app (P) (app (S) m ■) ■)) ⇒ app (P) x_366 ■)), in-⇒ (λ auto : Prf (app (app (lt) O ■) (app (S) x_366 ■) ■), in-∀ (λ P : El (nat ⇝ prop),  in-⇒ (λ auto' : Prf (∀ (λ m : El (nat), app (P) (app (S) m ■) ■)), el-∀ (auto') (x_366) ■)))))) ■) (n) ■);
symbol le_n_O_elim : Prf (∀ (λ n : El (nat), (app (app (le) n ■) O ■) ⇒ ∀ (λ P : El ((nat ⇝ prop)), (app (P) O ■) ⇒ app (P) n ■))) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), (app (app (le) __ ■) O ■) ⇒ ∀ (λ P : El ((nat ⇝ prop)), (app (P) O ■) ⇒ app (P) __ ■))) ■) (in-⇒ (λ auto : Prf (app (app (le) O ■) O ■), in-∀ (λ P : El (nat ⇝ prop),  in-⇒ (λ auto' : Prf (app (P) O ■), auto')))) ■) (in-∀ (λ a : El (nat),  in-⇒ (λ abs : Prf (app (app (le) (app (S) a ■) ■) O ■), el-⇒ (el-∀ (coq.connectives.falsity) (∀ (λ P : El ((nat ⇝ prop)), (app (P) O ■) ⇒ app (P) (app (S) a ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (le) (app (S) a ■) ■) O ■) ■) (abs) ■) (el-∀ (not_le_Sn_O) (a) ■) ■) ■))) ■) (n) ■);
symbol lt_to_not_eq : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (lt) n ■) m ■) ⇒ app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf (app (app (lt) n ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) (coq.connectives.False) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (le) (app (S) n ■) ■) n ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (S) n ■) ■) m ■) ■) (app (app (le) (app (S) n ■) ■) n ■) ■) (H) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (S) n ■) ■) __ ■) ■) (app (app (le) (app (S) n ■) ■) n ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (S) n ■) ■) n ■) ■) ■) (m) ■) (auto) ■) ■) ■) (el-∀ (not_le_Sn_n) (n) ■) ■)) ■) (el-⇒ (el-∀ (coq.connectives.nmk) (coq.connectives.False) ■) (in-⇒ (λ auto : Prf (coq.connectives.False), auto)) ■) ■)));
symbol le_n_O_to_eq : Prf (∀ (λ n : El (nat), (app (app (le) n ■) O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) n ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), (app (app (le) __ ■) O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■)) ■) (in-⇒ (λ auto : Prf (app (app (le) O ■) O ■), el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■)) ■) (in-∀ (λ a : El (nat),  in-⇒ (λ abs : Prf (app (app (le) (app (S) a ■) ■) O ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) a ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (le) (app (S) a ■) ■) O ■) ■) (abs) ■) (el-∀ (not_le_Sn_O) (a) ■) ■) ■))) ■) (n) ■);
symbol le_to_le_to_eq : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ (app (app (le) m ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (abs (λ __ : El (nat), abs (λ _0 : El (nat), (app (app (le) __ ■) _0 ■) ⇒ (app (app (le) _0 ■) __ ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) _0 ■))) ■) (in-∀ (λ n : El (nat),  in-⇒ (λ auto : Prf (app (app (le) O ■) n ■), in-⇒ (λ auto' : Prf (app (app (le) n ■) O ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (n) ■) (O) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (O) ■) (n) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) n ■) ■) (el-⇒ (el-∀ (le_n_O_to_eq) (n) ■) (auto') ■) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) n ■) ■) ■) ■) ■)))) ■) (in-∀ (λ n : El (nat),  in-⇒ (λ auto : Prf (app (app (le) (app (S) n ■) ■) O ■), in-⇒ (λ auto' : Prf (app (app (le) O ■) (app (S) n ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (O) ■) (app (S) n ■) ■) (el-⇒ (el-∀ (le_n_O_to_eq) (app (S) n ■) ■) (auto) ■) ■)))) ■) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf ((app (app (le) n ■) m ■) ⇒ (app (app (le) m ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), in-⇒ (λ auto' : Prf (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■), in-⇒ (λ auto'' : Prf (app (app (le) (app (S) m ■) ■) (app (S) n ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (nat) ■) (nat) ■) (S) ■) (n) ■) (m) ■) (el-⇒ (el-⇒ (auto) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (pred) (app (S) n ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (monotonic_pred) (app (S) n ■) ■) (app (S) m ■) ■) (auto') ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) n ■) __ ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) n ■) m ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) (el-∀ (pred_Sn) (m) ■) ■) ■) (app (pred) (app (S) n ■) ■) ■) (el-∀ (pred_Sn) (n) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (pred) (app (S) m ■) ■) ■) (app (pred) (app (S) n ■) ■) ■) ■) (app (app (le) m ■) n ■) ■) (el-⇒ (el-∀ (el-∀ (monotonic_pred) (app (S) m ■) ■) (app (S) n ■) ■) (auto'') ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (pred) (app (S) n ■) ■) ■) ■) (app (app (le) m ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) m ■) __ ■) ■) (app (app (le) m ■) n ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) m ■) n ■) ■) ■) (app (pred) (app (S) n ■) ■) ■) (el-∀ (pred_Sn) (n) ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) (el-∀ (pred_Sn) (m) ■) ■) ■) ■) ■)))))) ■;
symbol plus_minus : Prf (∀ (λ m : El (nat), ∀ (λ n : El (nat), ∀ (λ p : El (nat), (app (app (le) m ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) p ■) ■) (app (app (minus) (app (app (plus) n ■) p ■) ■) m ■) ■)))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (abs (λ __ : El (nat), abs (λ _0 : El (nat), ∀ (λ p : El (nat), (app (app (le) __ ■) _0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) _0 ■) __ ■) ■) p ■) ■) (app (app (minus) (app (app (plus) _0 ■) p ■) ■) __ ■) ■)))) ■) (in-∀ (λ n : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ auto : Prf (app (app (le) O ■) n ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) __ ■) p ■) ■) (app (app (minus) (app (app (plus) n ■) p ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) n ■) p ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) n ■) p ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (plus) n ■) p ■) ■) ■) (app (app (minus) (app (app (plus) n ■) p ■) ■) O ■) ■) (el-∀ (minus_n_O) (app (app (plus) n ■) p ■) ■) ■) ■) (app (app (minus) n ■) O ■) ■) (el-∀ (minus_n_O) (n) ■) ■)))) ■) (in-∀ (λ n : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ abs : Prf (app (app (le) (app (S) n ■) ■) O ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) O ■) (app (S) n ■) ■) ■) p ■) ■) (app (app (minus) (app (app (plus) O ■) p ■) ■) (app (S) n ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (le) (app (S) n ■) ■) O ■) ■) (abs) ■) (el-∀ (not_le_Sn_O) (n) ■) ■) ■)))) ■) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) m ■) ■) (abs (λ y : El ((nat ⇝ nat)), (∀ (λ p : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus) (app (app (plus) m ■) p ■) ■) n ■) ■)) ⇒ ∀ (λ p : El (nat), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (y) (app (S) n ■) ■) ■) p ■) ■) (app (app (minus) (app (app (plus) (app (S) m ■) ■) p ■) ■) (app (S) n ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (∀ (λ p : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus) (app (app (plus) m ■) p ■) ■) n ■) ■)) ⇒ ∀ (λ p : El (nat), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (y) (app (S) n ■) ■) ■) p ■) ■) (app (app (minus) (app (app (plus) (app (S) m ■) ■) p ■) ■) (app (S) n ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (∀ (λ p : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus) (app (app (plus) m ■) p ■) ■) n ■) ■)) ⇒ ∀ (λ p : El (nat), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (y) (app (S) n ■) ■) ■) p ■) ■) (app (app (minus) (app (app (plus) (app (S) m ■) ■) p ■) ■) (app (S) n ■) ■) ■))) ■) (in-⇒ (λ auto : Prf (∀ (λ p : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus) (app (app (plus) m ■) p ■) ■) n ■) ■)), in-∀ (λ p : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) m ■) ■) (abs (λ q : El (nat), app (app (minus) m ■) q ■)) ■) (n) ■) (abs (λ y : El (nat), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) y ■) p ■) ■) (app (app (minus) (app (app (plus) (app (S) m ■) ■) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (app (plus) (app (S) m ■) ■) p ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (y) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) m ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ nat) ■) minus_body ■) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (app (app (plus) m ■) p ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (y) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (eq_plus_body_S) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus_body) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus_body) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (eq_plus) (app (S) m ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus_body) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (app (S) m ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus_body) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (plus_body) ■) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus_body) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (app (minus_body) (app (y) p ■) ■) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (app (app (plus) m ■) p ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) (app (y) (app (S) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) (app (app (plus) m ■) p ■) ■) ■) (abs (λ q : El (nat), app (app (minus) (app (app (plus) m ■) p ■) ■) q ■)) ■) (n) ■) (abs (λ y : El (nat), (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) n ■) ■) p ■) ■) y ■)) ■) (in-⇒ (λ auto' : Prf (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■), el-⇒ (el-∀ (auto) (p) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (pred) (app (S) n ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (monotonic_pred) (app (S) n ■) ■) (app (S) m ■) ■) (auto') ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (pred) (app (S) m ■) ■) ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (m) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) n ■) __ ■) ■) (app (app (le) n ■) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) n ■) m ■) ■) ■) (app (pred) (app (S) m ■) ■) ■) (el-∀ (pred_Sn) (m) ■) ■) ■) (app (pred) (app (S) n ■) ■) ■) (el-∀ (pred_Sn) (n) ■) ■) ■) ■)) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■))) ■) ■) ■))) ■;
symbol minus_plus_m_m : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) m ■) m ■) ■) n ■) ■) (app (app (minus) (app (app (plus) m ■) n ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_minus) (m) ■) (m) ■) (n) ■) (el-∀ (le_n) (m) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) __ ■) n ■) ■) (app (app (minus) (app (app (plus) m ■) n ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (minus) (app (app (plus) m ■) n ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) n ■) m ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) __ ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■) ■) (app (app (plus) m ■) n ■) ■) (el-∀ (el-∀ (commutative_plus) (m) ■) (n) ■) ■) ■) (app (app (plus) O ■) n ■) ■) (el-∀ (plus_O_n) (n) ■) ■) ■) (app (app (minus) m ■) m ■) ■) (el-∀ (minus_n_n) (m) ■) ■) ■));
symbol plus_minus_m_m : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) m ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lemn : Prf (app (app (le) m ■) n ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (n) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) n ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_minus) (m) ■) (n) ■) (m) ■) (lemn) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) __ ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) n ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) n ■) ■) ■) (app (app (minus) (app (app (plus) n ■) m ■) ■) m ■) ■) (el-∀ (el-∀ (minus_plus_m_m) (n) ■) (m) ■) ■) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) n ■) m ■) ■) (m) ■) ■) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) n ■) m ■) ■) (m) ■) ■) ■) ■)));
symbol minus_to_plus : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), (app (app (le) m ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) m ■) ■) p ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) p ■) ■)))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ lemn : Prf (app (app (le) m ■) n ■), in-⇒ (λ eqp : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) m ■) ■) p ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) p ■) ■) ■) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (n) ■) (m) ■) (lemn) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) __ ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) p ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (p) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) __ ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) p ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) (app (app (minus) n ■) m ■) ■) (eqp) ■) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) n ■) m ■) ■) (m) ■) ■) ■)))));
symbol plus_to_minus : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) p ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) m ■) ■) p ■)))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ eqp : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) m ■) p ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (p) ■) (app (app (minus) n ■) m ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) p ■) (app (app (minus) (app (app (plus) p ■) m ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) p ■) (app (app (minus) n ■) m ■) ■) ■) (el-∀ (el-∀ (minus_plus_m_m) (p) ■) (m) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) p ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) p ■) (app (app (minus) __ ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) p ■) (app (app (minus) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) p ■) (app (app (minus) __ ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) p ■) (app (app (minus) n ■) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) p ■) (app (app (minus) n ■) m ■) ■) ■) ■) (app (app (plus) m ■) p ■) ■) (eqp) ■) ■) (app (app (plus) p ■) m ■) ■) (el-∀ (el-∀ (commutative_plus) (p) ■) (m) ■) ■) ■) ■))));
symbol monotonic_le_minus_l : Prf (∀ (λ p : El (nat), ∀ (λ q : El (nat), ∀ (λ n : El (nat), (app (app (le) q ■) p ■) ⇒ app (app (le) (app (app (minus) q ■) n ■) ■) (app (app (minus) p ■) n ■) ■)))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (abs (λ __ : El (nat), abs (λ _0 : El (nat), ∀ (λ n : El (nat), (app (app (le) _0 ■) __ ■) ⇒ app (app (le) (app (app (minus) _0 ■) n ■) ■) (app (app (minus) __ ■) n ■) ■)))) ■) (in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ lePO : Prf (app (app (le) p ■) O ■), el-⇒ (el-∀ (el-⇒ (el-∀ (le_n_O_elim) (p) ■) (lePO) ■) (abs (λ __ : El (nat), app (app (le) (app (app (minus) __ ■) q ■) ■) (app (app (minus) O ■) q ■) ■)) ■) (el-∀ (le_n) (app (app (minus) O ■) q ■) ■) ■)))) ■) (in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) p ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (y) q ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (p) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (y) q ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (p) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (y) q ■) ■)) ■) (el-⇒ (el-∀ (eq_plus_body_O) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (y) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (nat ⇝ nat) ■) (plus_body) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (y) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (eq_plus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (y) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (eq_minus_body_O) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (app (plus) (app (y) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (nat ⇝ nat) ■) (minus_body) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (app (plus) (app (y) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (eq_minus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (app (plus) (app (y) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (eq_minus_body_O) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (app (plus) (app (app (minus) (app (y) q ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (nat ⇝ nat) ■) (minus_body) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (app (plus) (app (app (minus) (app (y) q ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (eq_minus) (O) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) O ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) O ■) q ■) ■) (app (app (plus) (app (app (minus) (app (y) q ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (le) O ■) (app (S) p ■) ■), el-∀ (el-∀ (le_plus_minus_m_m) (app (app (minus) O ■) q ■) ■) (app (app (app (el-∀ₖ (match_nat_type) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) q ■) ■)) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■))) ■) (in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ Hind : Prf (∀ (λ n0 : El (nat), (app (app (le) q ■) p ■) ⇒ app (app (le) (app (app (minus) q ■) n0 ■) ■) (app (app (minus) p ■) n0 ■) ■)), in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) (app (S) q ■) ■) __ ■) ■) (app (app (minus) (app (S) p ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) q ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (y) O ■) ■) (app (app (minus) (app (S) p ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (q) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (y) O ■) ■) (app (app (minus) (app (S) p ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (q) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (y) O ■) ■) (app (app (minus) (app (S) p ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat) ■) (app (S) q ■) ■) (abs (λ z : El (nat), app (app (minus) q ■) z ■)) ■) (abs (λ y : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) y ■) (app (app (minus) (app (S) p ■) ■) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) p ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (S) q ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (p) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (S) q ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (p) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (S) q ■) ■) (app (y) O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) (abs (λ y : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (S) q ■) ■) y ■)) ■) (in-⇒ (λ auto : Prf (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■), auto)) ■) ■) ■) ■) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) q ■) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ a : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (y) (app (S) a ■) ■) ■) (app (app (minus) (app (S) p ■) ■) (app (S) a ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (q) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ a : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (y) (app (S) a ■) ■) ■) (app (app (minus) (app (S) p ■) ■) (app (S) a ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (q) ■) (abs (λ y : El ((nat ⇝ nat)), ∀ (λ a : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (y) (app (S) a ■) ■) ■) (app (app (minus) (app (S) p ■) ■) (app (S) a ■) ■) ■))) ■) (in-∀ (λ a : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) q ■) ■) (abs (λ z : El (nat), app (app (minus) q ■) z ■)) ■) (a) ■) (abs (λ y : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) y ■) (app (app (minus) (app (S) p ■) ■) (app (S) a ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (app (S) p ■) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) q ■) a ■) ■) (app (y) (app (S) a ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat) ■) (minus_body) ■) (p) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) q ■) a ■) ■) (app (y) (app (S) a ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (p) ■) (abs (λ y : El ((nat ⇝ nat)), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) q ■) a ■) ■) (app (y) (app (S) a ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat) ■) (app (S) p ■) ■) (abs (λ q0 : El (nat), app (app (minus) p ■) q0 ■)) ■) (a) ■) (abs (λ y : El (nat), (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■) ⇒ app (app (le) (app (app (minus) q ■) a ■) ■) y ■)) ■) (in-⇒ (λ leSS : Prf (app (app (le) (app (S) q ■) ■) (app (S) p ■) ■), el-⇒ (el-∀ (Hind) (a) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (pred) (app (S) q ■) ■) ■) (app (pred) (app (S) p ■) ■) ■) ■) (app (app (le) q ■) p ■) ■) (el-⇒ (el-∀ (el-∀ (monotonic_pred) (app (S) q ■) ■) (app (S) p ■) ■) (leSS) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (q) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) __ ■) (app (pred) (app (S) p ■) ■) ■) ■) (app (app (le) q ■) p ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (p) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) q ■) __ ■) ■) (app (app (le) q ■) p ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) q ■) p ■) ■) ■) (app (pred) (app (S) p ■) ■) ■) (el-∀ (pred_Sn) (p) ■) ■) ■) (app (pred) (app (S) q ■) ■) ■) (el-∀ (pred_Sn) (q) ■) ■) ■) ■)) ■) ■) ■) ■) ■)) ■) ■) ■) ■) (n) ■))))) ■;
symbol le_plus_to_minus : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), (app (app (le) n ■) (app (app (plus) p ■) m ■) ■) ⇒ app (app (le) (app (app (minus) n ■) m ■) ■) p ■)))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ lep : Prf (app (app (le) n ■) (app (app (plus) p ■) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) n ■) m ■) ■) (app (app (minus) (app (app (plus) p ■) m ■) ■) m ■) ■) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) p ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (app (app (plus) p ■) m ■) ■) (n) ■) (m) ■) (lep) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (p) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) __ ■) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) p ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) p ■) ■) ■) (app (app (minus) (app (app (plus) p ■) m ■) ■) m ■) ■) (el-∀ (el-∀ (minus_plus_m_m) (p) ■) (m) ■) ■) ■))));
symbol monotonic_le_minus_r : Prf (∀ (λ p : El (nat), ∀ (λ q : El (nat), ∀ (λ n : El (nat), (app (app (le) q ■) p ■) ⇒ app (app (le) (app (app (minus) n ■) p ■) ■) (app (app (minus) n ■) q ■) ■)))) ≔ in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-∀ (λ n : El (nat),  in-⇒ (λ lepq : Prf (app (app (le) q ■) p ■), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_minus) (n) ■) (p) ■) (app (app (minus) n ■) q ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n) ■) (app (app (plus) (app (app (minus) n ■) q ■) ■) q ■) ■) (app (app (plus) (app (app (minus) n ■) q ■) ■) p ■) ■) (el-∀ (el-∀ (le_plus_minus_m_m) (n) ■) (q) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (app (app (minus) n ■) q ■) ■) (q) ■) (p) ■) (lepq) ■) ■) ■))));
symbol minus_le : Prf (∀ (λ x : El (nat), ∀ (λ y : El (nat), app (app (le) (app (app (minus) x ■) y ■) ■) x ■))) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) x ■) y ■) ■) (app (app (minus) (app (app (plus) x ■) y ■) ■) y ■) ■) ■) (app (app (le) (app (app (minus) x ■) y ■) ■) x ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (app (app (plus) x ■) y ■) ■) (x) ■) (y) ■) (el-∀ (el-∀ (le_plus_n_r) (y) ■) (x) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (x) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) x ■) y ■) ■) __ ■) ■) (app (app (le) (app (app (minus) x ■) y ■) ■) x ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) x ■) y ■) ■) x ■) ■) ■) (app (app (minus) (app (app (plus) x ■) y ■) ■) y ■) ■) (el-∀ (el-∀ (minus_plus_m_m) (x) ■) (y) ■) ■) ■));
symbol not_eq_to_le_to_lt : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ (app (app (le) n ■) m ■) ⇒ app (app (lt) n ■) m ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ Hneq : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■), in-⇒ (λ Hle : Prf (app (app (le) n ■) m ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (lt) n ■) m ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) (app (app (lt) n ■) m ■) ■) (in-⇒ (λ auto : Prf (app (app (lt) n ■) m ■), auto)) ■) (in-⇒ (λ Heq : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), el-⇒ (el-∀ (el-∀ (not_le_to_lt) (m) ■) (n) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (le) m ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) (in-⇒ (λ auto : Prf (app (app (le) m ■) n ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (n) ■) ■) (m) ■) (Heq) ■)) ■) (Hneq) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (le_to_or_lt_eq) (n) ■) (m) ■) (Hle) ■) ■))));
symbol eq_minus_O : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) m ■) ■) O ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-∀ (le_n_O_elim) (app (app (minus) n ■) m ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) n ■) m ■) ■) (app (app (minus) n ■) n ■) ■) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) O ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_r) (m) ■) (n) ■) (n) ■) (lenm) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) __ ■) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) O ■) ■) ■) (app (app (minus) n ■) n ■) ■) (el-∀ (minus_n_n) (n) ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) O ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■)));
symbol distributive_times_minus : Prf (app (app (el-∀ₖ (coq.relations.distributive) (nat) ■) times ■) minus ■) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (lt) b ■) c ■) ■) (app (coq.connectives.Not) (app (app (lt) b ■) c ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) a ■) (app (app (minus) b ■) c ■) ■) ■) (app (app (minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■) ■) (in-⇒ (λ Hbc : Prf (app (app (lt) b ■) c ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat) ■) (O) ■) (abs (λ x : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) a ■) x ■) ■) (app (app (minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat) ■) (O) ■) (abs (λ x : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) a ■) O ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (O) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) O ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■) (app (app (times) a ■) O ■) ■) (el-∀ (times_n_O) (a) ■) ■) ■) (app (app (minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (a) ■) (b) ■) (c) ■) (el-⇒ (el-∀ (el-∀ (lt_to_le) (b) ■) (c) ■) (Hbc) ■) ■) ■) ■) ■) (app (app (minus) b ■) c ■) ■) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (b) ■) (c) ■) (el-⇒ (el-∀ (el-∀ (lt_to_le) (b) ■) (c) ■) (Hbc) ■) ■) ■)) ■) (in-⇒ (λ Hbc : Prf (app (coq.connectives.Not) (app (app (lt) b ■) c ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (app (app (minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■) (app (app (times) a ■) (app (app (minus) b ■) c ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■) (app (app (times) a ■) (app (app (minus) b ■) c ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■) (app (app (times) a ■) (app (app (minus) b ■) c ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) (app (app (times) a ■) (app (app (minus) b ■) c ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat) ■) (app (app (times) a ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) ■) (abs (λ x_1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (times) a ■) b ■) ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (nat) ■) (nat) ■) (app (times) a ■) ■) (b) ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) b ■) (app (app (plus) (app (app (minus) b ■) c ■) ■) c ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) b ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (b) ■) (c) ■) (el-⇒ (el-∀ (el-∀ (not_lt_to_le) (b) ■) (c) ■) (Hbc) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) b ■) __ ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) b ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) b ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) ■) ■) (app (app (plus) (app (app (minus) b ■) c ■) ■) c ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) b ■) c ■) ■) (c) ■) ■) ■) ■) ■) (app (app (plus) (app (app (times) a ■) c ■) ■) (app (app (times) a ■) (app (app (minus) b ■) c ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (distributive_times_plus) (a) ■) (c) ■) (app (app (minus) b ■) c ■) ■) ■) ■) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (times) a ■) b ■) ■) (app (app (times) a ■) c ■) ■) ■) (app (app (times) a ■) (app (app (minus) b ■) c ■) ■) ■) ■) ■) ■)) ■) (el-∀ (el-∀ (decidable_lt) (b) ■) (c) ■) ■)));
symbol minus_plus : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (minus) n ■) m ■) ■) p ■) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■)))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (le) (app (app (plus) m ■) p ■) ■) n ■) ■) (app (coq.connectives.Not) (app (app (le) (app (app (plus) m ■) p ■) ■) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (minus) n ■) m ■) ■) p ■) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) (in-⇒ (λ Hlt : Prf (app (app (le) (app (app (plus) m ■) p ■) ■) n ■), el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (app (app (minus) n ■) m ■) ■) (p) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (n) ■) (m) ■) (app (app (plus) p ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat) ■) (app (app (plus) (app (app (plus) m ■) p ■) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) (abs (λ x_1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) x_1 ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (minus_to_plus) (n) ■) (app (app (plus) m ■) p ■) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) (Hlt) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) ■) (app (app (plus) m ■) (app (app (plus) p ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (m) ■) (p) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) ■) ■)) ■) (in-⇒ (λ Hlt : Prf (app (coq.connectives.Not) (app (app (le) (app (app (plus) m ■) p ■) ■) n ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat) ■) (O) ■) (abs (λ x : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) x ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) (O) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) O ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) O ■) ■) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (n) ■) (app (app (plus) m ■) p ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n) ■) (app (S) n ■) ■) (app (app (plus) m ■) p ■) ■) (el-∀ (le_n_Sn) (n) ■) ■) (el-⇒ (el-∀ (el-∀ (not_le_to_lt) (app (app (plus) m ■) p ■) ■) (n) ■) (Hlt) ■) ■) ■) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) n ■) (app (app (plus) m ■) p ■) ■) ■) O ■) ■) ■) ■) ■) (app (app (minus) (app (app (minus) n ■) m ■) ■) p ■) ■) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (app (app (minus) n ■) m ■) ■) (p) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) n ■) m ■) ■) (app (app (minus) (app (app (plus) p ■) m ■) ■) m ■) ■) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) p ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (app (app (plus) p ■) m ■) ■) (n) ■) (m) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) n ■) (app (app (plus) m ■) p ■) ■) ■) (app (app (le) n ■) (app (app (plus) p ■) m ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n) ■) (app (S) n ■) ■) (app (app (plus) m ■) p ■) ■) (el-∀ (le_n_Sn) (n) ■) ■) (el-⇒ (el-∀ (el-∀ (not_le_to_lt) (app (app (plus) m ■) p ■) ■) (n) ■) (Hlt) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) m ■) p ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) n ■) (app (app (plus) m ■) p ■) ■) ■) (app (app (le) n ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) n ■) (app (app (plus) m ■) p ■) ■) ■) ■) (app (app (plus) p ■) m ■) ■) (el-∀ (el-∀ (commutative_plus) (p) ■) (m) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (p) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) __ ■) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) p ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) n ■) m ■) ■) p ■) ■) ■) (app (app (minus) (app (app (plus) p ■) m ■) ■) m ■) ■) (el-∀ (el-∀ (minus_plus_m_m) (p) ■) (m) ■) ■) ■) ■) ■)) ■) (el-∀ (el-∀ (decidable_le) (app (app (plus) m ■) p ■) ■) (n) ■) ■)));
symbol minus_minus : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ p : El (nat), (app (app (le) p ■) m ■) ⇒ (app (app (le) m ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (plus) p ■) (app (app (minus) n ■) m ■) ■) ■) (app (app (minus) n ■) (app (app (minus) m ■) p ■) ■) ■)))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ lepm : Prf (app (app (le) p ■) m ■), in-⇒ (λ lemn : Prf (app (app (le) m ■) n ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat) ■) (app (app (minus) n ■) (app (app (minus) m ■) p ■) ■) ■) (app (app (plus) p ■) (app (app (minus) n ■) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (n) ■) (app (app (minus) m ■) p ■) ■) (app (app (plus) p ■) (app (app (minus) n ■) m ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat) ■) (app (app (plus) (app (app (plus) (app (app (minus) m ■) p ■) ■) p ■) ■) (app (app (minus) n ■) m ■) ■) ■) (abs (λ x_1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat) ■) (m) ■) (abs (λ x_1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) (app (app (plus) x_1 ■) (app (app (minus) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (abs (λ x_1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat) ■) (n) ■) (abs (λ x_1 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) x_1 ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (n) ■) ■) (app (app (plus) (app (app (minus) n ■) m ■) ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (n) ■) (m) ■) (lemn) ■) ■) ■) (app (app (plus) m ■) (app (app (minus) n ■) m ■) ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) n ■) m ■) ■) (m) ■) ■) ■) (app (app (plus) (app (app (minus) m ■) p ■) ■) p ■) ■) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (m) ■) (p) ■) (lepm) ■) ■) ■) (app (app (plus) (app (app (minus) m ■) p ■) ■) (app (app (plus) p ■) (app (app (minus) n ■) m ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (associative_plus) (app (app (minus) m ■) p ■) ■) (p) ■) (app (app (minus) n ■) m ■) ■) ■) ■) ■)))));
symbol minus_minus_comm : Prf (∀ (λ a : El (nat), ∀ (λ b : El (nat), ∀ (λ c : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■)))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (le_to_le_to_eq) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (app (app (minus) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) c ■) ■) c ■) ■) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) c ■) ■) (app (app (minus) a ■) b ■) ■) (c) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) c ■) ■) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) c ■) ■) ■) (el-∀ (el-∀ (le_plus_minus_m_m) (app (app (minus) a ■) b ■) ■) (c) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (minus) a ■) (app (app (plus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) __ ■) c ■) ■) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) c ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) c ■) (app (app (minus) a ■) (app (app (plus) b ■) c ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) __ ■) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) c ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) c ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) c ■) (app (app (minus) a ■) (app (app (plus) b ■) c ■) ■) ■) ■) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) c ■) __ ■) ■) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) c ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) a ■) b ■) ■) (app (app (plus) c ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) ■) ■) ■) (app (app (minus) a ■) (app (app (plus) b ■) c ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) c ■) b ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (app (app (minus) a ■) __ ■) ■)) ■) (el-∀ (el-∀ (el-∀ (minus_plus) (a) ■) (c) ■) (b) ■) ■) (app (app (plus) b ■) c ■) ■) (el-∀ (el-∀ (commutative_plus) (c) ■) (b) ■) ■) ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) c ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (c) ■) ■) ■) (app (app (plus) (app (app (minus) a ■) (app (app (plus) b ■) c ■) ■) ■) c ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) a ■) (app (app (plus) b ■) c ■) ■) ■) (c) ■) ■) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (el-∀ (el-∀ (el-∀ (minus_plus) (a) ■) (b) ■) (c) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) __ ■) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) ■) ■) (app (app (minus) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) c ■) ■) c ■) ■) (el-∀ (el-∀ (minus_plus_m_m) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (c) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (app (app (minus) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) b ■) ■) b ■) ■) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) b ■) ■) (app (app (minus) a ■) c ■) ■) (b) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) b ■) ■) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) b ■) ■) ■) (el-∀ (el-∀ (le_plus_minus_m_m) (app (app (minus) a ■) c ■) ■) (b) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (minus) a ■) (app (app (plus) c ■) b ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) __ ■) b ■) ■) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) b ■) (app (app (minus) a ■) (app (app (plus) c ■) b ■) ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) __ ■) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) b ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) b ■) (app (app (minus) a ■) (app (app (plus) c ■) b ■) ■) ■) ■) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) b ■) __ ■) ■) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) b ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) a ■) c ■) ■) (app (app (plus) b ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) ■) ■) ■) (app (app (minus) a ■) (app (app (plus) c ■) b ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) b ■) c ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (app (app (minus) a ■) __ ■) ■)) ■) (el-∀ (el-∀ (el-∀ (minus_plus) (a) ■) (b) ■) (c) ■) ■) (app (app (plus) c ■) b ■) ■) (el-∀ (el-∀ (commutative_plus) (b) ■) (c) ■) ■) ■) ■) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) b ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (b) ■) ■) ■) (app (app (plus) (app (app (minus) a ■) (app (app (plus) c ■) b ■) ■) ■) b ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) a ■) (app (app (plus) c ■) b ■) ■) ■) (b) ■) ■) ■) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (el-∀ (el-∀ (el-∀ (minus_plus) (a) ■) (c) ■) (b) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) __ ■) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (le) (app (app (minus) (app (app (minus) a ■) c ■) ■) b ■) ■) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) ■) ■) (app (app (minus) (app (app (plus) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) b ■) ■) b ■) ■) (el-∀ (el-∀ (minus_plus_m_m) (app (app (minus) (app (app (minus) a ■) b ■) ■) c ■) ■) (b) ■) ■) ■) ■)));
symbol minus_le_minus_minus_comm : Prf (∀ (λ b : El (nat), ∀ (λ c : El (nat), ∀ (λ a : El (nat), (app (app (le) c ■) b ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) a ■) (app (app (minus) b ■) c ■) ■) ■) (app (app (minus) (app (app (plus) a ■) c ■) ■) b ■) ■)))) ≔ in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-∀ (λ a : El (nat),  in-⇒ (λ H : Prf (app (app (le) c ■) b ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat) ■) (app (app (plus) (app (app (minus) b ■) c ■) ■) c ■) ■) (abs (λ x : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) a ■) (app (app (minus) b ■) c ■) ■) ■) (app (app (minus) (app (app (plus) a ■) c ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) c ■) a ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) a ■) (app (app (minus) b ■) c ■) ■) ■) (app (app (minus) __ ■) (app (app (plus) (app (app (minus) b ■) c ■) ■) c ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) a ■) (app (app (minus) b ■) c ■) ■) ■) (app (app (minus) (app (app (plus) c ■) a ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (minus) (app (app (minus) (app (app (plus) c ■) a ■) ■) c ■) ■) (app (app (minus) b ■) c ■) ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) a ■) (app (app (minus) b ■) c ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (minus) (app (app (plus) c ■) a ■) ■) c ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) __ ■) (app (app (minus) b ■) c ■) ■) ■) (app (app (minus) (app (app (minus) (app (app (plus) c ■) a ■) ■) c ■) ■) (app (app (minus) b ■) c ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (minus) (app (app (minus) (app (app (plus) c ■) a ■) ■) c ■) ■) (app (app (minus) b ■) c ■) ■) ■) ■) (a) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (plus) a ■) c ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) a ■) (app (app (minus) __ ■) c ■) ■)) ■) (el-∀ (el-∀ (minus_plus_m_m) (a) ■) (c) ■) ■) (app (app (plus) c ■) a ■) ■) (el-∀ (el-∀ (commutative_plus) (a) ■) (c) ■) ■) ■) ■) (app (app (minus) (app (app (plus) c ■) a ■) ■) (app (app (plus) c ■) (app (app (minus) b ■) c ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (minus_plus) (app (app (plus) c ■) a ■) ■) (c) ■) (app (app (minus) b ■) c ■) ■) ■) ■) (app (app (plus) (app (app (minus) b ■) c ■) ■) c ■) ■) (el-∀ (el-∀ (commutative_plus) (app (app (minus) b ■) c ■) ■) (c) ■) ■) ■) (app (app (plus) a ■) c ■) ■) (el-∀ (el-∀ (commutative_plus) (a) ■) (c) ■) ■) ■) (b) ■) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (b) ■) (c) ■) (H) ■) ■))));
symbol minus_plus_plus_l : Prf (∀ (λ x : El (nat), ∀ (λ y : El (nat), ∀ (λ h : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (plus) x ■) h ■) ■) (app (app (plus) y ■) h ■) ■) ■) (app (app (minus) x ■) y ■) ■)))) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-∀ (λ h : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (app (app (minus) (app (app (minus) (app (app (plus) x ■) h ■) ■) y ■) ■) h ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (minus) x ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (minus) x ■) y ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) (app (app (minus) x ■) y ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (app (minus) x ■) y ■) ■) ■) (app (app (minus) (app (app (minus) (app (app (plus) x ■) h ■) ■) y ■) ■) h ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat) ■) (app (app (minus) (app (app (plus) x ■) h ■) ■) h ■) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (app (minus) (app (app (minus) (app (app (plus) x ■) h ■) ■) y ■) ■) h ■) ■) (app (app (minus) __ ■) y ■) ■)) ■) (el-∀ (el-∀ (el-∀ (minus_minus_comm) (app (app (plus) x ■) h ■) ■) (y) ■) (h) ■) ■) (x) ■) (el-∀ (el-∀ (minus_plus_m_m) (x) ■) (h) ■) ■) ■) ■) (app (app (minus) (app (app (plus) x ■) h ■) ■) (app (app (plus) y ■) h ■) ■) ■) (el-∀ (el-∀ (el-∀ (minus_plus) (app (app (plus) x ■) h ■) ■) (y) ■) (h) ■) ■)));
constant symbol eqb : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol eqb_body : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol axiom_eqb : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ coq.bool.bool) ■) (app (eqb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) eqb_body ■) n ■) ■));
symbol eq_eqb : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) eqb_body ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) eqb_body ■) n ■) ■) (el-∀ (axiom_eqb) (n) ■) ■);
symbol sym_eq_eqb : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) eqb_body ■) n ■) ■) (app (eqb) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) eqb_body ■) n ■) ■) (el-∀ (eq_eqb) (n) ■) ■);
constant symbol axiom_eqb_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) O ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.true ■) (abs (λ q : El (nat), coq.bool.false)) ■) m ■)) ■);
symbol eq_eqb_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) O ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.true ■) (abs (λ q : El (nat), coq.bool.false)) ■) m ■)) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) O ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.true ■) (abs (λ q : El (nat), coq.bool.false)) ■) m ■)) ■) (axiom_eqb_body_O) ■;
symbol sym_eq_eqb_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.true ■) (abs (λ q : El (nat), coq.bool.false)) ■) m ■)) ■) (app (eqb_body) O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) O ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.true ■) (abs (λ q : El (nat), coq.bool.false)) ■) m ■)) ■) (eq_eqb_body_O) ■;
constant symbol axiom_eqb_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (eqb) n ■) q ■)) ■) m ■)) ■));
symbol eq_eqb_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (eqb) n ■) q ■)) ■) m ■)) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (eqb) n ■) q ■)) ■) m ■)) ■) (el-∀ (axiom_eqb_body_S) (n) ■) ■);
symbol sym_eq_eqb_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (eqb) n ■) q ■)) ■) m ■)) ■) (app (eqb_body) (app (S) n ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool) ■) (app (eqb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (eqb) n ■) q ■)) ■) m ■)) ■) (el-∀ (eq_eqb_body_S) (n) ■) ■);
symbol eqb_elim : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) n ■) m ■) ■)))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (abs (λ __ : El (nat), abs (λ _0 : El (nat), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) _0 ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) __ ■) _0 ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) __ ■) _0 ■) ■)))) ■) (in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (abs (λ __ : El (nat), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) __ ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) O ■) __ ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (O) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool) ■) (eqb_body) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_eqb_body_O) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ q : El (nat), coq.bool.false)) ■) (abs (λ y : El (coq.bool.bool), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) y ■))) ■) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ⇒ app (P) coq.bool.true ■), in-⇒ (λ auto' : Prf ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) O ■) ■) ⇒ app (P) coq.bool.false ■), el-⇒ (auto) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (O) ■) ■)))) ■) ■) ■) ■) ■) (in-∀ (λ auto : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (O) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) auto ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool) ■) (eqb_body) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) auto ■) ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_eqb_body_O) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) auto ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ q : El (nat), coq.bool.false)) ■) (auto) ■) (abs (λ y : El (coq.bool.bool), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) y ■))) ■) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto' : Prf ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ⇒ app (P) coq.bool.true ■), in-⇒ (λ auto'' : Prf ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) O ■) (app (S) auto ■) ■) ■) ⇒ app (P) coq.bool.false ■), el-⇒ (auto'') (el-∀ (not_eq_O_S) (auto) ■) ■)))) ■) ■) ■) ■)) ■) (n) ■)) ■) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool) ■) (eqb_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb_body_S) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ q : El (nat), app (app (eqb) n ■) q ■)) ■) (abs (λ y : El (coq.bool.bool), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) y ■))) ■) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■), in-⇒ (λ auto' : Prf ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■), el-⇒ (auto') (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_not_eq) (nat) ■) (O) ■) (app (S) n ■) ■) (el-∀ (not_eq_O_S) (n) ■) ■) ■)))) ■) ■) ■) ■)) ■) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool) ■) (eqb_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb_body_S) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ q : El (nat), app (app (eqb) n ■) q ■)) ■) (m) ■) (abs (λ y : El (coq.bool.bool), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) y ■))) ■) (in-⇒ (λ auto : Prf (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (eqb) n ■) m ■) ■)), in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto' : Prf ((app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■), in-⇒ (λ auto'' : Prf ((app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■), el-⇒ (el-⇒ (el-∀ (auto) (P) ■) (in-⇒ (λ auto''' : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), el-⇒ (auto') (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) (app (S) n ■) ■) (app (S) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (app (S) n ■) ■) ■) (m) ■) (auto''') ■) ■)) ■) (in-⇒ (λ auto''' : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■), el-⇒ (auto'') (el-⇒ (el-∀ (el-∀ (not_eq_S) (n) ■) (m) ■) (auto''') ■) ■)) ■))))) ■) ■) ■) ■))) ■;
symbol eqb_n_n : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) n ■) n ■) ■) coq.bool.true ■)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (abs (λ _x_365 : El (nat), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) _x_365 ■) _x_365 ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (O) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) O ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool) ■) (eqb_body) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) O ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (sym_eq_eqb_body_O) (abs (λ y : El ((nat ⇝ coq.bool.bool)), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) O ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ q : El (nat), coq.bool.false)) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) y ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) ■) ■) ■) ■) (in-∀ (λ x_366 : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (app (S) x_366 ■) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) x_366 ■) x_366 ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) (app (S) x_366 ■) ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool) ■) (eqb_body) ■) (x_366) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) x_366 ■) x_366 ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) (app (S) x_366 ■) ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb_body_S) (x_366) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) x_366 ■) x_366 ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) (app (S) x_366 ■) ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ q : El (nat), app (app (eqb) x_366 ■) q ■)) ■) (x_366) ■) (abs (λ y : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) x_366 ■) x_366 ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) y ■) coq.bool.true ■)) ■) (in-⇒ (λ _x_368 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) x_366 ■) x_366 ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (app (eqb) x_366 ■) x_366 ■) ■) (_x_368) ■)) ■) ■) ■) ■)) ■) (n) ■);
symbol eqb_true_to_eq : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) n ■) m ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■)));
symbol eqb_false_to_not_eq : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) n ■) m ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (eqb_elim) (n) ■) (m) ■) (abs (λ __ : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■) ■) (in-⇒ (λ auto'' : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (coq.bool.false) ■) (auto') ■)) ■) (coq.bool.not_eq_true_false) ■))) ■) (in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.false ■), auto))) ■));
symbol eq_to_eqb_true : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) n ■) m ■) ■) coq.bool.true ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) n ■) __ ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (app (eqb) n ■) n ■) ■) (el-∀ (eqb_n_n) (n) ■) ■) ■) (m) ■) (auto) ■)));
symbol not_eq_to_eqb_false : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (eqb) n ■) m ■) ■) coq.bool.false ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ noteq : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (eqb_elim) (n) ■) (m) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (in-⇒ (λ Heq : Prf (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat) ■) (n) ■) (abs (λ __ : El (nat), app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (nat) ■) (n) ■) ■) (m) ■) (Heq) ■) ■) (noteq) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (nat) ■) n ■) m ■) ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■)) ■)));
constant symbol leb : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol leb_body : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol axiom_leb : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ coq.bool.bool) ■) (app (leb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) leb_body ■) n ■) ■));
symbol eq_leb : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) leb_body ■) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) leb_body ■) n ■) ■) (el-∀ (axiom_leb) (n) ■) ■);
symbol sym_eq_leb : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) leb_body ■) n ■) ■) (app (leb) n ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb) n ■) ■) (app (app (el-∀ₖ (filter_nat_type) (nat ⇝ coq.bool.bool) ■) leb_body ■) n ■) ■) (el-∀ (eq_leb) (n) ■) ■);
constant symbol axiom_leb_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ coq.bool.bool) ■) (app (leb_body) O ■) ■) (abs (λ m : El (nat), coq.bool.true)) ■);
symbol eq_leb_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb_body) O ■) ■) (abs (λ m : El (nat), coq.bool.true)) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb_body) O ■) ■) (abs (λ m : El (nat), coq.bool.true)) ■) (axiom_leb_body_O) ■;
symbol sym_eq_leb_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (abs (λ m : El (nat), coq.bool.true)) ■) (app (leb_body) O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb_body) O ■) ■) (abs (λ m : El (nat), coq.bool.true)) ■) (eq_leb_body_O) ■;
constant symbol axiom_leb_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.connectives.equal) (nat ⇝ coq.bool.bool) ■) (app (leb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (leb) n ■) q ■)) ■) m ■)) ■));
symbol eq_leb_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (leb) n ■) q ■)) ■) m ■)) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (leb) n ■) q ■)) ■) m ■)) ■) (el-∀ (axiom_leb_body_S) (n) ■) ■);
symbol sym_eq_leb_body_S : Prf (∀ (λ n : El (nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (nat ⇝ coq.bool.bool) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (leb) n ■) q ■)) ■) m ■)) ■) (app (leb_body) (app (S) n ■) ■) ■)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool) ■) (app (leb_body) (app (S) n ■) ■) ■) (abs (λ m : El (nat), app (app (app (el-∀ₖ (match_nat_type) (coq.bool.bool) ■) coq.bool.false ■) (abs (λ q : El (nat), app (app (leb) n ■) q ■)) ■) m ■)) ■) (el-∀ (eq_leb_body_S) (n) ■) ■);
symbol leb_elim : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (leb) n ■) m ■) ■)))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (abs (λ __ : El (nat), abs (λ _0 : El (nat), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) __ ■) _0 ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) __ ■) _0 ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (leb) __ ■) _0 ■) ■)))) ■) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_leb) (O) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) O ■) n ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) O ■) n ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) n ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool) ■) (leb_body) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) O ■) n ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) O ■) n ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) n ■) ■))) ■) (el-⇒ (el-∀ (sym_eq_leb_body_O) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) O ■) n ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) O ■) n ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) n ■) ■))) ■) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf ((app (app (le) O ■) n ■) ⇒ app (P) coq.bool.true ■), in-⇒ (λ auto' : Prf ((app (coq.connectives.Not) (app (app (le) O ■) n ■) ■) ⇒ app (P) coq.bool.false ■), el-⇒ (auto) (el-∀ (le_O_n) (n) ■) ■)))) ■) ■) ■)) ■) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_leb) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool) ■) (leb_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_leb_body_S) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) O ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ q : El (nat), app (app (leb) n ■) q ■)) ■) (abs (λ y : El (coq.bool.bool), ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) y ■))) ■) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf ((app (app (le) (app (S) n ■) ■) O ■) ⇒ app (P) coq.bool.true ■), in-⇒ (λ auto' : Prf ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) O ■) ■) ⇒ app (P) coq.bool.false ■), el-⇒ (auto') (el-∀ (not_le_Sn_O) (n) ■) ■)))) ■) ■) ■) ■)) ■) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_leb) (app (S) n ■) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (leb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool) ■) (leb_body) ■) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (leb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_leb_body_S) (n) ■) (abs (λ y : El ((nat ⇝ coq.bool.bool)), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (leb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (y) (app (S) m ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ q : El (nat), app (app (leb) n ■) q ■)) ■) (m) ■) (abs (λ y : El (coq.bool.bool), (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (leb) n ■) m ■) ■)) ⇒ ∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) y ■))) ■) (in-⇒ (λ Hind : Prf (∀ (λ P : El ((coq.bool.bool ⇝ prop)), ((app (app (le) n ■) m ■) ⇒ app (P) coq.bool.true ■) ⇒ ((app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (P) coq.bool.false ■) ⇒ app (P) (app (app (leb) n ■) m ■) ■)), in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ Pt : Prf ((app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ⇒ app (P) coq.bool.true ■), in-⇒ (λ Pf : Prf ((app (coq.connectives.Not) (app (app (le) (app (S) n ■) ■) (app (S) m ■) ■) ■) ⇒ app (P) coq.bool.false ■), el-⇒ (el-⇒ (el-∀ (Hind) (P) ■) (in-⇒ (λ lenm : Prf (app (app (le) n ■) m ■), el-⇒ (Pt) (el-⇒ (el-∀ (el-∀ (le_S_S) (n) ■) (m) ■) (lenm) ■) ■)) ■) (in-⇒ (λ nlenm : Prf (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■), el-⇒ (Pf) (el-⇒ (el-∀ (el-∀ (not_le_to_not_le_S_S) (n) ■) (m) ■) (nlenm) ■) ■)) ■))))) ■) ■) ■) ■))) ■;
symbol leb_true_to_le : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (leb) n ■) m ■) ■) coq.bool.true ■) ⇒ app (app (le) n ■) m ■)));
symbol le_to_leb_true : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (app (le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (leb) n ■) m ■) ■) coq.bool.true ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (leb_elim) (n) ■) (m) ■) (abs (λ __ : El (coq.bool.bool), (app (app (le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (in-⇒ (λ auto : Prf (app (app (le) n ■) m ■), in-⇒ (λ auto' : Prf (app (app (le) n ■) m ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■))) ■) (in-⇒ (λ H : Prf (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■), in-⇒ (λ H1 : Prf (app (app (le) n ■) m ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (le) n ■) m ■) ■) (H1) ■) (H) ■) ■))) ■));
symbol not_le_to_leb_false : Prf (∀ (λ n : El (nat), ∀ (λ m : El (nat), (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (leb) n ■) m ■) ■) coq.bool.false ■))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (leb_elim) (n) ■) (m) ■) (abs (λ __ : El (coq.bool.bool), (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (in-⇒ (λ H : Prf (app (app (le) n ■) m ■), in-⇒ (λ H1 : Prf (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (le) n ■) m ■) ■) (H) ■) (H1) ■) ■))) ■) (in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■), in-⇒ (λ auto' : Prf (app (coq.connectives.Not) (app (app (le) n ■) m ■) ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■))) ■));
