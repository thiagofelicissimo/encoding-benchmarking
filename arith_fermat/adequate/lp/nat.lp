require open coq.sttfa;
require coq.bool;
require coq.connectives;
require coq.leibniz;
require coq.logic;
require coq.relations;
constant symbol nat : Type;
constant symbol O : Els (↑ (nat));
constant symbol S : Els (↑ (nat ⇝ nat));
constant symbol match_nat_prop : Prf (`∀ return_ : El ((nat ⇝ prop)), ((return_) ▪ O) ⇒ (`∀ n : El (nat), (return_) ▪ ((S) ▪ n)) ⇒ `∀ z : El (nat), (return_) ▪ z);
constant symbol match_nat_type : Els (∀ₖ (λ return_, ↑ (return_ ⇝ (nat ⇝ return_) ⇝ nat ⇝ return_)));
constant symbol axiom_match_nat_type_O : Prf (`∀ₚ return_type, `∀ case_O : El (return_type), `∀ case_S : El ((nat ⇝ return_type)), (((coq.connectives.equal) at (return_type)) ▪ (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ O)) ▪ case_O);
symbol eq_match_nat_type_O : Prf (`∀ₚ return_type, `∀ case_O : El (return_type), `∀ case_S : El ((nat ⇝ return_type)), (((coq.leibniz.leibniz) at (return_type)) ▪ (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ O)) ▪ case_O) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type)) (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ O)) (case_O)) (el-∀ (el-∀ (el-∀ₚ (axiom_match_nat_type_O) (return_type)) (case_O)) (case_S)))));
symbol sym_eq_match_nat_type_O : Prf (`∀ₚ return_type, `∀ case_O : El (return_type), `∀ case_S : El ((nat ⇝ return_type)), (((coq.leibniz.leibniz) at (return_type)) ▪ case_O) ▪ (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ O)) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type)) (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ O)) (case_O)) (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (return_type)) (case_O)) (case_S)))));
constant symbol axiom_match_nat_type_S : Prf (`∀ₚ return_type, `∀ case_O : El (return_type), `∀ case_S : El ((nat ⇝ return_type)), `∀ n : El (nat), (((coq.connectives.equal) at (return_type)) ▪ (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ ((S) ▪ n))) ▪ ((case_S) ▪ n));
symbol eq_match_nat_type_S : Prf (`∀ₚ return_type, `∀ case_O : El (return_type), `∀ case_S : El ((nat ⇝ return_type)), `∀ n : El (nat), (((coq.leibniz.leibniz) at (return_type)) ▪ (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ ((S) ▪ n))) ▪ ((case_S) ▪ n)) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type)) (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ ((S) ▪ n))) ((case_S) ▪ n)) (el-∀ (el-∀ (el-∀ (el-∀ₚ (axiom_match_nat_type_S) (return_type)) (case_O)) (case_S)) (n))))));
symbol sym_eq_match_nat_type_S : Prf (`∀ₚ return_type, `∀ case_O : El (return_type), `∀ case_S : El ((nat ⇝ return_type)), `∀ n : El (nat), (((coq.leibniz.leibniz) at (return_type)) ▪ ((case_S) ▪ n)) ▪ (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ ((S) ▪ n))) ≔ in-∀ₚ (λ return_type, in-∀ (λ case_O : El (return_type),  in-∀ (λ case_S : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type)) (((((match_nat_type) at (return_type)) ▪ case_O) ▪ case_S) ▪ ((S) ▪ n))) ((case_S) ▪ n)) (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (return_type)) (case_O)) (case_S)) (n))))));
constant symbol filter_nat_type : Els (∀ₖ (λ return_, ↑ ((nat ⇝ return_) ⇝ nat ⇝ return_)));
constant symbol axiom_filter_nat_type_O : Prf (`∀ₚ return_type, `∀ return_ : El ((nat ⇝ return_type)), (((coq.connectives.equal) at (return_type)) ▪ ((((filter_nat_type) at (return_type)) ▪ return_) ▪ O)) ▪ ((return_) ▪ O));
symbol eq_filter_nat_type_O : Prf (`∀ₚ return_type, `∀ return_ : El ((nat ⇝ return_type)), (((coq.leibniz.leibniz) at (return_type)) ▪ ((((filter_nat_type) at (return_type)) ▪ return_) ▪ O)) ▪ ((return_) ▪ O)) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type)) ((((filter_nat_type) at (return_type)) ▪ return_) ▪ O)) ((return_) ▪ O)) (el-∀ (el-∀ₚ (axiom_filter_nat_type_O) (return_type)) (return_))));
symbol sym_eq_filter_nat_type_O : Prf (`∀ₚ return_type, `∀ return_ : El ((nat ⇝ return_type)), (((coq.leibniz.leibniz) at (return_type)) ▪ ((return_) ▪ O)) ▪ ((((filter_nat_type) at (return_type)) ▪ return_) ▪ O)) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type)) ((((filter_nat_type) at (return_type)) ▪ return_) ▪ O)) ((return_) ▪ O)) (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (return_type)) (return_))));
constant symbol axiom_filter_nat_type_S : Prf (`∀ₚ return_type, `∀ return_ : El ((nat ⇝ return_type)), `∀ n : El (nat), (((coq.connectives.equal) at (return_type)) ▪ ((((filter_nat_type) at (return_type)) ▪ return_) ▪ ((S) ▪ n))) ▪ ((return_) ▪ ((S) ▪ n)));
symbol eq_filter_nat_type_S : Prf (`∀ₚ return_type, `∀ return_ : El ((nat ⇝ return_type)), `∀ n : El (nat), (((coq.leibniz.leibniz) at (return_type)) ▪ ((((filter_nat_type) at (return_type)) ▪ return_) ▪ ((S) ▪ n))) ▪ ((return_) ▪ ((S) ▪ n))) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_type)) ((((filter_nat_type) at (return_type)) ▪ return_) ▪ ((S) ▪ n))) ((return_) ▪ ((S) ▪ n))) (el-∀ (el-∀ (el-∀ₚ (axiom_filter_nat_type_S) (return_type)) (return_)) (n)))));
symbol sym_eq_filter_nat_type_S : Prf (`∀ₚ return_type, `∀ return_ : El ((nat ⇝ return_type)), `∀ n : El (nat), (((coq.leibniz.leibniz) at (return_type)) ▪ ((return_) ▪ ((S) ▪ n))) ▪ ((((filter_nat_type) at (return_type)) ▪ return_) ▪ ((S) ▪ n))) ≔ in-∀ₚ (λ return_type, in-∀ (λ return_ : El (nat ⇝ return_type),  in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_type)) ((((filter_nat_type) at (return_type)) ▪ return_) ▪ ((S) ▪ n))) ((return_) ▪ ((S) ▪ n))) (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_S) (return_type)) (return_)) (n)))));
constant symbol nat_ind : Prf (`∀ Q : El ((nat ⇝ prop)), ((Q) ▪ O) ⇒ (`∀ x : El (nat), ((Q) ▪ x) ⇒ (Q) ▪ ((S) ▪ x)) ⇒ `∀ x : El (nat), (Q) ▪ x);
symbol pred : Els (↑ (nat ⇝ nat)) ≔ `λ' n : El (nat), ((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ n;
symbol not_zero : Els (↑ (nat ⇝ prop)) ≔ `λ' n : El (nat), ((((match_nat_type) at (prop)) ▪ coq.connectives.False) ▪ (`λ' p : El (nat), coq.connectives.True)) ▪ n;
constant symbol le : Els (↑ (nat ⇝ nat ⇝ prop));
constant symbol le_n : Prf (`∀ n : El (nat), ((le) ▪ n) ▪ n);
constant symbol le_S : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ ((le) ▪ n) ▪ ((S) ▪ m));
constant symbol match_le_prop : Prf (`∀ n : El (nat), `∀ return_ : El ((nat ⇝ prop)), ((return_) ▪ n) ⇒ (`∀ m : El (nat), (return_) ▪ ((S) ▪ m)) ⇒ `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ (return_) ▪ m);
constant symbol le_ind : Prf (`∀ n : El (nat), `∀ Q : El ((nat ⇝ prop)), ((Q) ▪ n) ⇒ (`∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ ((Q) ▪ m) ⇒ (Q) ▪ ((S) ▪ m)) ⇒ `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ (Q) ▪ m);
symbol lt : Els (↑ (nat ⇝ nat ⇝ prop)) ≔ `λ' n : El (nat), `λ' m : El (nat), ((le) ▪ ((S) ▪ n)) ▪ m;
constant symbol plus : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol plus_body : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol axiom_plus : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((plus) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ n));
symbol eq_plus : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((plus) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((plus) ▪ n)) ((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ n)) (el-∀ (axiom_plus) (n)));
symbol sym_eq_plus : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ n)) ▪ ((plus) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((plus) ▪ n)) ((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ n)) (el-∀ (eq_plus) (n)));
constant symbol axiom_plus_body_O : Prf ((((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((plus_body) ▪ O)) ▪ (`λ' m : El (nat), m));
symbol eq_plus_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((plus_body) ▪ O)) ▪ (`λ' m : El (nat), m)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((plus_body) ▪ O)) (`λ' m : El (nat), m)) (axiom_plus_body_O);
symbol sym_eq_plus_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ (`λ' m : El (nat), m)) ▪ ((plus_body) ▪ O)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((plus_body) ▪ O)) (`λ' m : El (nat), m)) (eq_plus_body_O);
constant symbol axiom_plus_body_S : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((plus_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), (S) ▪ (((plus) ▪ n) ▪ m)));
symbol eq_plus_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((plus_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), (S) ▪ (((plus) ▪ n) ▪ m))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((plus_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), (S) ▪ (((plus) ▪ n) ▪ m))) (el-∀ (axiom_plus_body_S) (n)));
symbol sym_eq_plus_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ (`λ' m : El (nat), (S) ▪ (((plus) ▪ n) ▪ m))) ▪ ((plus_body) ▪ ((S) ▪ n))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((plus_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), (S) ▪ (((plus) ▪ n) ▪ m))) (el-∀ (eq_plus_body_S) (n)));
constant symbol times : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol times_body : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol axiom_times : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((times) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ n));
symbol eq_times : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((times) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((times) ▪ n)) ((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ n)) (el-∀ (axiom_times) (n)));
symbol sym_eq_times : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ n)) ▪ ((times) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((times) ▪ n)) ((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ n)) (el-∀ (eq_times) (n)));
constant symbol axiom_times_body_O : Prf ((((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((times_body) ▪ O)) ▪ (`λ' m : El (nat), O));
symbol eq_times_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((times_body) ▪ O)) ▪ (`λ' m : El (nat), O)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((times_body) ▪ O)) (`λ' m : El (nat), O)) (axiom_times_body_O);
symbol sym_eq_times_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ (`λ' m : El (nat), O)) ▪ ((times_body) ▪ O)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((times_body) ▪ O)) (`λ' m : El (nat), O)) (eq_times_body_O);
constant symbol axiom_times_body_S : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((times_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((plus) ▪ m) ▪ (((times) ▪ n) ▪ m)));
symbol eq_times_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((times_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((times_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) (el-∀ (axiom_times_body_S) (n)));
symbol sym_eq_times_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ (`λ' m : El (nat), ((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) ▪ ((times_body) ▪ ((S) ▪ n))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((times_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) (el-∀ (eq_times_body_S) (n)));
constant symbol minus : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol minus_body : Els (↑ (nat ⇝ nat ⇝ nat));
constant symbol axiom_minus : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((minus) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ n));
symbol eq_minus : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((minus) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((minus) ▪ n)) ((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ n)) (el-∀ (axiom_minus) (n)));
symbol sym_eq_minus : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ n)) ▪ ((minus) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((minus) ▪ n)) ((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ n)) (el-∀ (eq_minus) (n)));
constant symbol axiom_minus_body_O : Prf ((((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((minus_body) ▪ O)) ▪ (`λ' m : El (nat), O));
symbol eq_minus_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((minus_body) ▪ O)) ▪ (`λ' m : El (nat), O)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((minus_body) ▪ O)) (`λ' m : El (nat), O)) (axiom_minus_body_O);
symbol sym_eq_minus_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ (`λ' m : El (nat), O)) ▪ ((minus_body) ▪ O)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((minus_body) ▪ O)) (`λ' m : El (nat), O)) (eq_minus_body_O);
constant symbol axiom_minus_body_S : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ nat)) ▪ ((minus_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ m));
symbol eq_minus_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ ((minus_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ m)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ nat)) ((minus_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ m)) (el-∀ (axiom_minus_body_S) (n)));
symbol sym_eq_minus_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ nat)) ▪ (`λ' m : El (nat), ((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ m)) ▪ ((minus_body) ▪ ((S) ▪ n))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ nat)) ((minus_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ m)) (el-∀ (eq_minus_body_S) (n)));
symbol nat_case : Prf (`∀ n : El (nat), `∀ P : El ((nat ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ n) ▪ O) ⇒ (P) ▪ O) ⇒ (`∀ m : El (nat), ((((coq.logic.eq) at (nat)) ▪ n) ▪ ((S) ▪ m)) ⇒ (P) ▪ ((S) ▪ m)) ⇒ (P) ▪ n) ≔ in-∀ (λ n : El (nat),  in-∀ (λ P : El (nat ⇝ prop),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((((coq.logic.eq) at (nat)) ▪ _x_365) ▪ O) ⇒ (P) ▪ O) ⇒ (`∀ m : El (nat), ((((coq.logic.eq) at (nat)) ▪ _x_365) ▪ ((S) ▪ m)) ⇒ (P) ▪ ((S) ▪ m)) ⇒ (P) ▪ _x_365)) (in-⇒ (λ auto : Prf (((((coq.logic.eq) at (nat)) ▪ O) ▪ O) ⇒ (P) ▪ O), in-⇒ (λ auto' : Prf (`∀ m : El (nat), ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ m)) ⇒ (P) ▪ ((S) ▪ m)), el-⇒ (auto) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O)))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf ((((((coq.logic.eq) at (nat)) ▪ x_366) ▪ O) ⇒ (P) ▪ O) ⇒ (`∀ m : El (nat), ((((coq.logic.eq) at (nat)) ▪ x_366) ▪ ((S) ▪ m)) ⇒ (P) ▪ ((S) ▪ m)) ⇒ (P) ▪ x_366), in-⇒ (λ auto : Prf (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ x_366)) ▪ O) ⇒ (P) ▪ O), in-⇒ (λ auto' : Prf (`∀ m : El (nat), ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ m)) ⇒ (P) ▪ ((S) ▪ m)), el-⇒ (el-∀ (auto') (x_366)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ x_366)))))))) (n)));
symbol nat_elim2 : Prf (`∀ R : El ((nat ⇝ nat ⇝ prop)), (`∀ n : El (nat), ((R) ▪ O) ▪ n) ⇒ (`∀ n : El (nat), ((R) ▪ ((S) ▪ n)) ▪ O) ⇒ (`∀ n : El (nat), `∀ m : El (nat), (((R) ▪ n) ▪ m) ⇒ ((R) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ `∀ n : El (nat), `∀ m : El (nat), ((R) ▪ n) ▪ m) ≔ in-∀ (λ R : El (nat ⇝ nat ⇝ prop),  in-⇒ (λ ROn : Prf (`∀ n : El (nat), ((R) ▪ O) ▪ n), in-⇒ (λ RSO : Prf (`∀ n : El (nat), ((R) ▪ ((S) ▪ n)) ▪ O), in-⇒ (λ RSS : Prf (`∀ n : El (nat), `∀ m : El (nat), (((R) ▪ n) ▪ m) ⇒ ((R) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)), in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ m : El (nat), ((R) ▪ _x_365) ▪ m)) (in-∀ (λ m : El (nat),  el-∀ (ROn) (m)))) (in-∀ (λ n0 : El (nat),  in-⇒ (λ Rn0m : Prf (`∀ m : El (nat), ((R) ▪ n0) ▪ m), in-∀ (λ m : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), ((R) ▪ ((S) ▪ n0)) ▪ __)) (el-∀ (RSO) (n0))) (in-∀ (λ auto : El (nat),  el-⇒ (el-∀ (el-∀ (RSS) (n0)) (auto)) (el-∀ (Rn0m) (auto))))) (m)))))) (n))))));
symbol le_gen : Prf (`∀ P : El ((nat ⇝ prop)), `∀ n : El (nat), (`∀ i : El (nat), (((le) ▪ i) ▪ n) ⇒ (P) ▪ i) ⇒ (P) ▪ n) ≔ in-∀ (λ P : El (nat ⇝ prop),  in-∀ (λ n : El (nat),  in-⇒ (λ auto : Prf (`∀ i : El (nat), (((le) ▪ i) ▪ n) ⇒ (P) ▪ i), el-⇒ (el-∀ (auto) (n)) (el-∀ (le_n) (n)))));
symbol pred_Sn : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ ((pred) ▪ ((S) ▪ n))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) (O)) (`λ' p : El (nat), p)) (n)) (`λ' y : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ y)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n)));
symbol injective_S : Prf ((((coq.relations.injective_) at (nat)) at (nat)) ▪ S) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ x)) ▪ ((S) ▪ y)), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (y)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ y)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (y))) (x)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) ((pred) ▪ ((S) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ y) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) ((S) ▪ y)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ y) ▪ ((pred) ▪ __))) (el-∀ (pred_Sn) (y))) ((S) ▪ x)) (auto))) (x)) (el-∀ (pred_Sn) (x))))));
symbol S_pred : Prf (`∀ n : El (nat), (((lt) ▪ O) ▪ n) ⇒ (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((pred) ▪ n))) ▪ n) ≔ in-∀ (λ n : El (nat),  in-⇒ (λ posn : Prf (((lt) ▪ O) ▪ n), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (match_le_prop) ((S) ▪ O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((pred) ▪ __))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ __)) ▪ ((S) ▪ O))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ O))) ((pred) ▪ ((S) ▪ O))) (el-∀ (pred_Sn) (O)))) (in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ __)) ▪ ((S) ▪ m))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ m))) ((pred) ▪ ((S) ▪ m))) (el-∀ (pred_Sn) (m))))) (n)) (posn)));
symbol plus_O_n : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ O) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ n) ▪ ((y) ▪ n))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ n) ▪ ((y) ▪ n))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ n) ▪ ((y) ▪ n))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n)))));
symbol plus_n_O : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ n) ▪ O)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((coq.logic.eq) at (nat)) ▪ _x_365) ▪ (((plus) ▪ _x_365) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ O))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O)))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf ((((coq.logic.eq) at (nat)) ▪ x_366) ▪ (((plus) ▪ x_366) ▪ O)), el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ x_366)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ x_366)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ x_366)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (x_366)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ x_366))) (((plus) ▪ x_366) ▪ O)) (_x_368)))))))) (n));
symbol plus_n_Sm : Prf (`∀ n : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((plus) ▪ n) ▪ m))) ▪ (((plus) ▪ n) ▪ ((S) ▪ m))) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((plus) ▪ _x_365) ▪ m))) ▪ (((plus) ▪ _x_365) ▪ ((S) ▪ m)))) (in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((y) ▪ m))) ▪ (((plus) ▪ O) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((y) ▪ m))) ▪ (((plus_body) ▪ O) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((y) ▪ m))) ▪ (((plus_body) ▪ O) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ m)) ▪ ((y) ▪ ((S) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ m)))))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ m))) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m))), in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((y) ▪ m))) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ x_366)) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ x_366)) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((y) ▪ m))) ▪ (((plus_body) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((y) ▪ m))) ▪ (((plus_body) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ m)))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ __)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ ((S) ▪ m)))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ ((S) ▪ m)))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ ((S) ▪ m)))) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ ((S) ▪ m))))) ((S) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m)))) (el-∀ (_x_368) ((S) ▪ m)))) ((S) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m)))) (el-∀ (_x_368) ((S) ▪ m)))) ((S) ▪ (((plus) ▪ x_366) ▪ m))) (el-∀ (_x_368) (m))))))))))))) (n));
symbol commutative_plus : Prf (((coq.relations.commutative_) at (nat)) ▪ plus) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ y : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ _x_365) ▪ y)) ▪ (((plus) ▪ y) ▪ _x_365))) (in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((plus) ▪ y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((plus) ▪ y) ▪ O))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((plus) ▪ y) ▪ O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (y)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ y) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (y))) (((plus) ▪ y) ▪ O)) (el-∀ (plus_n_O) (y)))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ y : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ y)) ▪ (((plus) ▪ y) ▪ x_366)), in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ y))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ y) ▪ ((S) ▪ x_366))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (((plus) ▪ x_366) ▪ ((S) ▪ y))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ (((plus) ▪ x_366) ▪ y))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ y) ▪ x_366)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ __)) ▪ (((plus) ▪ y) ▪ ((S) ▪ x_366)))) (el-∀ (el-∀ (plus_n_Sm) (y)) (x_366))) (((plus) ▪ x_366) ▪ y)) (el-∀ (_x_368) (y)))) (((plus) ▪ x_366) ▪ ((S) ▪ y))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (y))))) ((S) ▪ (((plus) ▪ x_366) ▪ y))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (y)))))))))) (n));
symbol associative_plus : Prf (((coq.relations.associative_) at (nat)) ▪ plus) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus) ▪ _x_365) ▪ y)) ▪ z)) ▪ (((plus) ▪ _x_365) ▪ (((plus) ▪ y) ▪ z)))) (in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus) ▪ O) ▪ y)) ▪ z)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus_body) ▪ O) ▪ y)) ▪ z)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus_body) ▪ O) ▪ y)) ▪ z)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((x) ▪ y)) ▪ z)) ▪ (((plus) ▪ y) ▪ z))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ y) ▪ z))))))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus) ▪ x_366) ▪ y)) ▪ z)) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))), in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ y)) ▪ z)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ z)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((plus_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ z)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((x) ▪ y)) ▪ z)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ (((plus) ▪ x_366) ▪ y))) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ z)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (((plus) ▪ x_366) ▪ y)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ z)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (((plus) ▪ x_366) ▪ y)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ z)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ __)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) (((plus) ▪ (((plus) ▪ x_366) ▪ y)) ▪ z)) (el-∀ (el-∀ (_x_368) (y)) (z))))))))))))))))) (n));
symbol assoc_plus1 : Prf (`∀ a : El (nat), `∀ b : El (nat), `∀ c : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ c) ▪ (((plus) ▪ b) ▪ a))) ▪ (((plus) ▪ (((plus) ▪ b) ▪ c)) ▪ a)) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ b)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ c) ▪ __)) ▪ (((plus) ▪ (((plus) ▪ b) ▪ c)) ▪ a))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ c) ▪ (((plus) ▪ a) ▪ b))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((plus) ▪ a) ▪ (((plus) ▪ b) ▪ c)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ a) ▪ (((plus) ▪ b) ▪ c)))) (((plus) ▪ c) ▪ (((plus) ▪ a) ▪ b))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ (((plus) ▪ a) ▪ b)) ▪ c)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ c) ▪ (((plus) ▪ a) ▪ b))) ▪ __)) (el-∀ (el-∀ (commutative_plus) (c)) (((plus) ▪ a) ▪ b))) (((plus) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (el-∀ (el-∀ (el-∀ (associative_plus) (a)) (b)) (c))))) (((plus) ▪ (((plus) ▪ b) ▪ c)) ▪ a)) (el-∀ (el-∀ (commutative_plus) (((plus) ▪ b) ▪ c)) (a)))) (((plus) ▪ b) ▪ a)) (el-∀ (el-∀ (commutative_plus) (b)) (a)))));
symbol injective_plus_r : Prf (`∀ n : El (nat), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), ((plus) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), ((plus) ▪ _x_365) ▪ m))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), (y) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), (y) ▪ m))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), (y) ▪ m))) (in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ x) ▪ y), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (x)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ x) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (x))) (y)) (auto))))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ x : El (nat), `∀ y : El (nat), ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ x)) ▪ (((plus) ▪ x_366) ▪ y)) ⇒ (((coq.logic.eq) at (nat)) ▪ x) ▪ y), el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), (y) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), (y) ▪ m))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.relations.injective_) at (nat)) at (nat)) ▪ (`λ' m : El (nat), (y) ▪ m))) (in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ x))) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ y))), el-⇒ (el-∀ (el-∀ (_x_368) (x)) (y)) (el-⇒ (el-∀ (el-∀ (injective_S) (((plus) ▪ x_366) ▪ x)) (((plus) ▪ x_366) ▪ y)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ y)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ y))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ x))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ x))) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ x)))) (((plus) ▪ x_366) ▪ ((S) ▪ y))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ (((plus) ▪ x_366) ▪ y))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ x))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ (((plus) ▪ x_366) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ y)))) (auto)) (((plus) ▪ x_366) ▪ ((S) ▪ x))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (x)))) (((plus) ▪ x_366) ▪ ((S) ▪ y))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (y))))) ((S) ▪ (((plus) ▪ x_366) ▪ y))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (y)))) ((S) ▪ (((plus) ▪ x_366) ▪ x))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (x)))))))))))))) (n));
symbol times_Sn_m : Prf (`∀ n : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) ▪ (((times) ▪ ((S) ▪ n)) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) ▪ ((y) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) ▪ ((y) ▪ m))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((times) ▪ n) ▪ m))) ▪ ((y) ▪ m))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ m) ▪ (((times) ▪ n) ▪ m)))))));
symbol times_O_n : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((times) ▪ O) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ n))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ n))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ n))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O)))));
symbol times_n_O : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((times) ▪ n) ▪ O)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((times) ▪ _x_365) ▪ O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))) (((times) ▪ O) ▪ O)) (el-∀ (times_O_n) (O)))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf ((((coq.logic.eq) at (nat)) ▪ O) ▪ (((times) ▪ x_366) ▪ O)), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ O) ▪ (((times) ▪ x_366) ▪ O))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((plus) ▪ O) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))) (((plus) ▪ O) ▪ O)) (el-∀ (plus_O_n) (O)))) (((times) ▪ x_366) ▪ O)) (_x_368))) (((times) ▪ ((S) ▪ x_366)) ▪ O)) (el-∀ (el-∀ (times_Sn_m) (x_366)) (O)))))) (n));
symbol times_n_Sm : Prf (`∀ n : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ n) ▪ (((times) ▪ n) ▪ m))) ▪ (((times) ▪ n) ▪ ((S) ▪ m))) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ _x_365) ▪ (((times) ▪ _x_365) ▪ m))) ▪ (((times) ▪ _x_365) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ O) ▪ (((times) ▪ O) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ O) ▪ ((y) ▪ m))) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ O) ▪ ((y) ▪ m))) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ O) ▪ (((times_body) ▪ O) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ O) ▪ (((times_body) ▪ O) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ O) ▪ ((y) ▪ m))) ▪ O)) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ O)) ▪ O)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ O)) ▪ O)) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ O)) ▪ O)) (in-∀ (λ _m : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))))))))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ (((times) ▪ x_366) ▪ m))) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))), in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ (((times) ▪ ((S) ▪ x_366)) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ ((y) ▪ m))) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ ((y) ▪ m))) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ ((y) ▪ m))) ▪ (((plus) ▪ ((S) ▪ m)) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))) ▪ (((plus) ▪ ((S) ▪ m)) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))) ▪ (((plus) ▪ ((S) ▪ m)) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))) ▪ (((plus) ▪ ((S) ▪ m)) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ m)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) ▪ ((y) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (m)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) ▪ ((y) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) ▪ ((y) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ ((S) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m)))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ ((S) ▪ (((times) ▪ x_366) ▪ m)))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ __)) ▪ ((S) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ ((S) ▪ m)))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ x_366) ▪ (((times) ▪ x_366) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ ((S) ▪ (((times) ▪ x_366) ▪ m))))) ▪ ((S) ▪ (((plus) ▪ m) ▪ __)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ ((S) ▪ (((times) ▪ x_366) ▪ m))))) ▪ ((S) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ ((S) ▪ (((times) ▪ x_366) ▪ m))))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ ((S) ▪ (((times) ▪ x_366) ▪ m)))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ ((S) ▪ (((times) ▪ x_366) ▪ m))))) ▪ (((plus) ▪ x_366) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ ((S) ▪ (((times) ▪ x_366) ▪ m)))))) ((S) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))) (el-∀ (el-∀ (plus_n_Sm) (m)) (((times) ▪ x_366) ▪ m)))) ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) (((plus) ▪ m) ▪ (((plus) ▪ x_366) ▪ (((times) ▪ x_366) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ (((plus) ▪ x_366) ▪ m)) ▪ (((times) ▪ x_366) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((plus) ▪ x_366) ▪ (((times) ▪ x_366) ▪ m)))) ▪ __)) (el-∀ (el-∀ (el-∀ (assoc_plus1) (((times) ▪ x_366) ▪ m)) (x_366)) (m))) (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))) (el-∀ (el-∀ (el-∀ (associative_plus) (x_366)) (m)) (((times) ▪ x_366) ▪ m))))) (((times) ▪ x_366) ▪ ((S) ▪ m))) (el-∀ (_x_368) (m)))) ((S) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))) (el-∀ (el-∀ (plus_n_Sm) (m)) (((times) ▪ x_366) ▪ m)))) ((S) ▪ (((plus) ▪ x_366) ▪ (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m))))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (((plus) ▪ m) ▪ (((times) ▪ x_366) ▪ m)))))))))))))))))))) (n));
symbol commutative_times : Prf (((coq.relations.commutative_) at (nat)) ▪ times) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ y : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ _x_365) ▪ y)) ▪ (((times) ▪ y) ▪ _x_365))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' y : El ((nat ⇝ nat)), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ z)) ▪ (((times) ▪ z) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' y : El ((nat ⇝ nat)), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ z)) ▪ (((times) ▪ z) ▪ O))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' y : El ((nat ⇝ nat)), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ z)) ▪ (((times) ▪ z) ▪ O))) (in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))) (((times) ▪ y) ▪ O)) (el-∀ (times_n_O) (y)))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ y : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((times) ▪ y) ▪ x_366)), in-∀ (λ y : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((times) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((times) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' z : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((z) ▪ y)) ▪ (((times) ▪ y) ▪ ((S) ▪ x_366)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ y) ▪ (((times) ▪ y) ▪ x_366))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((times) ▪ x_366) ▪ y)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y))) ▪ (((plus) ▪ y) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y)))) (((times) ▪ y) ▪ x_366)) (el-∀ (_x_368) (y)))) (((times) ▪ y) ▪ ((S) ▪ x_366))) (el-∀ (el-∀ (times_n_Sm) (y)) (x_366)))))))))) (n));
symbol distributive_times_plus : Prf ((((coq.relations.distributive) at (nat)) ▪ times) ▪ plus) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ _x_365) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times) ▪ _x_365) ▪ y)) ▪ (((times) ▪ _x_365) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ O) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times) ▪ O) ▪ y)) ▪ ((x) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ O) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ ((x) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ O) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ ((x) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ O) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times_body) ▪ O) ▪ y)) ▪ ((x) ▪ z)))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ O) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times_body) ▪ O) ▪ y)) ▪ ((x) ▪ z)))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ O) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ ((x) ▪ y)) ▪ O))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ O) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((x) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((x) ▪ O))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((x) ▪ O))) (in-∀ (λ _y : El (nat),  in-∀ (λ _z : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))))))))))))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((times) ▪ x_366) ▪ z))), in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times) ▪ ((S) ▪ x_366)) ▪ y)) ▪ ((x) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ ((x) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ ((x) ▪ y)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ ((x) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ ((x) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ ((x) ▪ y)) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z))))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ (((plus) ▪ y) ▪ z))) ▪ (((plus) ▪ (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y))) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ y) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((plus) ▪ (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y))) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ y) ▪ (((plus) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z))))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ y) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ z) ▪ (((plus) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((times) ▪ x_366) ▪ z)))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ y) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) ▪ (((plus) ▪ y) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ y) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z))))) ▪ (((plus) ▪ y) ▪ (((plus) ▪ z) ▪ __)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ y) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z)))))) (((plus) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((times) ▪ x_366) ▪ z))) (el-∀ (el-∀ (_x_368) (y)) (z)))) (((plus) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ y))) ▪ (((times) ▪ x_366) ▪ z))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z)))) ▪ __)) (el-∀ (el-∀ (el-∀ (assoc_plus1) (((times) ▪ x_366) ▪ z)) (z)) (((times) ▪ x_366) ▪ y))) (((plus) ▪ z) ▪ (((plus) ▪ (((times) ▪ x_366) ▪ y)) ▪ (((times) ▪ x_366) ▪ z)))) (el-∀ (el-∀ (el-∀ (associative_plus) (z)) (((times) ▪ x_366) ▪ y)) (((times) ▪ x_366) ▪ z))))) (((plus) ▪ (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y))) ▪ (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z)))) (el-∀ (el-∀ (el-∀ (associative_plus) (y)) (((times) ▪ x_366) ▪ y)) (((plus) ▪ z) ▪ (((times) ▪ x_366) ▪ z))))) (((plus) ▪ (((plus) ▪ y) ▪ z)) ▪ (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z)))) (el-∀ (el-∀ (el-∀ (associative_plus) (y)) (z)) (((times) ▪ x_366) ▪ (((plus) ▪ y) ▪ z)))))))))))))))))) (n));
symbol distributive_times_plus_r : Prf (`∀ a : El (nat), `∀ b : El (nat), `∀ c : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((plus) ▪ b) ▪ c)) ▪ a)) ▪ (((plus) ▪ (((times) ▪ b) ▪ a)) ▪ (((times) ▪ c) ▪ a))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((plus) ▪ (((times) ▪ b) ▪ a)) ▪ (((times) ▪ c) ▪ a)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ a) ▪ b)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ a) ▪ (((plus) ▪ b) ▪ c))) ▪ (((plus) ▪ __) ▪ (((times) ▪ c) ▪ a)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ a) ▪ c)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ a) ▪ (((plus) ▪ b) ▪ c))) ▪ (((plus) ▪ (((times) ▪ a) ▪ b)) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((times) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ a) ▪ (((plus) ▪ b) ▪ c))) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((times) ▪ a) ▪ (((plus) ▪ b) ▪ c)))) (((plus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c))) (el-∀ (el-∀ (el-∀ (distributive_times_plus) (a)) (b)) (c)))) (((times) ▪ c) ▪ a)) (el-∀ (el-∀ (commutative_times) (c)) (a)))) (((times) ▪ b) ▪ a)) (el-∀ (el-∀ (commutative_times) (b)) (a)))) (((times) ▪ (((plus) ▪ b) ▪ c)) ▪ a)) (el-∀ (el-∀ (commutative_times) (((plus) ▪ b) ▪ c)) (a)))));
symbol associative_times : Prf (((coq.relations.associative_) at (nat)) ▪ times) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times) ▪ _x_365) ▪ y)) ▪ z)) ▪ (((times) ▪ _x_365) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times) ▪ O) ▪ y)) ▪ z)) ▪ ((x) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times_body) ▪ O) ▪ y)) ▪ z)) ▪ ((x) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times_body) ▪ O) ▪ y)) ▪ z)) ▪ ((x) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((x) ▪ y)) ▪ z)) ▪ O)) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ z)) ▪ O)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ z)) ▪ O)) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' x : El ((nat ⇝ nat)), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ ((x) ▪ z)) ▪ O)) (in-∀ (λ _y : El (nat),  in-∀ (λ _z : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O)))))))))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times) ▪ x_366) ▪ y)) ▪ z)) ▪ (((times) ▪ x_366) ▪ (((times) ▪ y) ▪ z))), in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times) ▪ ((S) ▪ x_366)) ▪ y)) ▪ z)) ▪ ((x) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((x) ▪ y)) ▪ z)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ x_366)) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ z)) ▪ ((x) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((times_body) ▪ ((S) ▪ x_366)) ▪ y)) ▪ z)) ▪ ((x) ▪ (((times) ▪ y) ▪ z)))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (x_366)) (`λ' x : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ ((x) ▪ y)) ▪ z)) ▪ (((plus) ▪ (((times) ▪ y) ▪ z)) ▪ (((times) ▪ x_366) ▪ (((times) ▪ y) ▪ z))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ (((times) ▪ y) ▪ z)) ▪ (((times) ▪ x_366) ▪ (((times) ▪ y) ▪ z)))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((plus) ▪ (((times) ▪ y) ▪ z)) ▪ (((times) ▪ x_366) ▪ (((times) ▪ y) ▪ z))))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ (((times) ▪ y) ▪ z)) ▪ (((times) ▪ x_366) ▪ (((times) ▪ y) ▪ z))))) (((times) ▪ (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y))) ▪ z)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((times) ▪ (((times) ▪ x_366) ▪ y)) ▪ z)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ (((plus) ▪ y) ▪ (((times) ▪ x_366) ▪ y))) ▪ z)) ▪ (((plus) ▪ (((times) ▪ y) ▪ z)) ▪ __))) (el-∀ (el-∀ (el-∀ (distributive_times_plus_r) (z)) (y)) (((times) ▪ x_366) ▪ y))) (((times) ▪ x_366) ▪ (((times) ▪ y) ▪ z))) (el-∀ (el-∀ (_x_368) (y)) (z))))))))))))))) (n));
symbol times_times : Prf (`∀ x : El (nat), `∀ y : El (nat), `∀ z : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ x) ▪ (((times) ▪ y) ▪ z))) ▪ (((times) ▪ y) ▪ (((times) ▪ x) ▪ z))) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-∀ (λ z : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ y) ▪ (((times) ▪ x) ▪ z))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((times) ▪ y) ▪ (((times) ▪ x) ▪ z)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((times) ▪ y) ▪ (((times) ▪ x) ▪ z)))) (((times) ▪ x) ▪ (((times) ▪ y) ▪ z))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((times) ▪ (((times) ▪ x) ▪ y)) ▪ z)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((times) ▪ y) ▪ (((times) ▪ x) ▪ z)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((times) ▪ y) ▪ x)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ __) ▪ z)) ▪ (((times) ▪ y) ▪ (((times) ▪ x) ▪ z)))) (el-∀ (el-∀ (el-∀ (associative_times) (y)) (x)) (z))) (((times) ▪ x) ▪ y)) (el-∀ (el-∀ (commutative_times) (y)) (x)))) (((times) ▪ x) ▪ (((times) ▪ y) ▪ z))) (el-∀ (el-∀ (el-∀ (associative_times) (x)) (y)) (z))))));
symbol times_n_1 : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ (((times) ▪ n) ▪ ((S) ▪ O))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ n) ▪ (((times) ▪ n) ▪ O))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ n) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n))) (((plus) ▪ n) ▪ O)) (el-∀ (plus_n_O) (n)))) (((times) ▪ n) ▪ O)) (el-∀ (times_n_O) (n)))) (((times) ▪ n) ▪ ((S) ▪ O))) (el-∀ (el-∀ (times_n_Sm) (n)) (O)));
symbol minus_S_S : Prf (`∀ n : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ▪ (((minus) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat)) ((S) ▪ n)) (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) (m)) (`λ' y : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ▪ y)) (el-⇒ (el-∀ (el-∀ (eq_minus_body_S) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (eq_minus) ((S) ▪ n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ▪ ((y) ▪ ((S) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))))))));
symbol minus_O_n : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((minus) ▪ O) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((minus) ▪ O) ▪ __))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (minus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (sym_eq_minus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ O))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O)))))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O)) (`λ' y : El ((nat ⇝ nat)), `∀ n0 : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ ((S) ▪ n0)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (minus_body)) (`λ' y : El ((nat ⇝ nat)), `∀ n0 : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ ((S) ▪ n0)))) (el-⇒ (el-∀ (sym_eq_minus_body_O) (`λ' y : El ((nat ⇝ nat)), `∀ n0 : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ ((y) ▪ ((S) ▪ n0)))) (in-∀ (λ auto : El (nat),  el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))))))) (n));
symbol minus_n_O : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ n) ▪ O)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((minus) ▪ __) ▪ O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))) (((minus) ▪ O) ▪ O)) (el-∀ (minus_O_n) (O)))) (in-∀ (λ auto : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ auto)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ auto)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (auto)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ auto)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (auto)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ auto)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat)) ((S) ▪ auto)) (`λ' q : El (nat), ((minus) ▪ auto) ▪ q)) (`λ' y : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ auto)) ▪ y)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ auto)))))))) (n));
symbol minus_n_n : Prf (`∀ n : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((minus) ▪ n) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ (((minus) ▪ _x_365) ▪ _x_365))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))) (((minus) ▪ O) ▪ O)) (el-∀ (minus_O_n) (O)))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf ((((coq.logic.eq) at (nat)) ▪ O) ▪ (((minus) ▪ x_366) ▪ x_366)), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((minus) ▪ x_366) ▪ x_366)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))) (((minus) ▪ x_366) ▪ x_366)) (_x_368))) (((minus) ▪ ((S) ▪ x_366)) ▪ ((S) ▪ x_366))) (el-∀ (el-∀ (minus_S_S) (x_366)) (x_366)))))) (n));
symbol eq_minus_S_pred : Prf (`∀ n : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ __) ▪ ((S) ▪ _0))) ▪ ((pred) ▪ (((minus) ▪ __) ▪ _0)))) (in-∀ (λ _n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ O) ▪ ((S) ▪ _n))) ▪ ((pred) ▪ ((y) ▪ _n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ _n))) ▪ ((pred) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ O) ▪ _n)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (minus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ _n))) ▪ ((pred) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ O) ▪ _n)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (minus_body)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus_body) ▪ O) ▪ ((S) ▪ _n))) ▪ ((pred) ▪ ((y) ▪ _n)))) (el-⇒ (el-∀ (sym_eq_minus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus_body) ▪ O) ▪ ((S) ▪ _n))) ▪ ((pred) ▪ ((y) ▪ _n)))) (el-⇒ (el-∀ (sym_eq_minus_body_O) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ _n))) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat)) (O)) (`λ' p : El (nat), p)) (`λ' y : El (nat), (((coq.logic.eq) at (nat)) ▪ O) ▪ y)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))))))))))) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ O))) ▪ ((pred) ▪ ((y) ▪ O)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ O))) ▪ ((pred) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ ((S) ▪ n)) ▪ O)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ O))) ▪ ((pred) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ ((S) ▪ n)) ▪ O)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus_body) ▪ ((S) ▪ n)) ▪ ((S) ▪ O))) ▪ ((pred) ▪ ((y) ▪ O)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ (((minus_body) ▪ ((S) ▪ n)) ▪ ((S) ▪ O))) ▪ ((pred) ▪ ((y) ▪ O)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n)) (`λ' y : El ((nat ⇝ nat)), (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ O))) ▪ ((pred) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ O)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ n)) (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) (O)) (`λ' y : El (nat), (((coq.logic.eq) at (nat)) ▪ y) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ O)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat)) ((S) ▪ n)) (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) (`λ' y : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ O)) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ y))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) (O)) (`λ' q : El (nat), q)) (n)) (`λ' y : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ O)) ▪ y)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ n)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n))) (((minus) ▪ n) ▪ O)) (el-∀ (minus_n_O) (n)))))))))))))) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ n)) (`λ' y : El ((nat ⇝ nat)), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ ((S) ▪ n)) ▪ ((S) ▪ ((S) ▪ m)))) ▪ ((pred) ▪ ((y) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ n)) (`λ' y : El ((nat ⇝ nat)), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ ((S) ▪ m)))) ▪ ((pred) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (n)) (`λ' y : El ((nat ⇝ nat)), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ ((S) ▪ m)))) ▪ ((pred) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (n)) (`λ' y : El ((nat ⇝ nat)), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ (((minus_body) ▪ ((S) ▪ n)) ▪ ((S) ▪ ((S) ▪ m)))) ▪ ((pred) ▪ ((y) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n)) (`λ' y : El ((nat ⇝ nat)), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ (((minus_body) ▪ ((S) ▪ n)) ▪ ((S) ▪ ((S) ▪ m)))) ▪ ((pred) ▪ ((y) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (n)) (`λ' y : El ((nat ⇝ nat)), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ ((y) ▪ ((S) ▪ ((S) ▪ m)))) ▪ ((pred) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ n)) (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ((S) ▪ m)) (`λ' y : El (nat), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ y) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ n)) ▪ (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ n)) (`λ' q : El (nat), ((minus) ▪ n) ▪ q)) (m)) (`λ' y : El (nat), ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ ((pred) ▪ (((minus) ▪ n) ▪ m))) ⇒ (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ y))) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ ((S) ▪ m))) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ (((minus) ▪ n) ▪ m))), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ (((minus) ▪ n) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ (((minus) ▪ n) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ (((minus) ▪ n) ▪ m)))) (((minus) ▪ n) ▪ ((S) ▪ m))) (auto)))))))))))));
symbol not_eq_S : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) (in-⇒ (λ auto' : Prf ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ m)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (m))) (n)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) ((pred) ▪ ((S) ▪ n))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ m) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) ((S) ▪ m)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ m) ▪ ((pred) ▪ __))) (el-∀ (pred_Sn) (m))) ((S) ▪ n)) (auto'))) (n)) (el-∀ (pred_Sn) (n)))))) (auto))));
symbol not_eq_O_S : Prf (`∀ n : El (nat), (coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ n))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (coq.connectives.nmk) ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ n))) (in-⇒ (λ eqOS : Prf ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ n)), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (prop)) (coq.connectives.False)) (`λ' p : El (nat), coq.connectives.True)) (`λ' y : El (prop), y)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat)) ((S) ▪ n)) (`λ' x : El (nat), (not_zero) ▪ x)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (prop)) (coq.connectives.False)) (`λ' p : El (nat), coq.connectives.True)) (n)) (`λ' y : El (prop), y)) (coq.connectives.I))) (O)) (eqOS)))));
symbol lt_to_not_zero : Prf (`∀ n : El (nat), `∀ m : El (nat), (((lt) ▪ n) ▪ m) ⇒ (not_zero) ▪ m) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ Hlt : Prf (((lt) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) ((S) ▪ n)) (`λ' x_417 : El (nat), (not_zero) ▪ x_417)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (prop)) (coq.connectives.False)) (`λ' p : El (nat), coq.connectives.True)) (n)) (`λ' y : El (prop), y)) (coq.connectives.I))) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ ((S) ▪ n)) ▪ m0), in-⇒ (λ _x_421 : Prf ((not_zero) ▪ m0), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (prop)) (coq.connectives.False)) (`λ' p : El (nat), coq.connectives.True)) (m0)) (`λ' y : El (prop), y)) (coq.connectives.I)))))) (m)) (Hlt))));
symbol le_S_S : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ ((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n)) (`λ' x_417 : El (nat), ((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ x_417))) (el-∀ (le_n) ((S) ▪ n))) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ n) ▪ m0), in-⇒ (λ _x_421 : Prf (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m0)), el-⇒ (el-∀ (el-∀ (le_S) ((S) ▪ n)) ((S) ▪ m0)) (_x_421)))))) (m)) (lenm))));
symbol le_O_n : Prf (`∀ n : El (nat), ((le) ▪ O) ▪ n) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) ((le) ▪ O)) (el-∀ (le_n) (O))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (((le) ▪ O) ▪ x_366), el-⇒ (el-∀ (el-∀ (le_S) (O)) (x_366)) (_x_368))))) (n));
symbol le_n_Sn : Prf (`∀ n : El (nat), ((le) ▪ n) ▪ ((S) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (le_S) (n)) (n)) (el-∀ (le_n) (n)));
symbol transitive_le : Prf (((coq.relations.transitive) at (nat)) ▪ le) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ leab : Prf (((le) ▪ a) ▪ b), in-⇒ (λ lebc : Prf (((le) ▪ b) ▪ c), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (b)) (`λ' x_417 : El (nat), ((le) ▪ a) ▪ x_417)) (leab)) (in-∀ (λ m : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ b) ▪ m), in-⇒ (λ _x_421 : Prf (((le) ▪ a) ▪ m), el-⇒ (el-∀ (el-∀ (le_S) (a)) (m)) (_x_421)))))) (c)) (lebc))))));
symbol le_pred_n : Prf (`∀ n : El (nat), ((le) ▪ ((pred) ▪ n)) ▪ n) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), ((le) ▪ ((pred) ▪ _x_365)) ▪ _x_365)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (nat)) (O)) (`λ' p : El (nat), p)) (`λ' y : El (nat), ((le) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ O)) ▪ y)) (el-∀ (le_n) ((pred) ▪ O)))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (((le) ▪ ((pred) ▪ x_366)) ▪ x_366), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat)) (O)) (`λ' p : El (nat), p)) (x_366)) (`λ' y : El (nat), ((le) ▪ ((pred) ▪ ((S) ▪ x_366))) ▪ ((S) ▪ y))) (el-∀ (le_n_Sn) ((pred) ▪ ((S) ▪ x_366))))))) (n));
symbol monotonic_pred : Prf ((((coq.relations.monotonic) at (nat)) ▪ le) ▪ pred) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n)) (`λ' x_417 : El (nat), ((le) ▪ ((pred) ▪ n)) ▪ ((pred) ▪ x_417))) (el-∀ (le_n) ((pred) ▪ n))) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ n) ▪ m0), in-⇒ (λ _x_421 : Prf (((le) ▪ ((pred) ▪ n)) ▪ ((pred) ▪ m0)), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) ((pred) ▪ n)) (n)) ((pred) ▪ ((S) ▪ m0))) (el-∀ (le_pred_n) (n))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) (O)) (`λ' p : El (nat), p)) (m0)) (`λ' y : El (nat), ((le) ▪ n) ▪ y)) (_x_419))))))) (m)) (lenm))));
symbol le_S_S_to_le : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ ((le) ▪ n) ▪ m) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat)) (O)) (`λ' p : El (nat), p)) (m)) (`λ' y : El (nat), ((le) ▪ n) ▪ y)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_S) (nat)) (O)) (`λ' p : El (nat), p)) (n)) (`λ' y : El (nat), ((le) ▪ y) ▪ (((((match_nat_type) at (nat)) ▪ O) ▪ (`λ' p : El (nat), p)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (monotonic_pred) ((S) ▪ n)) ((S) ▪ m)) (auto))))));
symbol monotonic_le_plus_r : Prf (`∀ n : El (nat), (((coq.relations.monotonic) at (nat)) ▪ le) ▪ (`λ' m : El (nat), ((plus) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((le) ▪ a) ▪ b) ⇒ ((le) ▪ (((plus) ▪ _x_365) ▪ a)) ▪ (((plus) ▪ _x_365) ▪ b))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ a) ▪ b) ⇒ ((le) ▪ (((plus) ▪ O) ▪ a)) ▪ ((y) ▪ b))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ a) ▪ b) ⇒ ((le) ▪ ((y) ▪ a)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ b))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ a) ▪ b) ⇒ ((le) ▪ ((y) ▪ a)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ b))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ a) ▪ b) ⇒ ((le) ▪ (((plus_body) ▪ O) ▪ a)) ▪ ((y) ▪ b))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ a) ▪ b) ⇒ ((le) ▪ (((plus_body) ▪ O) ▪ a)) ▪ ((y) ▪ b))) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ a) ▪ b) ⇒ ((le) ▪ ((y) ▪ a)) ▪ b)) (in-⇒ (λ auto : Prf (((le) ▪ a) ▪ b), auto))))))))) (in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf ((((le) ▪ a) ▪ b) ⇒ ((le) ▪ (((plus) ▪ m) ▪ a)) ▪ (((plus) ▪ m) ▪ b)), in-⇒ (λ leab : Prf (((le) ▪ a) ▪ b), el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ m)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ (((plus) ▪ ((S) ▪ m)) ▪ a)) ▪ ((y) ▪ b))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ m)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((y) ▪ a)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ m)) ▪ b))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (m)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((y) ▪ a)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ m)) ▪ b))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (m)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ (((plus_body) ▪ ((S) ▪ m)) ▪ a)) ▪ ((y) ▪ b))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ (((plus_body) ▪ ((S) ▪ m)) ▪ a)) ▪ ((y) ▪ b))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((y) ▪ a)) ▪ ((S) ▪ (((plus) ▪ m) ▪ b)))) (el-⇒ (el-∀ (el-∀ (le_S_S) (((plus) ▪ m) ▪ a)) (((plus) ▪ m) ▪ b)) (el-⇒ (H) (leab))))))))))))) (n))));
symbol monotonic_le_plus_l : Prf (`∀ m : El (nat), (((coq.relations.monotonic) at (nat)) ▪ le) ▪ (`λ' n : El (nat), ((plus) ▪ n) ▪ m)) ≔ in-∀ (λ m : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (((le) ▪ x) ▪ y), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((plus) ▪ m) ▪ x)) ▪ (((plus) ▪ m) ▪ y))) (((le) ▪ (((plus) ▪ x) ▪ m)) ▪ (((plus) ▪ y) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (m)) (x)) (y)) (auto))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ x)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ m) ▪ x)) ▪ (((plus) ▪ m) ▪ y))) ▪ (((le) ▪ __) ▪ (((plus) ▪ y) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ y)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ m) ▪ x)) ▪ (((plus) ▪ m) ▪ y))) ▪ (((le) ▪ (((plus) ▪ m) ▪ x)) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((plus) ▪ m) ▪ x)) ▪ (((plus) ▪ m) ▪ y)))) (((plus) ▪ y) ▪ m)) (el-∀ (el-∀ (commutative_plus) (y)) (m)))) (((plus) ▪ x) ▪ m)) (el-∀ (el-∀ (commutative_plus) (x)) (m)))))));
symbol le_plus : Prf (`∀ n1 : El (nat), `∀ n2 : El (nat), `∀ m1 : El (nat), `∀ m2 : El (nat), (((le) ▪ n1) ▪ n2) ⇒ (((le) ▪ m1) ▪ m2) ⇒ ((le) ▪ (((plus) ▪ n1) ▪ m1)) ▪ (((plus) ▪ n2) ▪ m2)) ≔ in-∀ (λ n1 : El (nat),  in-∀ (λ n2 : El (nat),  in-∀ (λ m1 : El (nat),  in-∀ (λ m2 : El (nat),  in-⇒ (λ len : Prf (((le) ▪ n1) ▪ n2), in-⇒ (λ lem : Prf (((le) ▪ m1) ▪ m2), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (((plus) ▪ n1) ▪ m1)) (((plus) ▪ n1) ▪ m2)) (((plus) ▪ n2) ▪ m2)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (n1)) (m1)) (m2)) (lem))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_l) (m2)) (n1)) (n2)) (len))))))));
symbol le_plus_n : Prf (`∀ n : El (nat), `∀ m : El (nat), ((le) ▪ m) ▪ (((plus) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((plus) ▪ O) ▪ m)) ▪ (((plus) ▪ n) ▪ m))) (((le) ▪ m) ▪ (((plus) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_l) (m)) (O)) (n)) (el-∀ (le_O_n) (n)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ (((plus) ▪ n) ▪ m))) ▪ (((le) ▪ m) ▪ (((plus) ▪ n) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ m) ▪ (((plus) ▪ n) ▪ m)))) (((plus) ▪ O) ▪ m)) (el-∀ (plus_O_n) (m)))));
symbol le_plus_b : Prf (`∀ b : El (nat), `∀ n : El (nat), `∀ m : El (nat), (((le) ▪ (((plus) ▪ n) ▪ b)) ▪ m) ⇒ ((le) ▪ n) ▪ m) ≔ in-∀ (λ b : El (nat),  in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (((le) ▪ (((plus) ▪ n) ▪ b)) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n)) (((plus) ▪ n) ▪ b)) (m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ n) ▪ (((plus) ▪ b) ▪ n))) (((le) ▪ n) ▪ (((plus) ▪ n) ▪ b))) (el-∀ (el-∀ (le_plus_n) (b)) (n))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ b) ▪ n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ n) ▪ (((plus) ▪ b) ▪ n))) ▪ (((le) ▪ n) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ n) ▪ (((plus) ▪ b) ▪ n)))) (((plus) ▪ n) ▪ b)) (el-∀ (el-∀ (commutative_plus) (n)) (b))))) (auto)))));
symbol le_plus_n_r : Prf (`∀ n : El (nat), `∀ m : El (nat), ((le) ▪ m) ▪ (((plus) ▪ m) ▪ n)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ m) ▪ (((plus) ▪ n) ▪ m))) (((le) ▪ m) ▪ (((plus) ▪ m) ▪ n))) (el-∀ (el-∀ (le_plus_n) (n)) (m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ m) ▪ (((plus) ▪ n) ▪ m))) ▪ (((le) ▪ m) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ m) ▪ (((plus) ▪ n) ▪ m)))) (((plus) ▪ m) ▪ n)) (el-∀ (el-∀ (commutative_plus) (m)) (n)))));
symbol le_plus_to_le : Prf (`∀ a : El (nat), `∀ n : El (nat), `∀ m : El (nat), (((le) ▪ (((plus) ▪ a) ▪ n)) ▪ (((plus) ▪ a) ▪ m)) ⇒ ((le) ▪ n) ▪ m) ≔ in-∀ (λ a : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ n : El (nat), `∀ m : El (nat), (((le) ▪ (((plus) ▪ _x_365) ▪ n)) ▪ (((plus) ▪ _x_365) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ (((plus) ▪ O) ▪ n)) ▪ ((y) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((y) ▪ n)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((y) ▪ n)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ O) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ (((plus_body) ▪ O) ▪ n)) ▪ ((y) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ (((plus_body) ▪ O) ▪ n)) ▪ ((y) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (sym_eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((y) ▪ n)) ▪ m) ⇒ ((le) ▪ n) ▪ m)) (in-⇒ (λ auto : Prf (((le) ▪ n) ▪ m), auto))))))))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ (((plus) ▪ x_366) ▪ n)) ▪ (((plus) ▪ x_366) ▪ m)) ⇒ ((le) ▪ n) ▪ m), in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ (((plus) ▪ ((S) ▪ x_366)) ▪ n)) ▪ ((y) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((y) ▪ n)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ x_366)) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((y) ▪ n)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ plus_body) ▪ ((S) ▪ x_366)) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ (((plus_body) ▪ ((S) ▪ x_366)) ▪ n)) ▪ ((y) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ (((plus_body) ▪ ((S) ▪ x_366)) ▪ n)) ▪ ((y) ▪ m)) ⇒ ((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (x_366)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((y) ▪ n)) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ m))) ⇒ ((le) ▪ n) ▪ m)) (in-⇒ (λ auto : Prf (((le) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ n))) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ m))), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((pred) ▪ ((S) ▪ n))) ▪ ((pred) ▪ ((S) ▪ m)))) (((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (monotonic_pred) ((S) ▪ n)) ((S) ▪ m)) (el-⇒ (el-∀ (el-∀ (_x_368) ((S) ▪ n)) ((S) ▪ m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ n))) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ m)))) (((le) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ n))) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m)))) (auto)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ n))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ ((S) ▪ (((plus) ▪ x_366) ▪ m)))) ▪ (((le) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ n))) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x_366) ▪ ((S) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ n))) ▪ __)) ▪ (((le) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ n))) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ n))) ▪ (((plus) ▪ x_366) ▪ ((S) ▪ m))))) ((S) ▪ (((plus) ▪ x_366) ▪ m))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (m)))) ((S) ▪ (((plus) ▪ x_366) ▪ n))) (el-∀ (el-∀ (plus_n_Sm) (x_366)) (n))))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ ((pred) ▪ ((S) ▪ m)))) ▪ (((le) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ n) ▪ __)) ▪ (((le) ▪ n) ▪ m))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ n) ▪ m))) ((pred) ▪ ((S) ▪ m))) (el-∀ (pred_Sn) (m)))) ((pred) ▪ ((S) ▪ n))) (el-∀ (pred_Sn) (n)))))))))))))))) (a));
symbol le_plus_to_le_r : Prf (`∀ a : El (nat), `∀ n : El (nat), `∀ m : El (nat), (((le) ▪ (((plus) ▪ n) ▪ a)) ▪ (((plus) ▪ m) ▪ a)) ⇒ ((le) ▪ n) ▪ m) ≔ in-∀ (λ a : El (nat),  in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (((le) ▪ (((plus) ▪ n) ▪ a)) ▪ (((plus) ▪ m) ▪ a)), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_le) (a)) (n)) (m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((plus) ▪ n) ▪ a)) ▪ (((plus) ▪ m) ▪ a))) (((le) ▪ (((plus) ▪ a) ▪ n)) ▪ (((plus) ▪ a) ▪ m))) (auto)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ (((plus) ▪ m) ▪ a))) ▪ (((le) ▪ (((plus) ▪ a) ▪ n)) ▪ (((plus) ▪ a) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ a) ▪ n)) ▪ __)) ▪ (((le) ▪ (((plus) ▪ a) ▪ n)) ▪ (((plus) ▪ a) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((plus) ▪ a) ▪ n)) ▪ (((plus) ▪ a) ▪ m)))) (((plus) ▪ m) ▪ a)) (el-∀ (el-∀ (commutative_plus) (m)) (a)))) (((plus) ▪ n) ▪ a)) (el-∀ (el-∀ (commutative_plus) (n)) (a))))))));
symbol monotonic_le_times_r : Prf (`∀ n : El (nat), (((coq.relations.monotonic) at (nat)) ▪ le) ▪ (`λ' m : El (nat), ((times) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ lexy : Prf (((le) ▪ x) ▪ y), el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), ((le) ▪ (((times) ▪ _x_365) ▪ x)) ▪ (((times) ▪ _x_365) ▪ y))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ (((times) ▪ O) ▪ x)) ▪ ((z) ▪ y))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) (O)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ ((z) ▪ x)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ y))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ ((z) ▪ x)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ O) ▪ y))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (times_body)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ (((times_body) ▪ O) ▪ x)) ▪ ((z) ▪ y))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ (((times_body) ▪ O) ▪ x)) ▪ ((z) ▪ y))) (el-⇒ (el-∀ (sym_eq_times_body_O) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ ((z) ▪ x)) ▪ O)) (el-∀ (le_O_n) (O))))))))) (in-∀ (λ a : El (nat),  in-⇒ (λ lea : Prf (((le) ▪ (((times) ▪ a) ▪ x)) ▪ (((times) ▪ a) ▪ y)), el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ a)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ (((times) ▪ ((S) ▪ a)) ▪ x)) ▪ ((z) ▪ y))) (el-⇒ (el-∀ (el-∀ (sym_eq_times) ((S) ▪ a)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ ((z) ▪ x)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ a)) ▪ y))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (a)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ ((z) ▪ x)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ times_body) ▪ ((S) ▪ a)) ▪ y))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (times_body)) (a)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ (((times_body) ▪ ((S) ▪ a)) ▪ x)) ▪ ((z) ▪ y))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (a)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ (((times_body) ▪ ((S) ▪ a)) ▪ x)) ▪ ((z) ▪ y))) (el-⇒ (el-∀ (el-∀ (sym_eq_times_body_S) (a)) (`λ' z : El ((nat ⇝ nat)), ((le) ▪ ((z) ▪ x)) ▪ (((plus) ▪ y) ▪ (((times) ▪ a) ▪ y)))) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (le_plus) (x)) (y)) (((times) ▪ a) ▪ x)) (((times) ▪ a) ▪ y)) (lexy)) (lea))))))))))) (n)))));
symbol le_times : Prf (`∀ n1 : El (nat), `∀ n2 : El (nat), `∀ m1 : El (nat), `∀ m2 : El (nat), (((le) ▪ n1) ▪ n2) ⇒ (((le) ▪ m1) ▪ m2) ⇒ ((le) ▪ (((times) ▪ n1) ▪ m1)) ▪ (((times) ▪ n2) ▪ m2)) ≔ in-∀ (λ n1 : El (nat),  in-∀ (λ n2 : El (nat),  in-∀ (λ m1 : El (nat),  in-∀ (λ m2 : El (nat),  in-⇒ (λ len : Prf (((le) ▪ n1) ▪ n2), in-⇒ (λ lem : Prf (((le) ▪ m1) ▪ m2), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (((times) ▪ n1) ▪ m1)) (((times) ▪ n1) ▪ m2)) (((times) ▪ n2) ▪ m2)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (n1)) (m1)) (m2)) (lem))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((times) ▪ m2) ▪ n1)) ▪ (((times) ▪ m2) ▪ n2))) (((le) ▪ (((times) ▪ n1) ▪ m2)) ▪ (((times) ▪ n2) ▪ m2))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (m2)) (n1)) (n2)) (len))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ n1) ▪ m2)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ (((times) ▪ m2) ▪ n2))) ▪ (((le) ▪ (((times) ▪ n1) ▪ m2)) ▪ (((times) ▪ n2) ▪ m2)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ n2) ▪ m2)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((times) ▪ n1) ▪ m2)) ▪ __)) ▪ (((le) ▪ (((times) ▪ n1) ▪ m2)) ▪ (((times) ▪ n2) ▪ m2)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((times) ▪ n1) ▪ m2)) ▪ (((times) ▪ n2) ▪ m2)))) (((times) ▪ m2) ▪ n2)) (el-∀ (el-∀ (commutative_times) (m2)) (n2)))) (((times) ▪ m2) ▪ n1)) (el-∀ (el-∀ (commutative_times) (m2)) (n1))))))))));
symbol le_plus_minus_m_m : Prf (`∀ n : El (nat), `∀ m : El (nat), ((le) ▪ n) ▪ (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), `∀ m : El (nat), ((le) ▪ _x_365) ▪ (((plus) ▪ (((minus) ▪ _x_365) ▪ m)) ▪ m))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (O)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), ((le) ▪ O) ▪ (((plus) ▪ ((y) ▪ m)) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ nat)) (minus_body)) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), ((le) ▪ O) ▪ (((plus) ▪ ((y) ▪ m)) ▪ m))) (el-⇒ (el-∀ (sym_eq_minus_body_O) (`λ' y : El ((nat ⇝ nat)), `∀ m : El (nat), ((le) ▪ O) ▪ (((plus) ▪ ((y) ▪ m)) ▪ m))) (in-∀ (λ m : El (nat),  el-∀ (el-∀ (le_plus_n_r) (m)) (O))))))) (in-∀ (λ a : El (nat),  in-⇒ (λ Hind : Prf (`∀ m : El (nat), ((le) ▪ a) ▪ (((plus) ▪ (((minus) ▪ a) ▪ m)) ▪ m)), in-∀ (λ m : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ (((minus) ▪ ((S) ▪ a)) ▪ __)) ▪ __))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ ((y) ▪ O)) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ ((y) ▪ O)) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ ((y) ▪ O)) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat)) ((S) ▪ a)) (`λ' q : El (nat), ((minus) ▪ a) ▪ q)) (`λ' y : El (nat), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ y) ▪ O))) (el-∀ (el-∀ (le_plus_n_r) (O)) ((S) ▪ a))))))) (in-∀ (λ n0 : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ ((y) ▪ ((S) ▪ n0))) ▪ ((S) ▪ n0)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ ((y) ▪ ((S) ▪ n0))) ▪ ((S) ▪ n0)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ ((y) ▪ ((S) ▪ n0))) ▪ ((S) ▪ n0)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ a)) (`λ' q : El (nat), ((minus) ▪ a) ▪ q)) (n0)) (`λ' y : El (nat), ((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ y) ▪ ((S) ▪ n0)))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ a)) ▪ ((S) ▪ (((plus) ▪ (((minus) ▪ a) ▪ n0)) ▪ n0)))) (((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ (((minus) ▪ a) ▪ n0)) ▪ ((S) ▪ n0)))) (el-⇒ (el-∀ (el-∀ (le_S_S) (a)) (((plus) ▪ (((minus) ▪ a) ▪ n0)) ▪ n0)) (el-∀ (Hind) (n0)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ (((minus) ▪ a) ▪ n0)) ▪ ((S) ▪ n0))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ a)) ▪ __)) ▪ (((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ (((minus) ▪ a) ▪ n0)) ▪ ((S) ▪ n0))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ (((minus) ▪ a) ▪ n0)) ▪ ((S) ▪ n0))))) ((S) ▪ (((plus) ▪ (((minus) ▪ a) ▪ n0)) ▪ n0))) (el-∀ (el-∀ (plus_n_Sm) (((minus) ▪ a) ▪ n0)) (n0)))))))))) (m)))))) (n));
symbol le_plus_to_minus_r : Prf (`∀ a : El (nat), `∀ b : El (nat), `∀ c : El (nat), (((le) ▪ (((plus) ▪ a) ▪ b)) ▪ c) ⇒ ((le) ▪ a) ▪ (((minus) ▪ c) ▪ b)) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ H : Prf (((le) ▪ (((plus) ▪ a) ▪ b)) ▪ c), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_le_r) (b)) (a)) (((minus) ▪ c) ▪ b)) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (((plus) ▪ a) ▪ b)) (c)) (((plus) ▪ (((minus) ▪ c) ▪ b)) ▪ b)) (H)) (el-∀ (el-∀ (le_plus_minus_m_m) (c)) (b)))))));
symbol lt_to_le : Prf (`∀ x : El (nat), `∀ y : El (nat), (((lt) ▪ x) ▪ y) ⇒ ((le) ▪ x) ▪ y) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (((lt) ▪ x) ▪ y), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_b) ((S) ▪ O)) (x)) (y)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ x)) ▪ y)) (((le) ▪ (((plus) ▪ x) ▪ ((S) ▪ O))) ▪ y)) (auto)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x) ▪ ((S) ▪ O))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ y)) ▪ (((le) ▪ (((plus) ▪ x) ▪ ((S) ▪ O))) ▪ y))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((plus) ▪ x) ▪ ((S) ▪ O))) ▪ y))) ((S) ▪ x)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x) ▪ O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ __)) ▪ (((plus) ▪ x) ▪ ((S) ▪ O)))) (el-∀ (el-∀ (plus_n_Sm) (x)) (O))) (x)) (el-∀ (plus_n_O) (x))))))));
symbol transitive_lt : Prf (((coq.relations.transitive) at (nat)) ▪ lt) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ ltab : Prf (((lt) ▪ a) ▪ b), in-⇒ (λ ltbc : Prf (((lt) ▪ b) ▪ c), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) ((S) ▪ b)) (`λ' x_417 : El (nat), ((lt) ▪ a) ▪ x_417)) (el-⇒ (el-∀ (el-∀ (le_S) ((S) ▪ a)) (b)) (ltab))) (in-∀ (λ m : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ ((S) ▪ b)) ▪ m), in-⇒ (λ _x_421 : Prf (((lt) ▪ a) ▪ m), el-⇒ (el-∀ (el-∀ (le_S) ((S) ▪ a)) (m)) (_x_421)))))) (c)) (ltbc))))));
symbol lt_to_le_to_lt : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), (((lt) ▪ n) ▪ m) ⇒ (((le) ▪ m) ▪ p) ⇒ ((lt) ▪ n) ▪ p) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ H : Prf (((lt) ▪ n) ▪ m), in-⇒ (λ H1 : Prf (((le) ▪ m) ▪ p), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (m)) (`λ' x_417 : El (nat), ((lt) ▪ n) ▪ x_417)) (H)) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ m) ▪ m0), in-⇒ (λ _x_421 : Prf (((lt) ▪ n) ▪ m0), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_lt) (n)) (m0)) ((S) ▪ m0)) (_x_421)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ m0)) ▪ (((plus) ▪ O) ▪ ((S) ▪ m0)))) (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0))) (el-∀ (el-∀ (le_plus_n) (O)) ((S) ▪ m0))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ m0)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ m0)) ▪ __)) ▪ (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0)))) (((plus) ▪ O) ▪ ((S) ▪ m0))) (el-∀ (plus_O_n) ((S) ▪ m0))))))))) (p)) (H1))))));
symbol le_to_lt_to_lt : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), (((le) ▪ n) ▪ m) ⇒ (((lt) ▪ m) ▪ p) ⇒ ((lt) ▪ n) ▪ p) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ H : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n)) (`λ' x_417 : El (nat), (((lt) ▪ x_417) ▪ p) ⇒ ((lt) ▪ n) ▪ p)) (in-⇒ (λ auto : Prf (((lt) ▪ n) ▪ p), auto))) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ n) ▪ m0), in-⇒ (λ _x_421 : Prf ((((lt) ▪ m0) ▪ p) ⇒ ((lt) ▪ n) ▪ p), in-⇒ (λ auto : Prf (((lt) ▪ ((S) ▪ m0)) ▪ p), el-⇒ (_x_421) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_lt) (m0)) ((S) ▪ m0)) (p)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ m0)) ▪ (((plus) ▪ O) ▪ ((S) ▪ m0)))) (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0))) (el-∀ (el-∀ (le_plus_n) (O)) ((S) ▪ m0))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ m0)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ m0)) ▪ __)) ▪ (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0)))) (((plus) ▪ O) ▪ ((S) ▪ m0))) (el-∀ (plus_O_n) ((S) ▪ m0))))) (auto)))))))) (m)) (H)))));
symbol lt_S_to_lt : Prf (`∀ n : El (nat), `∀ m : El (nat), (((lt) ▪ ((S) ▪ n)) ▪ m) ⇒ ((lt) ▪ n) ▪ m) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (((lt) ▪ ((S) ▪ n)) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_lt) (n)) ((S) ▪ n)) (m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ n)) ▪ (((plus) ▪ O) ▪ ((S) ▪ n)))) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ n))) (el-∀ (el-∀ (le_plus_n) (O)) ((S) ▪ n))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ n)) ▪ __)) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ n)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ n)))) (((plus) ▪ O) ▪ ((S) ▪ n))) (el-∀ (plus_O_n) ((S) ▪ n))))) (auto))));
symbol ltn_to_ltO : Prf (`∀ n : El (nat), `∀ m : El (nat), (((lt) ▪ n) ▪ m) ⇒ ((lt) ▪ O) ▪ m) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf (((lt) ▪ n) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (lt_to_le_to_lt) (O)) ((S) ▪ n)) (m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ O)) ▪ (((plus) ▪ n) ▪ ((S) ▪ O)))) (((le) ▪ ((S) ▪ O)) ▪ ((S) ▪ n))) (el-∀ (el-∀ (le_plus_n) (n)) ((S) ▪ O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ O)) ▪ __)) ▪ (((le) ▪ ((S) ▪ O)) ▪ ((S) ▪ n)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ O)) ▪ ((S) ▪ n)))) (((plus) ▪ n) ▪ ((S) ▪ O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ __)) ▪ (((plus) ▪ n) ▪ ((S) ▪ O)))) (el-∀ (el-∀ (plus_n_Sm) (n)) (O))) (n)) (el-∀ (plus_n_O) (n)))))) (auto))));
symbol lt_O_S : Prf (`∀ n : El (nat), ((lt) ▪ O) ▪ ((S) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (ltn_to_ltO) (n)) ((S) ▪ n)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ n)) ▪ (((plus) ▪ O) ▪ ((S) ▪ n)))) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ n))) (el-∀ (el-∀ (le_plus_n) (O)) ((S) ▪ n))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ n)) ▪ __)) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ n)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ n)))) (((plus) ▪ O) ▪ ((S) ▪ n))) (el-∀ (plus_O_n) ((S) ▪ n)))));
symbol monotonic_lt_plus_r : Prf (`∀ n : El (nat), (((coq.relations.monotonic) at (nat)) ▪ lt) ▪ (`λ' m : El (nat), ((plus) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (((lt) ▪ x) ▪ y), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y))) (((le) ▪ ((S) ▪ (((plus) ▪ n) ▪ x))) ▪ (((plus) ▪ n) ▪ y))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (n)) ((S) ▪ x)) (y)) (auto))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ ((S) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y))) ▪ (((le) ▪ __) ▪ (((plus) ▪ n) ▪ y)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y)))) ((S) ▪ (((plus) ▪ n) ▪ x))) (el-∀ (el-∀ (plus_n_Sm) (n)) (x)))))));
symbol monotonic_lt_plus_l : Prf (`∀ n : El (nat), (((coq.relations.monotonic) at (nat)) ▪ lt) ▪ (`λ' m : El (nat), ((plus) ▪ m) ▪ n)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto : Prf (((lt) ▪ x) ▪ y), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y))) (((le) ▪ ((S) ▪ (((plus) ▪ x) ▪ n))) ▪ (((plus) ▪ y) ▪ n))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (n)) ((S) ▪ x)) (y)) (auto))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ x)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y))) ▪ (((le) ▪ ((S) ▪ __)) ▪ (((plus) ▪ y) ▪ n)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ ((S) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y))) ▪ (((le) ▪ __) ▪ (((plus) ▪ y) ▪ n)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ y)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y))) ▪ (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((plus) ▪ n) ▪ ((S) ▪ x))) ▪ (((plus) ▪ n) ▪ y)))) (((plus) ▪ y) ▪ n)) (el-∀ (el-∀ (commutative_plus) (y)) (n)))) ((S) ▪ (((plus) ▪ n) ▪ x))) (el-∀ (el-∀ (plus_n_Sm) (n)) (x)))) (((plus) ▪ x) ▪ n)) (el-∀ (el-∀ (commutative_plus) (x)) (n)))))));
symbol monotonic_lt_times_r : Prf (`∀ c : El (nat), (((lt) ▪ O) ▪ c) ⇒ (((coq.relations.monotonic) at (nat)) ▪ lt) ▪ (`λ' t : El (nat), ((times) ▪ c) ▪ t)) ≔ in-∀ (λ c : El (nat),  in-⇒ (λ posc : Prf (((lt) ▪ O) ▪ c), in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ ltnm : Prf (((lt) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) ((S) ▪ n)) (`λ' x_417 : El (nat), ((lt) ▪ (((times) ▪ c) ▪ n)) ▪ (((times) ▪ c) ▪ x_417))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ (((plus) ▪ O) ▪ (((times) ▪ c) ▪ n)))) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ n)))) (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ n))) ▪ (((times) ▪ c) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_lt_plus_l) (((times) ▪ c) ▪ n)) (O)) (c)) (posc))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ O) ▪ ((S) ▪ (((times) ▪ c) ▪ n)))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ n)))) ▪ (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ n))) ▪ (((times) ▪ c) ▪ ((S) ▪ n))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ c) ▪ (((times) ▪ c) ▪ n))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((plus) ▪ O) ▪ ((S) ▪ (((times) ▪ c) ▪ n)))) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ n)))) ▪ (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ n))) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ (((times) ▪ c) ▪ n))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ n)))) ▪ (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ n))) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ n))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ n))) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ n))))) (((plus) ▪ O) ▪ ((S) ▪ (((times) ▪ c) ▪ n)))) (el-∀ (plus_O_n) ((S) ▪ (((times) ▪ c) ▪ n))))) (((times) ▪ c) ▪ ((S) ▪ n))) (el-∀ (el-∀ (times_n_Sm) (c)) (n)))) ((S) ▪ (((plus) ▪ O) ▪ (((times) ▪ c) ▪ n)))) (el-∀ (el-∀ (plus_n_Sm) (O)) (((times) ▪ c) ▪ n))))) (in-∀ (λ a : El (nat),  in-⇒ (λ __ : Prf (((le) ▪ ((S) ▪ n)) ▪ a), in-⇒ (λ lt1 : Prf (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ n))) ▪ (((times) ▪ c) ▪ a)), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) ((S) ▪ (((times) ▪ c) ▪ n))) (((times) ▪ c) ▪ a)) (((times) ▪ c) ▪ ((S) ▪ a))) (lt1)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((times) ▪ c) ▪ a)) ▪ (((plus) ▪ (((times) ▪ c) ▪ a)) ▪ c))) (((le) ▪ (((times) ▪ c) ▪ a)) ▪ (((times) ▪ c) ▪ ((S) ▪ a)))) (el-∀ (el-∀ (le_plus_n_r) (c)) (((times) ▪ c) ▪ a))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ c) ▪ (((times) ▪ c) ▪ a))) (`λ' __1 : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((times) ▪ c) ▪ a)) ▪ (((plus) ▪ (((times) ▪ c) ▪ a)) ▪ c))) ▪ (((le) ▪ (((times) ▪ c) ▪ a)) ▪ __1))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ c) ▪ (((times) ▪ c) ▪ a))) (`λ' __1 : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((times) ▪ c) ▪ a)) ▪ __1)) ▪ (((le) ▪ (((times) ▪ c) ▪ a)) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ a))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((times) ▪ c) ▪ a)) ▪ (((plus) ▪ c) ▪ (((times) ▪ c) ▪ a))))) (((plus) ▪ (((times) ▪ c) ▪ a)) ▪ c)) (el-∀ (el-∀ (commutative_plus) (((times) ▪ c) ▪ a)) (c)))) (((times) ▪ c) ▪ ((S) ▪ a))) (el-∀ (el-∀ (times_n_Sm) (c)) (a))))))))) (m)) (ltnm))))));
symbol monotonic_lt_times_l : Prf (`∀ c : El (nat), (((lt) ▪ O) ▪ c) ⇒ (((coq.relations.monotonic) at (nat)) ▪ lt) ▪ (`λ' t : El (nat), ((times) ▪ t) ▪ c)) ≔ in-∀ (λ c : El (nat),  in-⇒ (λ auto : Prf (((lt) ▪ O) ▪ c), in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-⇒ (λ auto' : Prf (((lt) ▪ x) ▪ y), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ x))) ▪ (((times) ▪ c) ▪ y))) (((le) ▪ ((S) ▪ (((times) ▪ x) ▪ c))) ▪ (((times) ▪ y) ▪ c))) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (monotonic_lt_times_r) (c)) (auto)) (x)) (y)) (auto'))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ c) ▪ x)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ x))) ▪ (((times) ▪ c) ▪ y))) ▪ (((le) ▪ ((S) ▪ __)) ▪ (((times) ▪ y) ▪ c)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((times) ▪ c) ▪ y)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ x))) ▪ (((times) ▪ c) ▪ y))) ▪ (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ x))) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ (((times) ▪ c) ▪ x))) ▪ (((times) ▪ c) ▪ y)))) (((times) ▪ y) ▪ c)) (el-∀ (el-∀ (commutative_times) (y)) (c)))) (((times) ▪ x) ▪ c)) (el-∀ (el-∀ (commutative_times) (x)) (c))))))));
symbol lt_to_le_to_lt_times : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), `∀ q : El (nat), (((lt) ▪ n) ▪ m) ⇒ (((le) ▪ p) ▪ q) ⇒ (((lt) ▪ O) ▪ q) ⇒ ((lt) ▪ (((times) ▪ n) ▪ p)) ▪ (((times) ▪ m) ▪ q)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ ltnm : Prf (((lt) ▪ n) ▪ m), in-⇒ (λ lepq : Prf (((le) ▪ p) ▪ q), in-⇒ (λ posq : Prf (((lt) ▪ O) ▪ q), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (le_to_lt_to_lt) (((times) ▪ n) ▪ p)) (((times) ▪ n) ▪ q)) (((times) ▪ m) ▪ q)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (n)) (p)) (q)) (lepq))) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (monotonic_lt_times_l) (q)) (posq)) (n)) (m)) (ltnm)))))))));
symbol lt_times : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), `∀ q : El (nat), (((lt) ▪ n) ▪ m) ⇒ (((lt) ▪ p) ▪ q) ⇒ ((lt) ▪ (((times) ▪ n) ▪ p)) ▪ (((times) ▪ m) ▪ q)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ ltnm : Prf (((lt) ▪ n) ▪ m), in-⇒ (λ ltpq : Prf (((lt) ▪ p) ▪ q), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (lt_to_le_to_lt_times) (n)) (m)) (p)) (q)) (ltnm)) (el-⇒ (el-∀ (el-∀ (lt_to_le) (p)) (q)) (ltpq))) (el-⇒ (el-∀ (el-∀ (ltn_to_ltO) (p)) (q)) (ltpq))))))));
symbol lt_plus_to_minus_r : Prf (`∀ a : El (nat), `∀ b : El (nat), `∀ c : El (nat), (((lt) ▪ (((plus) ▪ a) ▪ b)) ▪ c) ⇒ ((lt) ▪ a) ▪ (((minus) ▪ c) ▪ b)) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-⇒ (λ H : Prf (((lt) ▪ (((plus) ▪ a) ▪ b)) ▪ c), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_minus_r) ((S) ▪ a)) (b)) (c)) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((y) ▪ b)) ▪ c)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((y) ▪ b)) ▪ c)) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (a)) (`λ' y : El ((nat ⇝ nat)), ((le) ▪ ((y) ▪ b)) ▪ c)) (H))))))));
symbol lt_plus_Sn_r : Prf (`∀ a : El (nat), `∀ x : El (nat), `∀ n : El (nat), ((lt) ▪ a) ▪ (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ ((S) ▪ n))) ≔ in-∀ (λ a : El (nat),  in-∀ (λ x : El (nat),  in-∀ (λ n : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ a)) ▪ ((S) ▪ (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ n)))) (((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (le_S_S) (a)) (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ n)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ a) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ n)))) (((le) ▪ a) ▪ (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ n))) (el-∀ (el-∀ (le_plus_n_r) (((plus) ▪ x) ▪ n)) (a))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ (((plus) ▪ a) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ a) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ n)))) ▪ (((le) ▪ a) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ (((plus) ▪ n) ▪ x))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ a) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ n)))) ▪ (((le) ▪ a) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ x) ▪ n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ a) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ n)))) ▪ (((le) ▪ a) ▪ (((plus) ▪ a) ▪ __)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ a) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ n))))) (((plus) ▪ n) ▪ x)) (el-∀ (el-∀ (commutative_plus) (n)) (x)))) (((plus) ▪ n) ▪ (((plus) ▪ a) ▪ x))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ (((plus) ▪ a) ▪ n)) ▪ x)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ n) ▪ (((plus) ▪ a) ▪ x))) ▪ __)) (el-∀ (el-∀ (el-∀ (assoc_plus1) (x)) (a)) (n))) (((plus) ▪ a) ▪ (((plus) ▪ n) ▪ x))) (el-∀ (el-∀ (el-∀ (associative_plus) (a)) (n)) (x))))) (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ n)) (el-∀ (el-∀ (commutative_plus) (((plus) ▪ a) ▪ x)) (n)))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ ((S) ▪ n)))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ a)) ▪ ((S) ▪ (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ n)))) ▪ (((le) ▪ ((S) ▪ a)) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ ((S) ▪ n))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ a)) ▪ __)) ▪ (((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ ((S) ▪ n)))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ ((S) ▪ n)))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ a)) ▪ __)) ▪ (((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ ((S) ▪ n)))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ a)) ▪ (((plus) ▪ a) ▪ (((plus) ▪ x) ▪ ((S) ▪ n)))))) (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ ((S) ▪ n))) (el-∀ (el-∀ (el-∀ (associative_plus) (a)) (x)) ((S) ▪ n)))) ((S) ▪ (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ n))) (el-∀ (el-∀ (plus_n_Sm) (((plus) ▪ a) ▪ x)) (n)))) (((plus) ▪ (((plus) ▪ a) ▪ x)) ▪ ((S) ▪ n))) (el-∀ (el-∀ (el-∀ (associative_plus) (a)) (x)) ((S) ▪ n))))));
symbol not_le_Sn_O : Prf (`∀ n : El (nat), (coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (coq.connectives.nmk) (((le) ▪ ((S) ▪ n)) ▪ O)) (in-⇒ (λ Hlen0 : Prf (((le) ▪ ((S) ▪ n)) ▪ O), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_nat_type_O) (prop)) (coq.connectives.False)) (`λ' p : El (nat), coq.connectives.True)) (`λ' y : El (prop), y)) (el-⇒ (el-∀ (el-∀ (lt_to_not_zero) (n)) (O)) (Hlen0)))));
symbol not_le_to_not_le_S_S : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) (((le) ▪ n) ▪ m)) (in-⇒ (λ auto' : Prf (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((pred) ▪ ((S) ▪ n))) ▪ ((pred) ▪ ((S) ▪ m)))) (((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (monotonic_pred) ((S) ▪ n)) ((S) ▪ m)) (auto'))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ ((pred) ▪ ((S) ▪ m)))) ▪ (((le) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ n) ▪ __)) ▪ (((le) ▪ n) ▪ m))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ n) ▪ m))) ((pred) ▪ ((S) ▪ m))) (el-∀ (pred_Sn) (m)))) ((pred) ▪ ((S) ▪ n))) (el-∀ (pred_Sn) (n)))))) (auto))));
symbol not_le_S_S_to_not_le : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (((le) ▪ n) ▪ m)) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) (in-⇒ (λ auto' : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-∀ (le_S_S) (n)) (m)) (auto')))) (auto))));
symbol not_le_Sn_n : Prf (`∀ n : El (nat), (coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ _x_365)) ▪ _x_365))) (el-∀ (not_le_Sn_O) (O))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ x_366)) ▪ x_366)), el-⇒ (el-∀ (el-∀ (not_le_to_not_le_S_S) ((S) ▪ x_366)) (x_366)) (_x_368))))) (n));
symbol lt_to_not_le : Prf (`∀ n : El (nat), `∀ m : El (nat), (((lt) ▪ n) ▪ m) ⇒ (coq.connectives.Not) ▪ (((le) ▪ m) ▪ n)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ Hltnm : Prf (((lt) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) ((S) ▪ n)) (`λ' x_417 : El (nat), (coq.connectives.Not) ▪ (((le) ▪ x_417) ▪ n))) (el-∀ (not_le_Sn_n) (n))) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ ((S) ▪ n)) ▪ m0), in-⇒ (λ _x_421 : Prf ((coq.connectives.Not) ▪ (((le) ▪ m0) ▪ n)), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (((le) ▪ ((S) ▪ m0)) ▪ n)) (((le) ▪ m0) ▪ n)) (in-⇒ (λ auto : Prf (((le) ▪ ((S) ▪ m0)) ▪ n), el-⇒ (el-∀ (el-∀ (lt_to_le) (m0)) (n)) (auto)))) (_x_421)))))) (m)) (Hltnm))));
symbol not_le_to_lt : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ ((lt) ▪ m) ▪ n) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), ((coq.connectives.Not) ▪ (((le) ▪ __) ▪ _0)) ⇒ ((lt) ▪ _0) ▪ __)) (in-∀ (λ n : El (nat),  in-⇒ (λ abs_ : Prf ((coq.connectives.Not) ▪ (((le) ▪ O) ▪ n)), el-⇒ (el-∀ (coq.connectives.falsity) (((lt) ▪ n) ▪ O)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ O) ▪ n)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ O) ▪ (((plus) ▪ n) ▪ O))) (((le) ▪ O) ▪ n)) (el-∀ (el-∀ (le_plus_n) (n)) (O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ O) ▪ __)) ▪ (((le) ▪ O) ▪ n))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ O) ▪ n))) (((plus) ▪ n) ▪ O)) (el-∀ (plus_n_O) (n))))) (abs_)))))) (in-∀ (λ n : El (nat),  in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O)), el-∀ (lt_O_S) (n))))) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ Hind : Prf (((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ ((lt) ▪ m) ▪ n), in-⇒ (λ HnotleSS : Prf ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))), el-⇒ (el-∀ (el-∀ (le_S_S) ((S) ▪ m)) (n)) (el-⇒ (Hind) (el-⇒ (el-∀ (el-∀ (not_le_S_S_to_not_le) (n)) (m)) (HnotleSS))))))));
symbol not_lt_to_le : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ (((lt) ▪ n) ▪ m)) ⇒ ((le) ▪ m) ▪ n) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf ((coq.connectives.Not) ▪ (((lt) ▪ n) ▪ m)), el-⇒ (el-∀ (el-∀ (le_S_S_to_le) (m)) (n)) (el-⇒ (el-∀ (el-∀ (not_le_to_lt) ((S) ▪ n)) (m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (((le) ▪ ((S) ▪ n)) ▪ m)) (((lt) ▪ n) ▪ m)) (in-⇒ (λ auto : Prf (((le) ▪ ((S) ▪ n)) ▪ m), auto))) (H))))));
symbol le_to_not_lt : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ (coq.connectives.Not) ▪ (((lt) ▪ m) ▪ n)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-∀ (lt_to_not_le) (n)) ((S) ▪ m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (le_to_lt_to_lt) (n)) (m)) ((S) ▪ m)) (H)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ m)) ▪ (((plus) ▪ O) ▪ ((S) ▪ m)))) (((le) ▪ ((S) ▪ m)) ▪ ((S) ▪ m))) (el-∀ (el-∀ (le_plus_n) (O)) ((S) ▪ m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ m)) ▪ __)) ▪ (((le) ▪ ((S) ▪ m)) ▪ ((S) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ m)) ▪ ((S) ▪ m)))) (((plus) ▪ O) ▪ ((S) ▪ m))) (el-∀ (plus_O_n) ((S) ▪ m))))))));
symbol decidable_le : Prf (`∀ n : El (nat), `∀ m : El (nat), (coq.logic.decidable) ▪ (((le) ▪ n) ▪ m)) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), (coq.logic.decidable) ▪ (((le) ▪ __) ▪ _0))) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (((le) ▪ O) ▪ n)) ((coq.connectives.Not) ▪ (((le) ▪ O) ▪ n))) (el-∀ (le_O_n) (n))))) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (coq.connectives.or_intror) (((le) ▪ ((S) ▪ n)) ▪ O)) ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O))) (el-∀ (not_le_Sn_O) (n))))) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ _clearme : Prf ((coq.logic.decidable) ▪ (((le) ▪ n) ▪ m)), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (((le) ▪ n) ▪ m)) ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m))) ((coq.logic.decidable) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)))) (in-⇒ (λ auto : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (le_S_S) (n)) (m)) (auto))))) (in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), el-⇒ (el-∀ (el-∀ (coq.connectives.or_intror) (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (not_le_to_not_le_S_S) (n)) (m)) (auto))))) (_clearme)))));
symbol decidable_lt : Prf (`∀ n : El (nat), `∀ m : El (nat), (coq.logic.decidable) ▪ (((lt) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-∀ (el-∀ (decidable_le) ((S) ▪ n)) (m)));
symbol le_to_or_lt_eq : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ ((coq.connectives.Or) ▪ (((lt) ▪ n) ▪ m)) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (le_ind) (n)) (`λ' x_417 : El (nat), ((coq.connectives.Or) ▪ (((lt) ▪ n) ▪ x_417)) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ x_417))) (el-∀ (el-∀ (el-∀ₚ (coq.relations.RC_reflexive) (nat)) (lt)) (n))) (in-∀ (λ m0 : El (nat),  in-⇒ (λ _x_419 : Prf (((le) ▪ n) ▪ m0), in-⇒ (λ _x_421 : Prf (((coq.connectives.Or) ▪ (((lt) ▪ n) ▪ m0)) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m0)), el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (((lt) ▪ n) ▪ ((S) ▪ m0))) ((((coq.logic.eq) at (nat)) ▪ n) ▪ ((S) ▪ m0))) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (le_to_lt_to_lt) (n)) (m0)) ((S) ▪ m0)) (_x_419)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ m0)) ▪ (((plus) ▪ O) ▪ ((S) ▪ m0)))) (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0))) (el-∀ (el-∀ (le_plus_n) (O)) ((S) ▪ m0))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) ((S) ▪ m0)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ m0)) ▪ __)) ▪ (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ m0)) ▪ ((S) ▪ m0)))) (((plus) ▪ O) ▪ ((S) ▪ m0))) (el-∀ (plus_O_n) ((S) ▪ m0)))))))))) (m)) (lenm))));
symbol lt_O_n_elim : Prf (`∀ n : El (nat), (((lt) ▪ O) ▪ n) ⇒ `∀ P : El ((nat ⇝ prop)), (`∀ m : El (nat), (P) ▪ ((S) ▪ m)) ⇒ (P) ▪ n) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((lt) ▪ O) ▪ _x_365) ⇒ `∀ P : El ((nat ⇝ prop)), (`∀ m : El (nat), (P) ▪ ((S) ▪ m)) ⇒ (P) ▪ _x_365)) (in-⇒ (λ abs_ : Prf (((lt) ▪ O) ▪ O), el-⇒ (el-∀ (coq.connectives.falsity) (`∀ P : El ((nat ⇝ prop)), (`∀ m : El (nat), (P) ▪ ((S) ▪ m)) ⇒ (P) ▪ O)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ ((S) ▪ O)) ▪ O)) (abs_)) (el-∀ (not_le_Sn_O) (O)))))) (in-∀ (λ x_366 : El (nat),  in-⇒ (λ _x_368 : Prf ((((lt) ▪ O) ▪ x_366) ⇒ `∀ P : El ((nat ⇝ prop)), (`∀ m : El (nat), (P) ▪ ((S) ▪ m)) ⇒ (P) ▪ x_366), in-⇒ (λ auto : Prf (((lt) ▪ O) ▪ ((S) ▪ x_366)), in-∀ (λ P : El (nat ⇝ prop),  in-⇒ (λ auto' : Prf (`∀ m : El (nat), (P) ▪ ((S) ▪ m)), el-∀ (auto') (x_366)))))))) (n));
symbol le_n_O_elim : Prf (`∀ n : El (nat), (((le) ▪ n) ▪ O) ⇒ `∀ P : El ((nat ⇝ prop)), ((P) ▪ O) ⇒ (P) ▪ n) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), (((le) ▪ __) ▪ O) ⇒ `∀ P : El ((nat ⇝ prop)), ((P) ▪ O) ⇒ (P) ▪ __)) (in-⇒ (λ auto : Prf (((le) ▪ O) ▪ O), in-∀ (λ P : El (nat ⇝ prop),  in-⇒ (λ auto' : Prf ((P) ▪ O), auto'))))) (in-∀ (λ a : El (nat),  in-⇒ (λ abs_ : Prf (((le) ▪ ((S) ▪ a)) ▪ O), el-⇒ (el-∀ (coq.connectives.falsity) (`∀ P : El ((nat ⇝ prop)), ((P) ▪ O) ⇒ (P) ▪ ((S) ▪ a))) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ ((S) ▪ a)) ▪ O)) (abs_)) (el-∀ (not_le_Sn_O) (a))))))) (n));
symbol lt_to_not_eq : Prf (`∀ n : El (nat), `∀ m : El (nat), (((lt) ▪ n) ▪ m) ⇒ (coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ H : Prf (((lt) ▪ n) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) (coq.connectives.False)) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ ((S) ▪ n)) ▪ n)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((S) ▪ n)) ▪ m)) (((le) ▪ ((S) ▪ n)) ▪ n)) (H)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ ((S) ▪ n)) ▪ __)) ▪ (((le) ▪ ((S) ▪ n)) ▪ n))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ ((S) ▪ n)) ▪ n))) (m)) (auto)))) (el-∀ (not_le_Sn_n) (n))))) (el-⇒ (el-∀ (coq.connectives.nmk) (coq.connectives.False)) (in-⇒ (λ auto : Prf (coq.connectives.False), auto))))));
symbol le_n_O_to_eq : Prf (`∀ n : El (nat), (((le) ▪ n) ▪ O) ⇒ (((coq.logic.eq) at (nat)) ▪ O) ▪ n) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), (((le) ▪ __) ▪ O) ⇒ (((coq.logic.eq) at (nat)) ▪ O) ▪ __)) (in-⇒ (λ auto : Prf (((le) ▪ O) ▪ O), el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O)))) (in-∀ (λ a : El (nat),  in-⇒ (λ abs_ : Prf (((le) ▪ ((S) ▪ a)) ▪ O), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ a))) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ ((S) ▪ a)) ▪ O)) (abs_)) (el-∀ (not_le_Sn_O) (a))))))) (n));
symbol le_to_le_to_eq : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ (((le) ▪ m) ▪ n) ⇒ (((coq.logic.eq) at (nat)) ▪ n) ▪ m) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), (((le) ▪ __) ▪ _0) ⇒ (((le) ▪ _0) ▪ __) ⇒ (((coq.logic.eq) at (nat)) ▪ __) ▪ _0)) (in-∀ (λ n : El (nat),  in-⇒ (λ auto : Prf (((le) ▪ O) ▪ n), in-⇒ (λ auto' : Prf (((le) ▪ n) ▪ O), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (n)) (O)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (O)) (n)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ O) ▪ n)) ((((coq.logic.eq) at (nat)) ▪ O) ▪ n)) (el-⇒ (el-∀ (le_n_O_to_eq) (n)) (auto'))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ O) ▪ n))))))))) (in-∀ (λ n : El (nat),  in-⇒ (λ auto : Prf (((le) ▪ ((S) ▪ n)) ▪ O), in-⇒ (λ auto' : Prf (((le) ▪ O) ▪ ((S) ▪ n)), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (O)) ((S) ▪ n)) (el-⇒ (el-∀ (le_n_O_to_eq) ((S) ▪ n)) (auto))))))) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf ((((le) ▪ n) ▪ m) ⇒ (((le) ▪ m) ▪ n) ⇒ (((coq.logic.eq) at (nat)) ▪ n) ▪ m), in-⇒ (λ auto' : Prf (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)), in-⇒ (λ auto'' : Prf (((le) ▪ ((S) ▪ m)) ▪ ((S) ▪ n)), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (nat)) (nat)) (S)) (n)) (m)) (el-⇒ (el-⇒ (auto) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((pred) ▪ ((S) ▪ n))) ▪ ((pred) ▪ ((S) ▪ m)))) (((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (monotonic_pred) ((S) ▪ n)) ((S) ▪ m)) (auto'))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ ((pred) ▪ ((S) ▪ m)))) ▪ (((le) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ n) ▪ __)) ▪ (((le) ▪ n) ▪ m))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ n) ▪ m))) ((pred) ▪ ((S) ▪ m))) (el-∀ (pred_Sn) (m)))) ((pred) ▪ ((S) ▪ n))) (el-∀ (pred_Sn) (n))))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((pred) ▪ ((S) ▪ m))) ▪ ((pred) ▪ ((S) ▪ n)))) (((le) ▪ m) ▪ n)) (el-⇒ (el-∀ (el-∀ (monotonic_pred) ((S) ▪ m)) ((S) ▪ n)) (auto''))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ ((pred) ▪ ((S) ▪ n)))) ▪ (((le) ▪ m) ▪ n))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ m) ▪ __)) ▪ (((le) ▪ m) ▪ n))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ m) ▪ n))) ((pred) ▪ ((S) ▪ n))) (el-∀ (pred_Sn) (n)))) ((pred) ▪ ((S) ▪ m))) (el-∀ (pred_Sn) (m)))))))))));
symbol plus_minus : Prf (`∀ m : El (nat), `∀ n : El (nat), `∀ p : El (nat), (((le) ▪ m) ▪ n) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ n) ▪ p)) ▪ m)) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), `∀ p : El (nat), (((le) ▪ __) ▪ _0) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ _0) ▪ __)) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ _0) ▪ p)) ▪ __))) (in-∀ (λ n : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ auto : Prf (((le) ▪ O) ▪ n), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ __) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ n) ▪ p)) ▪ O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ n) ▪ p)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ n) ▪ p)) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((plus) ▪ n) ▪ p))) (((minus) ▪ (((plus) ▪ n) ▪ p)) ▪ O)) (el-∀ (minus_n_O) (((plus) ▪ n) ▪ p)))) (((minus) ▪ n) ▪ O)) (el-∀ (minus_n_O) (n))))))) (in-∀ (λ n : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ abs_ : Prf (((le) ▪ ((S) ▪ n)) ▪ O), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ O) ▪ ((S) ▪ n))) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ O) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ ((S) ▪ n)) ▪ O)) (abs_)) (el-∀ (not_le_Sn_O) (n)))))))) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ m)) (`λ' y : El ((nat ⇝ nat)), (`∀ p : El (nat), (((le) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ m) ▪ p)) ▪ n)) ⇒ `∀ p : El (nat), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((y) ▪ ((S) ▪ n))) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ ((S) ▪ m)) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (m)) (`λ' y : El ((nat ⇝ nat)), (`∀ p : El (nat), (((le) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ m) ▪ p)) ▪ n)) ⇒ `∀ p : El (nat), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((y) ▪ ((S) ▪ n))) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ ((S) ▪ m)) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (m)) (`λ' y : El ((nat ⇝ nat)), (`∀ p : El (nat), (((le) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ m) ▪ p)) ▪ n)) ⇒ `∀ p : El (nat), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ ((y) ▪ ((S) ▪ n))) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ ((S) ▪ m)) ▪ p)) ▪ ((S) ▪ n)))) (in-⇒ (λ auto : Prf (`∀ p : El (nat), (((le) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ m) ▪ p)) ▪ n)), in-∀ (λ p : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ m)) (`λ' q : El (nat), ((minus) ▪ m) ▪ q)) (n)) (`λ' y : El (nat), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ y) ▪ p)) ▪ (((minus) ▪ (((plus) ▪ ((S) ▪ m)) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) (((plus) ▪ ((S) ▪ m)) ▪ p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ ((y) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((((filter_nat_type) at (nat ⇝ nat)) ▪ minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (((plus) ▪ m) ▪ p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ ((y) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (eq_plus_body_S) (m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (eq_plus) ((S) ▪ m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus) ((S) ▪ m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (plus_body)) (m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_plus_body_S) (m)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ (((minus_body) ▪ ((y) ▪ p)) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (((plus) ▪ m) ▪ p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ ((y) ▪ ((S) ▪ n)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ (((plus) ▪ m) ▪ p))) (`λ' q : El (nat), ((minus) ▪ (((plus) ▪ m) ▪ p)) ▪ q)) (n)) (`λ' y : El (nat), (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ n)) ▪ p)) ▪ y)) (in-⇒ (λ auto' : Prf (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)), el-⇒ (el-∀ (auto) (p)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((pred) ▪ ((S) ▪ n))) ▪ ((pred) ▪ ((S) ▪ m)))) (((le) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (monotonic_pred) ((S) ▪ n)) ((S) ▪ m)) (auto'))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ ((pred) ▪ ((S) ▪ m)))) ▪ (((le) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ n) ▪ __)) ▪ (((le) ▪ n) ▪ m))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ n) ▪ m))) ((pred) ▪ ((S) ▪ m))) (el-∀ (pred_Sn) (m)))) ((pred) ▪ ((S) ▪ n))) (el-∀ (pred_Sn) (n)))))))))))))))))))))))))));
symbol minus_plus_m_m : Prf (`∀ n : El (nat), `∀ m : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ m) ▪ m)) ▪ n)) ▪ (((minus) ▪ (((plus) ▪ m) ▪ n)) ▪ m))) ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_minus) (m)) (m)) (n)) (el-∀ (le_n) (m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ __) ▪ n)) ▪ (((minus) ▪ (((plus) ▪ m) ▪ n)) ▪ m))) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ __) ▪ (((minus) ▪ (((plus) ▪ m) ▪ n)) ▪ m))) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ n) ▪ m)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ __) ▪ m))) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m)))) (((plus) ▪ m) ▪ n)) (el-∀ (el-∀ (commutative_plus) (m)) (n)))) (((plus) ▪ O) ▪ n)) (el-∀ (plus_O_n) (n)))) (((minus) ▪ m) ▪ m)) (el-∀ (minus_n_n) (m)))));
symbol plus_minus_m_m : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ m) ▪ n) ⇒ (((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lemn : Prf (((le) ▪ m) ▪ n), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) (n)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m))) ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) ▪ n)) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_minus) (m)) (n)) (m)) (lemn))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m))) ▪ ((((coq.logic.eq) at (nat)) ▪ __) ▪ n))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ __) ▪ (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m))) ▪ ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) ▪ n))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) ▪ __)) ▪ ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) ▪ n))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) ▪ n))) (((minus) ▪ (((plus) ▪ n) ▪ m)) ▪ m)) (el-∀ (el-∀ (minus_plus_m_m) (n)) (m)))) (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ n) ▪ m)) (m)))) (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ n) ▪ m)) (m)))))));
symbol minus_to_plus : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), (((le) ▪ m) ▪ n) ⇒ ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ m)) ▪ p) ⇒ (((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ p)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ lemn : Prf (((le) ▪ m) ▪ n), in-⇒ (λ eqp : Prf ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ m)) ▪ p), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m))) ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ p))) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (n)) (m)) (lemn))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ __)) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (p)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ __))) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (((minus) ▪ n) ▪ m)) (eqp))) (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ n) ▪ m)) (m))))))));
symbol plus_to_minus : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ p)) ⇒ (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ m)) ▪ p) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ eqp : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ m) ▪ p)), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (p)) (((minus) ▪ n) ▪ m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ p) ▪ (((minus) ▪ (((plus) ▪ p) ▪ m)) ▪ m))) ((((coq.logic.eq) at (nat)) ▪ p) ▪ (((minus) ▪ n) ▪ m))) (el-∀ (el-∀ (minus_plus_m_m) (p)) (m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ p)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ p) ▪ (((minus) ▪ __) ▪ m))) ▪ ((((coq.logic.eq) at (nat)) ▪ p) ▪ (((minus) ▪ n) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ p) ▪ (((minus) ▪ __) ▪ m))) ▪ ((((coq.logic.eq) at (nat)) ▪ p) ▪ (((minus) ▪ n) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ p) ▪ (((minus) ▪ n) ▪ m)))) (((plus) ▪ m) ▪ p)) (eqp))) (((plus) ▪ p) ▪ m)) (el-∀ (el-∀ (commutative_plus) (p)) (m))))))));
symbol monotonic_le_minus_l : Prf (`∀ p : El (nat), `∀ q : El (nat), `∀ n : El (nat), (((le) ▪ q) ▪ p) ⇒ ((le) ▪ (((minus) ▪ q) ▪ n)) ▪ (((minus) ▪ p) ▪ n)) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), `∀ n : El (nat), (((le) ▪ _0) ▪ __) ⇒ ((le) ▪ (((minus) ▪ _0) ▪ n)) ▪ (((minus) ▪ __) ▪ n))) (in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ lePO : Prf (((le) ▪ p) ▪ O), el-⇒ (el-∀ (el-⇒ (el-∀ (le_n_O_elim) (p)) (lePO)) (`λ' __ : El (nat), ((le) ▪ (((minus) ▪ __) ▪ q)) ▪ (((minus) ▪ O) ▪ q))) (el-∀ (le_n) (((minus) ▪ O) ▪ q))))))) (in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ ((y) ▪ q))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ ((y) ▪ q))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ ((y) ▪ q))) (el-⇒ (el-∀ (eq_plus_body_O) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ ((y) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (nat ⇝ nat)) (plus_body)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ ((y) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (el-∀ (eq_plus) (O)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ ((y) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (eq_minus_body_O) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ (((plus) ▪ ((y) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q))) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (nat ⇝ nat)) (minus_body)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ (((plus) ▪ ((y) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q))) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (el-∀ (eq_minus) (O)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ (((plus) ▪ ((y) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q))) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (eq_minus_body_O) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ (((plus) ▪ (((minus) ▪ ((y) ▪ q)) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q))) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_filter_nat_type_O) (nat ⇝ nat)) (minus_body)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ (((plus) ▪ (((minus) ▪ ((y) ▪ q)) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q))) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (el-⇒ (el-∀ (el-∀ (eq_minus) (O)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ O) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ O) ▪ q)) ▪ (((plus) ▪ (((minus) ▪ ((y) ▪ q)) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q))) ▪ (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))) (in-⇒ (λ auto : Prf (((le) ▪ O) ▪ ((S) ▪ p)), el-∀ (el-∀ (le_plus_minus_m_m) (((minus) ▪ O) ▪ q)) (((((match_nat_type) at (nat)) ▪ ((S) ▪ p)) ▪ (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) ▪ q)))))))))))))))))) (in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-⇒ (λ Hind : Prf (`∀ n0 : El (nat), (((le) ▪ q) ▪ p) ⇒ ((le) ▪ (((minus) ▪ q) ▪ n0)) ▪ (((minus) ▪ p) ▪ n0)), in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ ((S) ▪ q)) ▪ __)) ▪ (((minus) ▪ ((S) ▪ p)) ▪ __))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ q)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((y) ▪ O)) ▪ (((minus) ▪ ((S) ▪ p)) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (q)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((y) ▪ O)) ▪ (((minus) ▪ ((S) ▪ p)) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (q)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((y) ▪ O)) ▪ (((minus) ▪ ((S) ▪ p)) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat)) ((S) ▪ q)) (`λ' z : El (nat), ((minus) ▪ q) ▪ z)) (`λ' y : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ y) ▪ (((minus) ▪ ((S) ▪ p)) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((S) ▪ q)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((S) ▪ q)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((S) ▪ q)) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (nat)) ((S) ▪ p)) (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) (`λ' y : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((S) ▪ q)) ▪ y)) (in-⇒ (λ auto : Prf (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)), auto))))))))))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ q)) (`λ' y : El ((nat ⇝ nat)), `∀ a : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((y) ▪ ((S) ▪ a))) ▪ (((minus) ▪ ((S) ▪ p)) ▪ ((S) ▪ a)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (q)) (`λ' y : El ((nat ⇝ nat)), `∀ a : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((y) ▪ ((S) ▪ a))) ▪ (((minus) ▪ ((S) ▪ p)) ▪ ((S) ▪ a)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (q)) (`λ' y : El ((nat ⇝ nat)), `∀ a : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ ((y) ▪ ((S) ▪ a))) ▪ (((minus) ▪ ((S) ▪ p)) ▪ ((S) ▪ a)))) (in-∀ (λ a : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ q)) (`λ' z : El (nat), ((minus) ▪ q) ▪ z)) (a)) (`λ' y : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ y) ▪ (((minus) ▪ ((S) ▪ p)) ▪ ((S) ▪ a)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus) ((S) ▪ p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ q) ▪ a)) ▪ ((y) ▪ ((S) ▪ a)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ nat)) (minus_body)) (p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ q) ▪ a)) ▪ ((y) ▪ ((S) ▪ a)))) (el-⇒ (el-∀ (el-∀ (sym_eq_minus_body_S) (p)) (`λ' y : El ((nat ⇝ nat)), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ q) ▪ a)) ▪ ((y) ▪ ((S) ▪ a)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (nat)) ((S) ▪ p)) (`λ' q0 : El (nat), ((minus) ▪ p) ▪ q0)) (a)) (`λ' y : El (nat), (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)) ⇒ ((le) ▪ (((minus) ▪ q) ▪ a)) ▪ y)) (in-⇒ (λ leSS : Prf (((le) ▪ ((S) ▪ q)) ▪ ((S) ▪ p)), el-⇒ (el-∀ (Hind) (a)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ ((pred) ▪ ((S) ▪ q))) ▪ ((pred) ▪ ((S) ▪ p)))) (((le) ▪ q) ▪ p)) (el-⇒ (el-∀ (el-∀ (monotonic_pred) ((S) ▪ q)) ((S) ▪ p)) (leSS))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (q)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ __) ▪ ((pred) ▪ ((S) ▪ p)))) ▪ (((le) ▪ q) ▪ p))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (p)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ q) ▪ __)) ▪ (((le) ▪ q) ▪ p))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ q) ▪ p))) ((pred) ▪ ((S) ▪ p))) (el-∀ (pred_Sn) (p)))) ((pred) ▪ ((S) ▪ q))) (el-∀ (pred_Sn) (q)))))))))))))))) (n))))));
symbol le_plus_to_minus : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), (((le) ▪ n) ▪ (((plus) ▪ p) ▪ m)) ⇒ ((le) ▪ (((minus) ▪ n) ▪ m)) ▪ p) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ lep : Prf (((le) ▪ n) ▪ (((plus) ▪ p) ▪ m)), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ (((minus) ▪ (((plus) ▪ p) ▪ m)) ▪ m))) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ p)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (((plus) ▪ p) ▪ m)) (n)) (m)) (lep))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (p)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ p))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ p))) (((minus) ▪ (((plus) ▪ p) ▪ m)) ▪ m)) (el-∀ (el-∀ (minus_plus_m_m) (p)) (m)))))));
symbol monotonic_le_minus_r : Prf (`∀ p : El (nat), `∀ q : El (nat), `∀ n : El (nat), (((le) ▪ q) ▪ p) ⇒ ((le) ▪ (((minus) ▪ n) ▪ p)) ▪ (((minus) ▪ n) ▪ q)) ≔ in-∀ (λ p : El (nat),  in-∀ (λ q : El (nat),  in-∀ (λ n : El (nat),  in-⇒ (λ lepq : Prf (((le) ▪ q) ▪ p), el-⇒ (el-∀ (el-∀ (el-∀ (le_plus_to_minus) (n)) (p)) (((minus) ▪ n) ▪ q)) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n)) (((plus) ▪ (((minus) ▪ n) ▪ q)) ▪ q)) (((plus) ▪ (((minus) ▪ n) ▪ q)) ▪ p)) (el-∀ (el-∀ (le_plus_minus_m_m) (n)) (q))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_plus_r) (((minus) ▪ n) ▪ q)) (q)) (p)) (lepq)))))));
symbol minus_le : Prf (`∀ x : El (nat), `∀ y : El (nat), ((le) ▪ (((minus) ▪ x) ▪ y)) ▪ x) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ x) ▪ y)) ▪ (((minus) ▪ (((plus) ▪ x) ▪ y)) ▪ y))) (((le) ▪ (((minus) ▪ x) ▪ y)) ▪ x)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (((plus) ▪ x) ▪ y)) (x)) (y)) (el-∀ (el-∀ (le_plus_n_r) (y)) (x)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (x)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ x) ▪ y)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ x) ▪ y)) ▪ x))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ x) ▪ y)) ▪ x))) (((minus) ▪ (((plus) ▪ x) ▪ y)) ▪ y)) (el-∀ (el-∀ (minus_plus_m_m) (x)) (y)))));
symbol not_eq_to_le_to_lt : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (((le) ▪ n) ▪ m) ⇒ ((lt) ▪ n) ▪ m) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ Hneq : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)), in-⇒ (λ Hle : Prf (((le) ▪ n) ▪ m), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (((lt) ▪ n) ▪ m)) ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) (((lt) ▪ n) ▪ m)) (in-⇒ (λ auto : Prf (((lt) ▪ n) ▪ m), auto))) (in-⇒ (λ Heq : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), el-⇒ (el-∀ (el-∀ (not_le_to_lt) (m)) (n)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (((le) ▪ m) ▪ n)) ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) (in-⇒ (λ auto : Prf (((le) ▪ m) ▪ n), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n))) (m)) (Heq)))) (Hneq))))) (el-⇒ (el-∀ (el-∀ (le_to_or_lt_eq) (n)) (m)) (Hle))))));
symbol eq_minus_O : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ m)) ▪ O) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ lenm : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-∀ (le_n_O_elim) (((minus) ▪ n) ▪ m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ (((minus) ▪ n) ▪ n))) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ O)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_r) (m)) (n)) (n)) (lenm))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ O))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ O))) (((minus) ▪ n) ▪ n)) (el-∀ (minus_n_n) (n))))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ O)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O)))));
symbol distributive_times_minus : Prf ((((coq.relations.distributive) at (nat)) ▪ times) ▪ minus) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (((lt) ▪ b) ▪ c)) ((coq.connectives.Not) ▪ (((lt) ▪ b) ▪ c))) ((((coq.logic.eq) at (nat)) ▪ (((times) ▪ a) ▪ (((minus) ▪ b) ▪ c))) ▪ (((minus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c)))) (in-⇒ (λ Hbc : Prf (((lt) ▪ b) ▪ c), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat)) (O)) (`λ' x : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ a) ▪ x)) ▪ (((minus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat)) (O)) (`λ' x : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ a) ▪ O)) ▪ x)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (O)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ O)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))) (((times) ▪ a) ▪ O)) (el-∀ (times_n_O) (a)))) (((minus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c))) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (((times) ▪ a) ▪ b)) (((times) ▪ a) ▪ c)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_times_r) (a)) (b)) (c)) (el-⇒ (el-∀ (el-∀ (lt_to_le) (b)) (c)) (Hbc)))))) (((minus) ▪ b) ▪ c)) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (b)) (c)) (el-⇒ (el-∀ (el-∀ (lt_to_le) (b)) (c)) (Hbc)))))) (in-⇒ (λ Hbc : Prf ((coq.connectives.Not) ▪ (((lt) ▪ b) ▪ c)), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (((minus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c))) (((times) ▪ a) ▪ (((minus) ▪ b) ▪ c))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c))) ▪ (((times) ▪ a) ▪ (((minus) ▪ b) ▪ c)))) ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c))) ▪ (((times) ▪ a) ▪ (((minus) ▪ b) ▪ c)))) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (((times) ▪ a) ▪ b)) (((times) ▪ a) ▪ c)) (((times) ▪ a) ▪ (((minus) ▪ b) ▪ c))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat)) (((times) ▪ a) ▪ (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c)))) (`λ' x_1 : El (nat), (((coq.logic.eq) at (nat)) ▪ (((times) ▪ a) ▪ b)) ▪ x_1)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (nat)) (nat)) ((times) ▪ a)) (b)) (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ b) ▪ (((plus) ▪ (((minus) ▪ b) ▪ c)) ▪ c))) ((((coq.logic.eq) at (nat)) ▪ b) ▪ (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c)))) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (b)) (c)) (el-⇒ (el-∀ (el-∀ (not_lt_to_le) (b)) (c)) (Hbc)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (nat)) ▪ b) ▪ __)) ▪ ((((coq.logic.eq) at (nat)) ▪ b) ▪ (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ b) ▪ (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c))))) (((plus) ▪ (((minus) ▪ b) ▪ c)) ▪ c)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ b) ▪ c)) (c)))))) (((plus) ▪ (((times) ▪ a) ▪ c)) ▪ (((times) ▪ a) ▪ (((minus) ▪ b) ▪ c)))) (el-∀ (el-∀ (el-∀ (distributive_times_plus) (a)) (c)) (((minus) ▪ b) ▪ c))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((times) ▪ a) ▪ b)) ▪ (((times) ▪ a) ▪ c))) ▪ (((times) ▪ a) ▪ (((minus) ▪ b) ▪ c)))))))) (el-∀ (el-∀ (decidable_lt) (b)) (c)))));
symbol minus_plus : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((minus) ▪ n) ▪ m)) ▪ p)) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (((le) ▪ (((plus) ▪ m) ▪ p)) ▪ n)) ((coq.connectives.Not) ▪ (((le) ▪ (((plus) ▪ m) ▪ p)) ▪ n))) ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((minus) ▪ n) ▪ m)) ▪ p)) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (in-⇒ (λ Hlt : Prf (((le) ▪ (((plus) ▪ m) ▪ p)) ▪ n), el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (((minus) ▪ n) ▪ m)) (p)) (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (n)) (m)) (((plus) ▪ p) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat)) (((plus) ▪ (((plus) ▪ m) ▪ p)) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (`λ' x_1 : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ x_1)) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (minus_to_plus) (n)) (((plus) ▪ m) ▪ p)) (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))) (Hlt)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))))) (((plus) ▪ m) ▪ (((plus) ▪ p) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))))) (el-∀ (el-∀ (el-∀ (associative_plus) (m)) (p)) (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p)))))))) (in-⇒ (λ Hlt : Prf ((coq.connectives.Not) ▪ (((le) ▪ (((plus) ▪ m) ▪ p)) ▪ n)), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat)) (O)) (`λ' x : El (nat), (((coq.logic.eq) at (nat)) ▪ x) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))) (O)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))) ▪ O)) ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))) ▪ O)) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (n)) (((plus) ▪ m) ▪ p)) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n)) ((S) ▪ n)) (((plus) ▪ m) ▪ p)) (el-∀ (le_n_Sn) (n))) (el-⇒ (el-∀ (el-∀ (not_le_to_lt) (((plus) ▪ m) ▪ p)) (n)) (Hlt))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (nat)) ▪ (((minus) ▪ n) ▪ (((plus) ▪ m) ▪ p))) ▪ O))))) (((minus) ▪ (((minus) ▪ n) ▪ m)) ▪ p)) (el-⇒ (el-∀ (el-∀ (eq_minus_O) (((minus) ▪ n) ▪ m)) (p)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ (((minus) ▪ (((plus) ▪ p) ▪ m)) ▪ m))) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ p)) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (((plus) ▪ p) ▪ m)) (n)) (m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ n) ▪ (((plus) ▪ m) ▪ p))) (((le) ▪ n) ▪ (((plus) ▪ p) ▪ m))) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (transitive_le) (n)) ((S) ▪ n)) (((plus) ▪ m) ▪ p)) (el-∀ (le_n_Sn) (n))) (el-⇒ (el-∀ (el-∀ (not_le_to_lt) (((plus) ▪ m) ▪ p)) (n)) (Hlt)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ m) ▪ p)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ n) ▪ (((plus) ▪ m) ▪ p))) ▪ (((le) ▪ n) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ n) ▪ (((plus) ▪ m) ▪ p)))) (((plus) ▪ p) ▪ m)) (el-∀ (el-∀ (commutative_plus) (p)) (m)))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (p)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ p))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ n) ▪ m)) ▪ p))) (((minus) ▪ (((plus) ▪ p) ▪ m)) ▪ m)) (el-∀ (el-∀ (minus_plus_m_m) (p)) (m)))))))) (el-∀ (el-∀ (decidable_le) (((plus) ▪ m) ▪ p)) (n)))));
symbol minus_minus : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ p : El (nat), (((le) ▪ p) ▪ m) ⇒ (((le) ▪ m) ▪ n) ⇒ (((coq.logic.eq) at (nat)) ▪ (((plus) ▪ p) ▪ (((minus) ▪ n) ▪ m))) ▪ (((minus) ▪ n) ▪ (((minus) ▪ m) ▪ p))) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-∀ (λ p : El (nat),  in-⇒ (λ lepm : Prf (((le) ▪ p) ▪ m), in-⇒ (λ lemn : Prf (((le) ▪ m) ▪ n), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (nat)) (((minus) ▪ n) ▪ (((minus) ▪ m) ▪ p))) (((plus) ▪ p) ▪ (((minus) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (plus_to_minus) (n)) (((minus) ▪ m) ▪ p)) (((plus) ▪ p) ▪ (((minus) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat)) (((plus) ▪ (((plus) ▪ (((minus) ▪ m) ▪ p)) ▪ p)) ▪ (((minus) ▪ n) ▪ m))) (`λ' x_1 : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ x_1)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat)) (m)) (`λ' x_1 : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ (((plus) ▪ x_1) ▪ (((minus) ▪ n) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat)) (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) (`λ' x_1 : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ x_1)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (nat)) (n)) (`λ' x_1 : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ x_1)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n))) (((plus) ▪ (((minus) ▪ n) ▪ m)) ▪ m)) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (n)) (m)) (lemn)))) (((plus) ▪ m) ▪ (((minus) ▪ n) ▪ m))) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ n) ▪ m)) (m)))) (((plus) ▪ (((minus) ▪ m) ▪ p)) ▪ p)) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (m)) (p)) (lepm)))) (((plus) ▪ (((minus) ▪ m) ▪ p)) ▪ (((plus) ▪ p) ▪ (((minus) ▪ n) ▪ m)))) (el-∀ (el-∀ (el-∀ (associative_plus) (((minus) ▪ m) ▪ p)) (p)) (((minus) ▪ n) ▪ m)))))))));
symbol minus_minus_comm : Prf (`∀ a : El (nat), `∀ b : El (nat), `∀ c : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ≔ in-∀ (λ a : El (nat),  in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (le_to_le_to_eq) (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ (((minus) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ c)) ▪ c))) (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ c)) (((minus) ▪ a) ▪ b)) (c)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ c))) (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ c))) (el-∀ (el-∀ (le_plus_minus_m_m) (((minus) ▪ a) ▪ b)) (c))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((minus) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ __) ▪ c))) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ c)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ c) ▪ (((minus) ▪ a) ▪ (((plus) ▪ b) ▪ c)))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ c)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ c) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ c) ▪ (((minus) ▪ a) ▪ (((plus) ▪ b) ▪ c))))) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ c) ▪ __))) ▪ (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ c) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ a) ▪ b)) ▪ (((plus) ▪ c) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b))))) (((minus) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ c) ▪ b)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ (((minus) ▪ a) ▪ __))) (el-∀ (el-∀ (el-∀ (minus_plus) (a)) (c)) (b))) (((plus) ▪ b) ▪ c)) (el-∀ (el-∀ (commutative_plus) (c)) (b))))) (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ c)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) (c)))) (((plus) ▪ (((minus) ▪ a) ▪ (((plus) ▪ b) ▪ c))) ▪ c)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ a) ▪ (((plus) ▪ b) ▪ c))) (c)))) (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) (el-∀ (el-∀ (el-∀ (minus_plus) (a)) (b)) (c)))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)))) (((minus) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ c)) ▪ c)) (el-∀ (el-∀ (minus_plus_m_m) (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) (c))))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ (((minus) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ b)) ▪ b))) (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c))) (el-⇒ (el-∀ (el-∀ (el-∀ (monotonic_le_minus_l) (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ b)) (((minus) ▪ a) ▪ c)) (b)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ b))) (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ b))) (el-∀ (el-∀ (le_plus_minus_m_m) (((minus) ▪ a) ▪ c)) (b))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((minus) ▪ a) ▪ (((plus) ▪ c) ▪ b))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ __) ▪ b))) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ b)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ b) ▪ (((minus) ▪ a) ▪ (((plus) ▪ c) ▪ b)))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ b)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ b) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ b) ▪ (((minus) ▪ a) ▪ (((plus) ▪ c) ▪ b))))) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ b) ▪ __))) ▪ (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ b) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c))))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ a) ▪ c)) ▪ (((plus) ▪ b) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c))))) (((minus) ▪ a) ▪ (((plus) ▪ c) ▪ b))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ b) ▪ c)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ (((minus) ▪ a) ▪ __))) (el-∀ (el-∀ (el-∀ (minus_plus) (a)) (b)) (c))) (((plus) ▪ c) ▪ b)) (el-∀ (el-∀ (commutative_plus) (b)) (c))))) (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ b)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) (b)))) (((plus) ▪ (((minus) ▪ a) ▪ (((plus) ▪ c) ▪ b))) ▪ b)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ a) ▪ (((plus) ▪ c) ▪ b))) (b)))) (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) (el-∀ (el-∀ (el-∀ (minus_plus) (a)) (c)) (b)))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) (`λ' __ : El (nat), (((coq.logic.eq) at (prop)) ▪ (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ __)) ▪ (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((le) ▪ (((minus) ▪ (((minus) ▪ a) ▪ c)) ▪ b)) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)))) (((minus) ▪ (((plus) ▪ (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) ▪ b)) ▪ b)) (el-∀ (el-∀ (minus_plus_m_m) (((minus) ▪ (((minus) ▪ a) ▪ b)) ▪ c)) (b)))))));
symbol minus_le_minus_minus_comm : Prf (`∀ b : El (nat), `∀ c : El (nat), `∀ a : El (nat), (((le) ▪ c) ▪ b) ⇒ (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ a) ▪ (((minus) ▪ b) ▪ c))) ▪ (((minus) ▪ (((plus) ▪ a) ▪ c)) ▪ b)) ≔ in-∀ (λ b : El (nat),  in-∀ (λ c : El (nat),  in-∀ (λ a : El (nat),  in-⇒ (λ H : Prf (((le) ▪ c) ▪ b), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (nat)) (((plus) ▪ (((minus) ▪ b) ▪ c)) ▪ c)) (`λ' x : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ a) ▪ (((minus) ▪ b) ▪ c))) ▪ (((minus) ▪ (((plus) ▪ a) ▪ c)) ▪ x))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ c) ▪ a)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ a) ▪ (((minus) ▪ b) ▪ c))) ▪ (((minus) ▪ __) ▪ (((plus) ▪ (((minus) ▪ b) ▪ c)) ▪ c)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ a) ▪ (((minus) ▪ b) ▪ c))) ▪ (((minus) ▪ (((plus) ▪ c) ▪ a)) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((minus) ▪ (((minus) ▪ (((plus) ▪ c) ▪ a)) ▪ c)) ▪ (((minus) ▪ b) ▪ c))) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ a) ▪ (((minus) ▪ b) ▪ c))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((minus) ▪ (((plus) ▪ c) ▪ a)) ▪ c)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ __) ▪ (((minus) ▪ b) ▪ c))) ▪ (((minus) ▪ (((minus) ▪ (((plus) ▪ c) ▪ a)) ▪ c)) ▪ (((minus) ▪ b) ▪ c)))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((minus) ▪ (((minus) ▪ (((plus) ▪ c) ▪ a)) ▪ c)) ▪ (((minus) ▪ b) ▪ c)))) (a)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((plus) ▪ a) ▪ c)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ a) ▪ (((minus) ▪ __) ▪ c))) (el-∀ (el-∀ (minus_plus_m_m) (a)) (c))) (((plus) ▪ c) ▪ a)) (el-∀ (el-∀ (commutative_plus) (a)) (c))))) (((minus) ▪ (((plus) ▪ c) ▪ a)) ▪ (((plus) ▪ c) ▪ (((minus) ▪ b) ▪ c)))) (el-∀ (el-∀ (el-∀ (minus_plus) (((plus) ▪ c) ▪ a)) (c)) (((minus) ▪ b) ▪ c)))) (((plus) ▪ (((minus) ▪ b) ▪ c)) ▪ c)) (el-∀ (el-∀ (commutative_plus) (((minus) ▪ b) ▪ c)) (c)))) (((plus) ▪ a) ▪ c)) (el-∀ (el-∀ (commutative_plus) (a)) (c)))) (b)) (el-⇒ (el-∀ (el-∀ (plus_minus_m_m) (b)) (c)) (H))))));
symbol minus_plus_plus_l : Prf (`∀ x : El (nat), `∀ y : El (nat), `∀ h : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((plus) ▪ x) ▪ h)) ▪ (((plus) ▪ y) ▪ h))) ▪ (((minus) ▪ x) ▪ y)) ≔ in-∀ (λ x : El (nat),  in-∀ (λ y : El (nat),  in-∀ (λ h : El (nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (((minus) ▪ (((minus) ▪ (((plus) ▪ x) ▪ h)) ▪ y)) ▪ h)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((minus) ▪ x) ▪ y))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((minus) ▪ x) ▪ y)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ __) ▪ (((minus) ▪ x) ▪ y))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (((minus) ▪ x) ▪ y))) (((minus) ▪ (((minus) ▪ (((plus) ▪ x) ▪ h)) ▪ y)) ▪ h)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (nat)) (((minus) ▪ (((plus) ▪ x) ▪ h)) ▪ h)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ (((minus) ▪ (((minus) ▪ (((plus) ▪ x) ▪ h)) ▪ y)) ▪ h)) ▪ (((minus) ▪ __) ▪ y))) (el-∀ (el-∀ (el-∀ (minus_minus_comm) (((plus) ▪ x) ▪ h)) (y)) (h))) (x)) (el-∀ (el-∀ (minus_plus_m_m) (x)) (h))))) (((minus) ▪ (((plus) ▪ x) ▪ h)) ▪ (((plus) ▪ y) ▪ h))) (el-∀ (el-∀ (el-∀ (minus_plus) (((plus) ▪ x) ▪ h)) (y)) (h)))));
constant symbol eqb : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol eqb_body : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol axiom_eqb : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ coq.bool.bool)) ▪ ((eqb) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ eqb_body) ▪ n));
symbol eq_eqb : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((eqb) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ eqb_body) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool)) ((eqb) ▪ n)) ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ eqb_body) ▪ n)) (el-∀ (axiom_eqb) (n)));
symbol sym_eq_eqb : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ eqb_body) ▪ n)) ▪ ((eqb) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool)) ((eqb) ▪ n)) ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ eqb_body) ▪ n)) (el-∀ (eq_eqb) (n)));
constant symbol axiom_eqb_body_O : Prf ((((coq.connectives.equal) at (nat ⇝ coq.bool.bool)) ▪ ((eqb_body) ▪ O)) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.true) ▪ (`λ' q : El (nat), coq.bool.false)) ▪ m));
symbol eq_eqb_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((eqb_body) ▪ O)) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.true) ▪ (`λ' q : El (nat), coq.bool.false)) ▪ m)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool)) ((eqb_body) ▪ O)) (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.true) ▪ (`λ' q : El (nat), coq.bool.false)) ▪ m)) (axiom_eqb_body_O);
symbol sym_eq_eqb_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.true) ▪ (`λ' q : El (nat), coq.bool.false)) ▪ m)) ▪ ((eqb_body) ▪ O)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool)) ((eqb_body) ▪ O)) (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.true) ▪ (`λ' q : El (nat), coq.bool.false)) ▪ m)) (eq_eqb_body_O);
constant symbol axiom_eqb_body_S : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ coq.bool.bool)) ▪ ((eqb_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((eqb) ▪ n) ▪ q)) ▪ m));
symbol eq_eqb_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((eqb_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((eqb) ▪ n) ▪ q)) ▪ m)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool)) ((eqb_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((eqb) ▪ n) ▪ q)) ▪ m)) (el-∀ (axiom_eqb_body_S) (n)));
symbol sym_eq_eqb_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((eqb) ▪ n) ▪ q)) ▪ m)) ▪ ((eqb_body) ▪ ((S) ▪ n))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool)) ((eqb_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((eqb) ▪ n) ▪ q)) ▪ m)) (el-∀ (eq_eqb_body_S) (n)));
symbol eqb_elim : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ n) ▪ m)) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ __) ▪ _0) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ __) ▪ _0)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ __) ▪ _0))) (in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_nat_prop) (`λ' __ : El (nat), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ __) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ __)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ O) ▪ __))) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (O)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool)) (eqb_body)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (sym_eq_eqb_body_O) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool)) (coq.bool.true)) (`λ' q : El (nat), coq.bool.false)) (`λ' y : El (coq.bool.bool), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ y)) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf (((((coq.logic.eq) at (nat)) ▪ O) ▪ O) ⇒ (P) ▪ coq.bool.true), in-⇒ (λ auto' : Prf (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ O)) ⇒ (P) ▪ coq.bool.false), el-⇒ (auto) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (O))))))))))) (in-∀ (λ auto : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (O)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ auto)))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool)) (eqb_body)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ auto)))) (el-⇒ (el-∀ (sym_eq_eqb_body_O) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ auto)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool)) (coq.bool.true)) (`λ' q : El (nat), coq.bool.false)) (auto)) (`λ' y : El (coq.bool.bool), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ y)) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto' : Prf (((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto)) ⇒ (P) ▪ coq.bool.true), in-⇒ (λ auto'' : Prf (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ O) ▪ ((S) ▪ auto))) ⇒ (P) ▪ coq.bool.false), el-⇒ (auto'') (el-∀ (not_eq_O_S) (auto)))))))))))) (n)))) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) ((S) ▪ n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool)) (eqb_body)) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb_body_S) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool)) (coq.bool.false)) (`λ' q : El (nat), ((eqb) ▪ n) ▪ q)) (`λ' y : El (coq.bool.bool), `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ y)) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true), in-⇒ (λ auto' : Prf (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false), el-⇒ (auto') (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_not_eq) (nat)) (O)) ((S) ▪ n)) (el-∀ (not_eq_O_S) (n))))))))))))) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) ((S) ▪ n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (`∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool)) (eqb_body)) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (`∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb_body_S) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (`∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool)) (coq.bool.false)) (`λ' q : El (nat), ((eqb) ▪ n) ▪ q)) (m)) (`λ' y : El (coq.bool.bool), (`∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ y)) (in-⇒ (λ auto : Prf (`∀ P : El ((coq.bool.bool ⇝ prop)), (((((coq.logic.eq) at (nat)) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((eqb) ▪ n) ▪ m)), in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto' : Prf (((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true), in-⇒ (λ auto'' : Prf (((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false), el-⇒ (el-⇒ (el-∀ (auto) (P)) (in-⇒ (λ auto''' : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), el-⇒ (auto') (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ ((S) ▪ n)) ▪ ((S) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) ((S) ▪ n))) (m)) (auto'''))))) (in-⇒ (λ auto''' : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)), el-⇒ (auto'') (el-⇒ (el-∀ (el-∀ (not_eq_S) (n)) (m)) (auto''')))))))))))))));
symbol eqb_n_n : Prf (`∀ n : El (nat), (((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ n) ▪ n)) ▪ coq.bool.true) ≔ in-∀ (λ n : El (nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (nat_ind) (`λ' _x_365 : El (nat), (((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ _x_365) ▪ _x_365)) ▪ coq.bool.true)) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb) (O)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ O)) ▪ coq.bool.true)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool)) (eqb_body)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ O)) ▪ coq.bool.true)) (el-⇒ (el-∀ (sym_eq_eqb_body_O) (`λ' y : El ((nat ⇝ coq.bool.bool)), (((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ O)) ▪ coq.bool.true)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool)) (coq.bool.true)) (`λ' q : El (nat), coq.bool.false)) (`λ' y : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ y) ▪ coq.bool.true)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))))))) (in-∀ (λ x_366 : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_eqb) ((S) ▪ x_366)) (`λ' y : El ((nat ⇝ coq.bool.bool)), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ x_366) ▪ x_366)) ▪ coq.bool.true) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ ((S) ▪ x_366))) ▪ coq.bool.true)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool)) (eqb_body)) (x_366)) (`λ' y : El ((nat ⇝ coq.bool.bool)), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ x_366) ▪ x_366)) ▪ coq.bool.true) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ ((S) ▪ x_366))) ▪ coq.bool.true)) (el-⇒ (el-∀ (el-∀ (sym_eq_eqb_body_S) (x_366)) (`λ' y : El ((nat ⇝ coq.bool.bool)), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ x_366) ▪ x_366)) ▪ coq.bool.true) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ ((S) ▪ x_366))) ▪ coq.bool.true)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool)) (coq.bool.false)) (`λ' q : El (nat), ((eqb) ▪ x_366) ▪ q)) (x_366)) (`λ' y : El (coq.bool.bool), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ x_366) ▪ x_366)) ▪ coq.bool.true) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ y) ▪ coq.bool.true)) (in-⇒ (λ _x_368 : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ x_366) ▪ x_366)) ▪ coq.bool.true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.true)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (((eqb) ▪ x_366) ▪ x_366)) (_x_368))))))))) (n));
symbol eqb_true_to_eq : Prf (`∀ n : El (nat), `∀ m : El (nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ n) ▪ m)) ▪ coq.bool.true) ⇒ (((coq.logic.eq) at (nat)) ▪ n) ▪ m) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (eqb_elim) (n)) (m)) (`λ' __ : El (coq.bool.bool), ((((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true) ⇒ (((coq.logic.eq) at (nat)) ▪ n) ▪ m)) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), in-⇒ (λ auto' : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n))) (m)) (auto))))) (in-⇒ (λ __ : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)), in-⇒ (λ abs_ : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.false) ▪ coq.bool.true), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.true)) (`λ' __1 : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ __1)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (coq.bool.false)) (abs_))) (coq.bool.not_eq_true_false)))))));
symbol eqb_false_to_not_eq : Prf (`∀ n : El (nat), `∀ m : El (nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ n) ▪ m)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (eqb_elim) (n)) (m)) (`λ' __ : El (coq.bool.bool), ((((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m))) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), in-⇒ (λ auto' : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false)) (in-⇒ (λ auto'' : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool)) (coq.bool.true)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (coq.bool.false)) (auto')))) (coq.bool.not_eq_true_false))))) (in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)), in-⇒ (λ auto' : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.false) ▪ coq.bool.false), auto)))));
symbol eq_to_eqb_true : Prf (`∀ n : El (nat), `∀ m : El (nat), ((((coq.logic.eq) at (nat)) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ n) ▪ m)) ▪ coq.bool.true) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ auto : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ n) ▪ __)) ▪ coq.bool.true)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.true)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (((eqb) ▪ n) ▪ n)) (el-∀ (eqb_n_n) (n)))) (m)) (auto))));
symbol not_eq_to_eqb_false : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ (((eqb) ▪ n) ▪ m)) ▪ coq.bool.false) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  in-⇒ (λ noteq : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (eqb_elim) (n)) (m)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.false)) (in-⇒ (λ Heq : Prf ((((coq.logic.eq) at (nat)) ▪ n) ▪ m), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (nat)) (n)) (`λ' __ : El (nat), (((coq.logic.eq) at (nat)) ▪ n) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (nat)) (n))) (m)) (Heq))) (noteq))))) (in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (nat)) ▪ n) ▪ m)), el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.false))))));
constant symbol leb : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol leb_body : Els (↑ (nat ⇝ nat ⇝ coq.bool.bool));
constant symbol axiom_leb : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ coq.bool.bool)) ▪ ((leb) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ leb_body) ▪ n));
symbol eq_leb : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((leb) ▪ n)) ▪ ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ leb_body) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool)) ((leb) ▪ n)) ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ leb_body) ▪ n)) (el-∀ (axiom_leb) (n)));
symbol sym_eq_leb : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ leb_body) ▪ n)) ▪ ((leb) ▪ n)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool)) ((leb) ▪ n)) ((((filter_nat_type) at (nat ⇝ coq.bool.bool)) ▪ leb_body) ▪ n)) (el-∀ (eq_leb) (n)));
constant symbol axiom_leb_body_O : Prf ((((coq.connectives.equal) at (nat ⇝ coq.bool.bool)) ▪ ((leb_body) ▪ O)) ▪ (`λ' m : El (nat), coq.bool.true));
symbol eq_leb_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((leb_body) ▪ O)) ▪ (`λ' m : El (nat), coq.bool.true)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool)) ((leb_body) ▪ O)) (`λ' m : El (nat), coq.bool.true)) (axiom_leb_body_O);
symbol sym_eq_leb_body_O : Prf ((((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ (`λ' m : El (nat), coq.bool.true)) ▪ ((leb_body) ▪ O)) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool)) ((leb_body) ▪ O)) (`λ' m : El (nat), coq.bool.true)) (eq_leb_body_O);
constant symbol axiom_leb_body_S : Prf (`∀ n : El (nat), (((coq.connectives.equal) at (nat ⇝ coq.bool.bool)) ▪ ((leb_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((leb) ▪ n) ▪ q)) ▪ m));
symbol eq_leb_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ ((leb_body) ▪ ((S) ▪ n))) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((leb) ▪ n) ▪ q)) ▪ m)) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (nat ⇝ coq.bool.bool)) ((leb_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((leb) ▪ n) ▪ q)) ▪ m)) (el-∀ (axiom_leb_body_S) (n)));
symbol sym_eq_leb_body_S : Prf (`∀ n : El (nat), (((coq.leibniz.leibniz) at (nat ⇝ coq.bool.bool)) ▪ (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((leb) ▪ n) ▪ q)) ▪ m)) ▪ ((leb_body) ▪ ((S) ▪ n))) ≔ in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (nat ⇝ coq.bool.bool)) ((leb_body) ▪ ((S) ▪ n))) (`λ' m : El (nat), ((((match_nat_type) at (coq.bool.bool)) ▪ coq.bool.false) ▪ (`λ' q : El (nat), ((leb) ▪ n) ▪ q)) ▪ m)) (el-∀ (eq_leb_body_S) (n)));
symbol leb_elim : Prf (`∀ n : El (nat), `∀ m : El (nat), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((leb) ▪ n) ▪ m)) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (nat_elim2) (`λ' __ : El (nat), `λ' _0 : El (nat), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ __) ▪ _0) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ __) ▪ _0)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((leb) ▪ __) ▪ _0))) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_leb) (O)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ O) ▪ n) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ O) ▪ n)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ n))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_O) (nat ⇝ coq.bool.bool)) (leb_body)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ O) ▪ n) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ O) ▪ n)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ n))) (el-⇒ (el-∀ (sym_eq_leb_body_O) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ O) ▪ n) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ O) ▪ n)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ n))) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf ((((le) ▪ O) ▪ n) ⇒ (P) ▪ coq.bool.true), in-⇒ (λ auto' : Prf (((coq.connectives.Not) ▪ (((le) ▪ O) ▪ n)) ⇒ (P) ▪ coq.bool.false), el-⇒ (auto) (el-∀ (le_O_n) (n))))))))))) (in-∀ (λ n : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_leb) ((S) ▪ n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool)) (leb_body)) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (sym_eq_leb_body_S) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_O) (coq.bool.bool)) (coq.bool.false)) (`λ' q : El (nat), ((leb) ▪ n) ▪ q)) (`λ' y : El (coq.bool.bool), `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ y)) (in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ auto : Prf ((((le) ▪ ((S) ▪ n)) ▪ O) ⇒ (P) ▪ coq.bool.true), in-⇒ (λ auto' : Prf (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ O)) ⇒ (P) ▪ coq.bool.false), el-⇒ (auto') (el-∀ (not_le_Sn_O) (n)))))))))))) (in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-∀ (el-∀ (sym_eq_leb) ((S) ▪ n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (`∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((leb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_filter_nat_type_S) (nat ⇝ coq.bool.bool)) (leb_body)) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (`∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((leb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (sym_eq_leb_body_S) (n)) (`λ' y : El ((nat ⇝ coq.bool.bool)), (`∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((leb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ ((y) ▪ ((S) ▪ m)))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_nat_type_S) (coq.bool.bool)) (coq.bool.false)) (`λ' q : El (nat), ((leb) ▪ n) ▪ q)) (m)) (`λ' y : El (coq.bool.bool), (`∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((leb) ▪ n) ▪ m)) ⇒ `∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ y)) (in-⇒ (λ Hind : Prf (`∀ P : El ((coq.bool.bool ⇝ prop)), ((((le) ▪ n) ▪ m) ⇒ (P) ▪ coq.bool.true) ⇒ (((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (P) ▪ coq.bool.false) ⇒ (P) ▪ (((leb) ▪ n) ▪ m)), in-∀ (λ P : El (coq.bool.bool ⇝ prop),  in-⇒ (λ Pt : Prf ((((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m)) ⇒ (P) ▪ coq.bool.true), in-⇒ (λ Pf : Prf (((coq.connectives.Not) ▪ (((le) ▪ ((S) ▪ n)) ▪ ((S) ▪ m))) ⇒ (P) ▪ coq.bool.false), el-⇒ (el-⇒ (el-∀ (Hind) (P)) (in-⇒ (λ lenm : Prf (((le) ▪ n) ▪ m), el-⇒ (Pt) (el-⇒ (el-∀ (el-∀ (le_S_S) (n)) (m)) (lenm))))) (in-⇒ (λ nlenm : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), el-⇒ (Pf) (el-⇒ (el-∀ (el-∀ (not_le_to_not_le_S_S) (n)) (m)) (nlenm)))))))))))))));
symbol leb_true_to_le : Prf (`∀ n : El (nat), `∀ m : El (nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((leb) ▪ n) ▪ m)) ▪ coq.bool.true) ⇒ ((le) ▪ n) ▪ m) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (leb_elim) (n)) (m)) (`λ' __ : El (coq.bool.bool), ((((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true) ⇒ ((le) ▪ n) ▪ m)) (in-⇒ (λ auto : Prf (((le) ▪ n) ▪ m), in-⇒ (λ auto' : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.true), auto)))) (in-⇒ (λ __ : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), in-⇒ (λ abs_ : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.false) ▪ coq.bool.true), el-⇒ (el-∀ (coq.connectives.falsity) (((le) ▪ n) ▪ m)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.true)) (`λ' __1 : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ __1)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (coq.bool.false)) (abs_))) (coq.bool.not_eq_true_false)))))));
symbol le_to_leb_true : Prf (`∀ n : El (nat), `∀ m : El (nat), (((le) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ (((leb) ▪ n) ▪ m)) ▪ coq.bool.true) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (leb_elim) (n)) (m)) (`λ' __ : El (coq.bool.bool), (((le) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true)) (in-⇒ (λ auto : Prf (((le) ▪ n) ▪ m), in-⇒ (λ auto' : Prf (((le) ▪ n) ▪ m), el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))))) (in-⇒ (λ H : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), in-⇒ (λ H1 : Prf (((le) ▪ n) ▪ m), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.false) ▪ coq.bool.true)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ n) ▪ m)) (H1)) (H)))))));
symbol not_le_to_leb_false : Prf (`∀ n : El (nat), `∀ m : El (nat), ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ (((leb) ▪ n) ▪ m)) ▪ coq.bool.false) ≔ in-∀ (λ n : El (nat),  in-∀ (λ m : El (nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (leb_elim) (n)) (m)) (`λ' __ : El (coq.bool.bool), ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.false)) (in-⇒ (λ H : Prf (((le) ▪ n) ▪ m), in-⇒ (λ H1 : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((le) ▪ n) ▪ m)) (H)) (H1)))))) (in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), in-⇒ (λ auto' : Prf ((coq.connectives.Not) ▪ (((le) ▪ n) ▪ m)), el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.false))))));
