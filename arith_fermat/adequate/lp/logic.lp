require open coq.sttfa;
require coq.connectives;
constant symbol eq : Els (∀ₖ (λ A, ↑ (A ⇝ A ⇝ prop)));
constant symbol refl : Prf (∀ₚ (λ A, ∀ (λ x : El (A), app (app (el-∀ₖ (eq) (A) ■) x ■) x ■)));
constant symbol eq_ind : Prf (∀ₚ (λ A, ∀ (λ x : El (A), ∀ (λ P : El ((A ⇝ prop)), (app (P) x ■) ⇒ ∀ (λ y : El (A), (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ⇒ app (P) y ■)))));
symbol eq_rect_r : Prf (∀ₚ (λ A, ∀ (λ a : El (A), ∀ (λ x : El (A), (app (app (el-∀ₖ (eq) (A) ■) x ■) a ■) ⇒ ∀ (λ P : El ((A ⇝ prop)), (app (P) a ■) ⇒ app (P) x ■))))) ≔ in-∀ₚ (λ A, in-∀ (λ a : El (A),  in-∀ (λ x : El (A),  in-⇒ (λ p : Prf (app (app (el-∀ₖ (eq) (A) ■) x ■) a ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (A) ■) (x) ■) (abs (λ __ : El (A), ∀ (λ P : El ((A ⇝ prop)), (app (P) __ ■) ⇒ app (P) x ■))) ■) (in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ auto : Prf (app (P) x ■), auto))) ■) (a) ■) (p) ■))));
symbol eq_ind_r : Prf (∀ₚ (λ A, ∀ (λ a : El (A), ∀ (λ P : El ((A ⇝ prop)), (app (P) a ■) ⇒ ∀ (λ x : El (A), (app (app (el-∀ₖ (eq) (A) ■) x ■) a ■) ⇒ app (P) x ■))))) ≔ in-∀ₚ (λ A, in-∀ (λ a : El (A),  in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ p : Prf (app (P) a ■), in-∀ (λ x0 : El (A),  in-⇒ (λ p0 : Prf (app (app (el-∀ₖ (eq) (A) ■) x0 ■) a ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_rect_r) (A) ■) (a) ■) (x0) ■) (p0) ■) (abs (λ x01' : El (A), app (P) x01' ■)) ■) (p) ■))))));
symbol rewrite_l : Prf (∀ₚ (λ A, ∀ (λ x : El (A), ∀ (λ P : El ((A ⇝ prop)), (app (P) x ■) ⇒ ∀ (λ y : El (A), (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ⇒ app (P) y ■))))) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ Hx : Prf (app (P) x ■), in-∀ (λ y : El (A),  in-⇒ (λ Heq : Prf (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (A) ■) (x) ■) (abs (λ __ : El (A), app (P) __ ■)) ■) (Hx) ■) (y) ■) (Heq) ■))))));
symbol sym_eq : Prf (∀ₚ (λ A, ∀ (λ x : El (A), ∀ (λ y : El (A), (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ⇒ app (app (el-∀ₖ (eq) (A) ■) y ■) x ■)))) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-⇒ (λ Heq : Prf (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (A) ■) __ ■) x ■)) ■) (el-∀ (el-∀ₚ (refl) (A) ■) (x) ■) ■) (y) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (A) ■) x ■) __ ■)) ■) (el-∀ (el-∀ₚ (refl) (A) ■) (x) ■) ■) (y) ■) (Heq) ■) ■))));
symbol rewrite_r : Prf (∀ₚ (λ A, ∀ (λ x : El (A), ∀ (λ P : El ((A ⇝ prop)), (app (P) x ■) ⇒ ∀ (λ y : El (A), (app (app (el-∀ₖ (eq) (A) ■) y ■) x ■) ⇒ app (P) y ■))))) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ Hx : Prf (app (P) x ■), in-∀ (λ y : El (A),  in-⇒ (λ Heq : Prf (app (app (el-∀ₖ (eq) (A) ■) y ■) x ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (A) ■) (x) ■) (abs (λ __ : El (A), app (P) __ ■)) ■) (Hx) ■) (y) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq) (A) ■) (y) ■) (x) ■) (Heq) ■) ■))))));
symbol eq_coerc : Prf (∀ (λ A : El (prop), ∀ (λ B : El (prop), A ⇒ (app (app (el-∀ₖ (eq) (prop) ■) A ■) B ■) ⇒ B))) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ Ha : Prf (A), in-⇒ (λ Heq : Prf (app (app (el-∀ₖ (eq) (prop) ■) A ■) B ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (prop) ■) (A) ■) (abs (λ x_19 : El (prop), x_19)) ■) (Ha) ■) (B) ■) (Heq) ■))));
symbol trans_eq : Prf (∀ₚ (λ A, ∀ (λ x : El (A), ∀ (λ y : El (A), ∀ (λ z : El (A), (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ⇒ (app (app (el-∀ₖ (eq) (A) ■) y ■) z ■) ⇒ app (app (el-∀ₖ (eq) (A) ■) x ■) z ■))))) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-∀ (λ z : El (A),  in-⇒ (λ H1 : Prf (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■), in-⇒ (λ H2 : Prf (app (app (el-∀ₖ (eq) (A) ■) y ■) z ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (A) ■) (y) ■) (abs (λ x0 : El (A), app (app (el-∀ₖ (eq) (A) ■) x0 ■) z ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (A) ■) __ ■) z ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (A) ■) x ■) __ ■)) ■) (el-∀ (el-∀ₚ (refl) (A) ■) (x) ■) ■) (z) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_r) (A) ■) (y) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (A) ■) __ ■) z ■)) ■) (H2) ■) (x) ■) (H1) ■) ■) ■) (y) ■) (H1) ■) ■) (x) ■) (H1) ■))))));
symbol eq_f : Prf (∀ₚ (λ A, ∀ₚ (λ B, ∀ (λ f : El ((A ⇝ B)), ∀ (λ x : El (A), ∀ (λ y : El (A), (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ⇒ app (app (el-∀ₖ (eq) (B) ■) (app (f) x ■) ■) (app (f) y ■) ■)))))) ≔ in-∀ₚ (λ A, in-∀ₚ (λ B, in-∀ (λ f : El (A ⇝ B),  in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-⇒ (λ H : Prf (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (A) ■) (y) ■) (abs (λ x0 : El (A), app (app (el-∀ₖ (eq) (B) ■) (app (f) x0 ■) ■) (app (f) y ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (B) ■) (app (f) __ ■) ■) (app (f) y ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (B) ■) (app (f) x ■) ■) (app (f) __ ■) ■)) ■) (el-∀ (el-∀ₚ (refl) (B) ■) (app (f) x ■) ■) ■) (y) ■) (H) ■) ■) (y) ■) (H) ■) ■) (x) ■) (H) ■))))));
symbol eq_f2 : Prf (∀ₚ (λ A, ∀ₚ (λ B, ∀ₚ (λ C, ∀ (λ f : El ((A ⇝ B ⇝ C)), ∀ (λ x1 : El (A), ∀ (λ x2 : El (A), ∀ (λ y1 : El (B), ∀ (λ y2 : El (B), (app (app (el-∀ₖ (eq) (A) ■) x1 ■) x2 ■) ⇒ (app (app (el-∀ₖ (eq) (B) ■) y1 ■) y2 ■) ⇒ app (app (el-∀ₖ (eq) (C) ■) (app (app (f) x1 ■) y1 ■) ■) (app (app (f) x2 ■) y2 ■) ■))))))))) ≔ in-∀ₚ (λ A, in-∀ₚ (λ B, in-∀ₚ (λ C, in-∀ (λ f : El (A ⇝ B ⇝ C),  in-∀ (λ x1 : El (A),  in-∀ (λ x2 : El (A),  in-∀ (λ y1 : El (B),  in-∀ (λ y2 : El (B),  in-⇒ (λ E1 : Prf (app (app (el-∀ₖ (eq) (A) ■) x1 ■) x2 ■), in-⇒ (λ E2 : Prf (app (app (el-∀ₖ (eq) (B) ■) y1 ■) y2 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (A) ■) (x2) ■) (abs (λ x : El (A), app (app (el-∀ₖ (eq) (C) ■) (app (app (f) x ■) y1 ■) ■) (app (app (f) x2 ■) y2 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (B) ■) (y2) ■) (abs (λ x : El (B), app (app (el-∀ₖ (eq) (C) ■) (app (app (f) x2 ■) x ■) ■) (app (app (f) x2 ■) y2 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x1) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (C) ■) (app (app (f) __ ■) y2 ■) ■) (app (app (f) x2 ■) y2 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (B) ■) (y1) ■) (abs (λ __ : El (B), app (app (el-∀ₖ (eq) (C) ■) (app (app (f) x1 ■) __ ■) ■) (app (app (f) x2 ■) y2 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A) ■) (x1) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (C) ■) (app (app (f) x1 ■) y1 ■) ■) (app (app (f) __ ■) y2 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (B) ■) (y1) ■) (abs (λ __ : El (B), app (app (el-∀ₖ (eq) (C) ■) (app (app (f) x1 ■) y1 ■) ■) (app (app (f) x1 ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (refl) (C) ■) (app (app (f) x1 ■) y1 ■) ■) ■) (y2) ■) (E2) ■) ■) (x2) ■) (E1) ■) ■) (y2) ■) (E2) ■) ■) (x2) ■) (E1) ■) ■) (y1) ■) (E2) ■) ■) (x1) ■) (E1) ■))))))))));
symbol absurd : Prf (∀ (λ A : El (prop), A ⇒ (app (coq.connectives.Not) A ■) ⇒ coq.connectives.False)) ≔ in-∀ (λ A : El (prop),  in-⇒ (λ H : Prf (A), in-⇒ (λ Hn : Prf (app (coq.connectives.Not) A ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.Not_ind) (A) ■) (coq.connectives.False) ■) (in-⇒ (λ _x_80 : Prf (A ⇒ coq.connectives.False), el-⇒ (_x_80) (H) ■)) ■) (Hn) ■)));
symbol not_to_not : Prf (∀ (λ A : El (prop), ∀ (λ B : El (prop), (A ⇒ B) ⇒ (app (coq.connectives.Not) B ■) ⇒ app (coq.connectives.Not) A ■))) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ auto : Prf (A ⇒ B), in-⇒ (λ auto' : Prf (app (coq.connectives.Not) B ■), el-⇒ (el-∀ (coq.connectives.nmk) (A) ■) (in-⇒ (λ auto'' : Prf (A), el-⇒ (el-⇒ (el-∀ (absurd) (B) ■) (el-⇒ (auto) (auto'') ■) ■) (auto') ■)) ■))));
symbol sym_not_eq : Prf (∀ₚ (λ A, ∀ (λ x : El (A), ∀ (λ y : El (A), (app (coq.connectives.Not) (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ■) ⇒ app (coq.connectives.Not) (app (app (el-∀ₖ (eq) (A) ■) y ■) x ■) ■)))) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ■), el-⇒ (el-∀ (coq.connectives.nmk) (app (app (el-∀ₖ (eq) (A) ■) y ■) x ■) ■) (in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (eq) (A) ■) y ■) x ■), el-⇒ (el-⇒ (el-∀ (absurd) (app (app (el-∀ₖ (eq) (A) ■) x ■) y ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_r) (A) ■) (x) ■) (abs (λ __ : El (A), app (app (el-∀ₖ (eq) (A) ■) x ■) __ ■)) ■) (el-∀ (el-∀ₚ (refl) (A) ■) (x) ■) ■) (y) ■) (auto') ■) ■) (auto) ■)) ■))));
symbol proj1 : Prf (∀ (λ A : El (prop), ∀ (λ B : El (prop), (app (app (coq.connectives.And) A ■) B ■) ⇒ A))) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ AB : Prf (app (app (coq.connectives.And) A ■) B ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (A) ■) (B) ■) (A) ■) (in-⇒ (λ _x_120 : Prf (A), in-⇒ (λ _x_119 : Prf (B), _x_120))) ■) (AB) ■)));
symbol proj2 : Prf (∀ (λ A : El (prop), ∀ (λ B : El (prop), (app (app (coq.connectives.And) A ■) B ■) ⇒ B))) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ AB : Prf (app (app (coq.connectives.And) A ■) B ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (A) ■) (B) ■) (B) ■) (in-⇒ (λ _x_120 : Prf (A), in-⇒ (λ _x_119 : Prf (B), _x_119))) ■) (AB) ■)));
symbol decidable : Els (↑ (prop ⇝ prop)) ≔ abs (λ A : El (prop), app (app (coq.connectives.Or) A ■) (app (coq.connectives.Not) A ■) ■);
