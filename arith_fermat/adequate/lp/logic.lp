require open coq.sttfa;
require coq.connectives;
constant symbol eq : Els (∀ₖ (λ A, ↑ (A ⇝ A ⇝ prop)));
constant symbol refl : Prf (`∀ₚ A, `∀ x : El (A), (((eq) at (A)) ▪ x) ▪ x);
constant symbol eq_ind : Prf (`∀ₚ A, `∀ x : El (A), `∀ P : El ((A ⇝ prop)), ((P) ▪ x) ⇒ `∀ y : El (A), ((((eq) at (A)) ▪ x) ▪ y) ⇒ (P) ▪ y);
symbol eq_rect_r : Prf (`∀ₚ A, `∀ a : El (A), `∀ x : El (A), ((((eq) at (A)) ▪ x) ▪ a) ⇒ `∀ P : El ((A ⇝ prop)), ((P) ▪ a) ⇒ (P) ▪ x) ≔ in-∀ₚ (λ A, in-∀ (λ a : El (A),  in-∀ (λ x : El (A),  in-⇒ (λ p : Prf ((((eq) at (A)) ▪ x) ▪ a), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (A)) (x)) (`λ' __ : El (A), `∀ P : El ((A ⇝ prop)), ((P) ▪ __) ⇒ (P) ▪ x)) (in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ auto : Prf ((P) ▪ x), auto)))) (a)) (p)))));
symbol eq_ind_r : Prf (`∀ₚ A, `∀ a : El (A), `∀ P : El ((A ⇝ prop)), ((P) ▪ a) ⇒ `∀ x : El (A), ((((eq) at (A)) ▪ x) ▪ a) ⇒ (P) ▪ x) ≔ in-∀ₚ (λ A, in-∀ (λ a : El (A),  in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ p : Prf ((P) ▪ a), in-∀ (λ x0 : El (A),  in-⇒ (λ p0 : Prf ((((eq) at (A)) ▪ x0) ▪ a), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_rect_r) (A)) (a)) (x0)) (p0)) (`λ' x01_ : El (A), (P) ▪ x01_)) (p)))))));
symbol rewrite_l : Prf (`∀ₚ A, `∀ x : El (A), `∀ P : El ((A ⇝ prop)), ((P) ▪ x) ⇒ `∀ y : El (A), ((((eq) at (A)) ▪ x) ▪ y) ⇒ (P) ▪ y) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ Hx : Prf ((P) ▪ x), in-∀ (λ y : El (A),  in-⇒ (λ Heq : Prf ((((eq) at (A)) ▪ x) ▪ y), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (A)) (x)) (`λ' __ : El (A), (P) ▪ __)) (Hx)) (y)) (Heq)))))));
symbol sym_eq : Prf (`∀ₚ A, `∀ x : El (A), `∀ y : El (A), ((((eq) at (A)) ▪ x) ▪ y) ⇒ (((eq) at (A)) ▪ y) ▪ x) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-⇒ (λ Heq : Prf ((((eq) at (A)) ▪ x) ▪ y), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x)) (`λ' __ : El (A), (((eq) at (A)) ▪ __) ▪ x)) (el-∀ (el-∀ₚ (refl) (A)) (x))) (y)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x)) (`λ' __ : El (A), (((eq) at (A)) ▪ x) ▪ __)) (el-∀ (el-∀ₚ (refl) (A)) (x))) (y)) (Heq))))));
symbol rewrite_r : Prf (`∀ₚ A, `∀ x : El (A), `∀ P : El ((A ⇝ prop)), ((P) ▪ x) ⇒ `∀ y : El (A), ((((eq) at (A)) ▪ y) ▪ x) ⇒ (P) ▪ y) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ P : El (A ⇝ prop),  in-⇒ (λ Hx : Prf ((P) ▪ x), in-∀ (λ y : El (A),  in-⇒ (λ Heq : Prf ((((eq) at (A)) ▪ y) ▪ x), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (A)) (x)) (`λ' __ : El (A), (P) ▪ __)) (Hx)) (y)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq) (A)) (y)) (x)) (Heq))))))));
symbol eq_coerc : Prf (`∀ A : El (prop), `∀ B : El (prop), A ⇒ ((((eq) at (prop)) ▪ A) ▪ B) ⇒ B) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ Ha : Prf (A), in-⇒ (λ Heq : Prf ((((eq) at (prop)) ▪ A) ▪ B), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind) (prop)) (A)) (`λ' x_19 : El (prop), x_19)) (Ha)) (B)) (Heq)))));
symbol trans_eq : Prf (`∀ₚ A, `∀ x : El (A), `∀ y : El (A), `∀ z : El (A), ((((eq) at (A)) ▪ x) ▪ y) ⇒ ((((eq) at (A)) ▪ y) ▪ z) ⇒ (((eq) at (A)) ▪ x) ▪ z) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-∀ (λ z : El (A),  in-⇒ (λ H1 : Prf ((((eq) at (A)) ▪ x) ▪ y), in-⇒ (λ H2 : Prf ((((eq) at (A)) ▪ y) ▪ z), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (A)) (y)) (`λ' x0 : El (A), (((eq) at (A)) ▪ x0) ▪ z)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x)) (`λ' __ : El (A), (((eq) at (A)) ▪ __) ▪ z)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x)) (`λ' __ : El (A), (((eq) at (A)) ▪ x) ▪ __)) (el-∀ (el-∀ₚ (refl) (A)) (x))) (z)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_r) (A)) (y)) (`λ' __ : El (A), (((eq) at (A)) ▪ __) ▪ z)) (H2)) (x)) (H1)))) (y)) (H1))) (x)) (H1)))))));
symbol eq_f : Prf (`∀ₚ A, `∀ₚ B, `∀ f : El ((A ⇝ B)), `∀ x : El (A), `∀ y : El (A), ((((eq) at (A)) ▪ x) ▪ y) ⇒ (((eq) at (B)) ▪ ((f) ▪ x)) ▪ ((f) ▪ y)) ≔ in-∀ₚ (λ A, in-∀ₚ (λ B, in-∀ (λ f : El (A ⇝ B),  in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-⇒ (λ H : Prf ((((eq) at (A)) ▪ x) ▪ y), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (A)) (y)) (`λ' x0 : El (A), (((eq) at (B)) ▪ ((f) ▪ x0)) ▪ ((f) ▪ y))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x)) (`λ' __ : El (A), (((eq) at (B)) ▪ ((f) ▪ __)) ▪ ((f) ▪ y))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x)) (`λ' __ : El (A), (((eq) at (B)) ▪ ((f) ▪ x)) ▪ ((f) ▪ __))) (el-∀ (el-∀ₚ (refl) (B)) ((f) ▪ x))) (y)) (H))) (y)) (H))) (x)) (H)))))));
symbol eq_f2 : Prf (`∀ₚ A, `∀ₚ B, `∀ₚ C, `∀ f : El ((A ⇝ B ⇝ C)), `∀ x1 : El (A), `∀ x2 : El (A), `∀ y1 : El (B), `∀ y2 : El (B), ((((eq) at (A)) ▪ x1) ▪ x2) ⇒ ((((eq) at (B)) ▪ y1) ▪ y2) ⇒ (((eq) at (C)) ▪ (((f) ▪ x1) ▪ y1)) ▪ (((f) ▪ x2) ▪ y2)) ≔ in-∀ₚ (λ A, in-∀ₚ (λ B, in-∀ₚ (λ C, in-∀ (λ f : El (A ⇝ B ⇝ C),  in-∀ (λ x1 : El (A),  in-∀ (λ x2 : El (A),  in-∀ (λ y1 : El (B),  in-∀ (λ y2 : El (B),  in-⇒ (λ E1 : Prf ((((eq) at (A)) ▪ x1) ▪ x2), in-⇒ (λ E2 : Prf ((((eq) at (B)) ▪ y1) ▪ y2), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (A)) (x2)) (`λ' x : El (A), (((eq) at (C)) ▪ (((f) ▪ x) ▪ y1)) ▪ (((f) ▪ x2) ▪ y2))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (eq_ind_r) (B)) (y2)) (`λ' x : El (B), (((eq) at (C)) ▪ (((f) ▪ x2) ▪ x)) ▪ (((f) ▪ x2) ▪ y2))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x1)) (`λ' __ : El (A), (((eq) at (C)) ▪ (((f) ▪ __) ▪ y2)) ▪ (((f) ▪ x2) ▪ y2))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (B)) (y1)) (`λ' __ : El (B), (((eq) at (C)) ▪ (((f) ▪ x1) ▪ __)) ▪ (((f) ▪ x2) ▪ y2))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (A)) (x1)) (`λ' __ : El (A), (((eq) at (C)) ▪ (((f) ▪ x1) ▪ y1)) ▪ (((f) ▪ __) ▪ y2))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_l) (B)) (y1)) (`λ' __ : El (B), (((eq) at (C)) ▪ (((f) ▪ x1) ▪ y1)) ▪ (((f) ▪ x1) ▪ __))) (el-∀ (el-∀ₚ (refl) (C)) (((f) ▪ x1) ▪ y1))) (y2)) (E2))) (x2)) (E1))) (y2)) (E2))) (x2)) (E1))) (y1)) (E2))) (x1)) (E1)))))))))));
symbol absurd : Prf (`∀ A : El (prop), A ⇒ ((coq.connectives.Not) ▪ A) ⇒ coq.connectives.False) ≔ in-∀ (λ A : El (prop),  in-⇒ (λ H : Prf (A), in-⇒ (λ Hn : Prf ((coq.connectives.Not) ▪ A), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.Not_ind) (A)) (coq.connectives.False)) (in-⇒ (λ _x_80 : Prf (A ⇒ coq.connectives.False), el-⇒ (_x_80) (H)))) (Hn))));
symbol not_to_not : Prf (`∀ A : El (prop), `∀ B : El (prop), (A ⇒ B) ⇒ ((coq.connectives.Not) ▪ B) ⇒ (coq.connectives.Not) ▪ A) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ auto : Prf (A ⇒ B), in-⇒ (λ auto' : Prf ((coq.connectives.Not) ▪ B), el-⇒ (el-∀ (coq.connectives.nmk) (A)) (in-⇒ (λ auto'' : Prf (A), el-⇒ (el-⇒ (el-∀ (absurd) (B)) (el-⇒ (auto) (auto''))) (auto')))))));
symbol sym_not_eq : Prf (`∀ₚ A, `∀ x : El (A), `∀ y : El (A), ((coq.connectives.Not) ▪ ((((eq) at (A)) ▪ x) ▪ y)) ⇒ (coq.connectives.Not) ▪ ((((eq) at (A)) ▪ y) ▪ x)) ≔ in-∀ₚ (λ A, in-∀ (λ x : El (A),  in-∀ (λ y : El (A),  in-⇒ (λ auto : Prf ((coq.connectives.Not) ▪ ((((eq) at (A)) ▪ x) ▪ y)), el-⇒ (el-∀ (coq.connectives.nmk) ((((eq) at (A)) ▪ y) ▪ x)) (in-⇒ (λ auto' : Prf ((((eq) at (A)) ▪ y) ▪ x), el-⇒ (el-⇒ (el-∀ (absurd) ((((eq) at (A)) ▪ x) ▪ y)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (rewrite_r) (A)) (x)) (`λ' __ : El (A), (((eq) at (A)) ▪ x) ▪ __)) (el-∀ (el-∀ₚ (refl) (A)) (x))) (y)) (auto'))) (auto)))))));
symbol proj1 : Prf (`∀ A : El (prop), `∀ B : El (prop), (((coq.connectives.And) ▪ A) ▪ B) ⇒ A) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ AB : Prf (((coq.connectives.And) ▪ A) ▪ B), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (A)) (B)) (A)) (in-⇒ (λ _x_120 : Prf (A), in-⇒ (λ _x_119 : Prf (B), _x_120)))) (AB))));
symbol proj2 : Prf (`∀ A : El (prop), `∀ B : El (prop), (((coq.connectives.And) ▪ A) ▪ B) ⇒ B) ≔ in-∀ (λ A : El (prop),  in-∀ (λ B : El (prop),  in-⇒ (λ AB : Prf (((coq.connectives.And) ▪ A) ▪ B), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (A)) (B)) (B)) (in-⇒ (λ _x_120 : Prf (A), in-⇒ (λ _x_119 : Prf (B), _x_119)))) (AB))));
symbol decidable : Els (↑ (prop ⇝ prop)) ≔ `λ' A : El (prop), ((coq.connectives.Or) ▪ A) ▪ ((coq.connectives.Not) ▪ A);
