require open coq.sttfa;
require coq.bigops;
require coq.bool;
require coq.cong;
require coq.connectives;
require coq.div_mod;
require coq.exp;
require coq.fact;
require coq.gcd;
require coq.logic;
require coq.nat;
require coq.permutation;
require coq.primes;
require coq.sigma_pi;
symbol prime_to_not_divides_fact : Prf (∀ (λ p : El (coq.nat.nat), (app (coq.primes.prime) p ■) ⇒ ∀ (λ n : El (coq.nat.nat), (app (app (coq.nat.lt) n ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n ■) ■) ■))) ≔ in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ primep : Prf (app (coq.primes.prime) p ■), in-∀ (λ n : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), (app (app (coq.nat.lt) _x_365 ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) _x_365 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.fact.sym_eq_fact) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat) ■) (coq.fact.fact_body) ■) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) y ■) ■)) ■) (el-⇒ (el-∀ (coq.fact.sym_eq_fact_body_O) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) y ■) ■)) ■) (in-⇒ (λ __ : Prf (app (app (coq.nat.le) (app (coq.nat.S) coq.nat.O ■) ■) p ■), el-⇒ (el-∀ (coq.connectives.nmk) (app (app (coq.primes.divides) p ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (in-⇒ (λ divp : Prf (app (app (coq.primes.divides) p ■) (app (coq.nat.S) coq.nat.O ■) ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) p ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.primes.divides_to_le) (p) ■) (app (coq.nat.S) coq.nat.O ■) ■) (el-∀ (coq.nat.lt_O_S) (coq.nat.O) ■) ■) (divp) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_le) (app (coq.nat.S) coq.nat.O ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_SO) (p) ■) (primep) ■) ■) ■)) ■)) ■) ■) ■) ■) (in-∀ (λ n1 : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (coq.fact.sym_eq_fact) (app (coq.nat.S) n1 ■) ■) (abs (λ y : El (coq.nat.nat), ((app (app (coq.nat.lt) n1 ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n1 ■) ■) ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) n1 ■) ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat) ■) (coq.fact.fact_body) ■) (n1) ■) (abs (λ y : El (coq.nat.nat), ((app (app (coq.nat.lt) n1 ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n1 ■) ■) ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) n1 ■) ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.fact.sym_eq_fact_body_S) (n1) ■) (abs (λ y : El (coq.nat.nat), ((app (app (coq.nat.lt) n1 ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n1 ■) ■) ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) n1 ■) ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) y ■) ■)) ■) (in-⇒ (λ Hind : Prf ((app (app (coq.nat.lt) n1 ■) p ■) ⇒ app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n1 ■) ■) ■), in-⇒ (λ ltn1 : Prf (app (app (coq.nat.lt) (app (coq.nat.S) n1 ■) ■) p ■), el-⇒ (el-∀ (coq.connectives.nmk) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.times) (app (coq.fact.fact) n1 ■) ■) (app (coq.nat.S) n1 ■) ■) ■) ■) (in-⇒ (λ Hdiv : Prf (app (app (coq.primes.divides) p ■) (app (app (coq.nat.times) (app (coq.fact.fact) n1 ■) ■) (app (coq.nat.S) n1 ■) ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (coq.primes.divides) p ■) (app (coq.nat.S) n1 ■) ■) ■) (coq.connectives.False) ■) (in-⇒ (λ Hdiv0 : Prf (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n1 ■) ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) n1 ■) ■) ■) (Hdiv0) ■) (el-⇒ (Hind) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_le) (app (coq.nat.S) n1 ■) ■) (p) ■) (ltn1) ■) ■) ■)) ■) (in-⇒ (λ Hdiv0 : Prf (app (app (coq.primes.divides) p ■) (app (coq.nat.S) n1 ■) ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) p ■) (app (coq.nat.S) n1 ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.primes.divides_to_le) (p) ■) (app (coq.nat.S) n1 ■) ■) (el-∀ (coq.nat.lt_O_S) (n1) ■) ■) (Hdiv0) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_le) (app (coq.nat.S) n1 ■) ■) (p) ■) (ltn1) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.gcd.divides_times_to_divides) (p) ■) (app (coq.fact.fact) n1 ■) ■) (app (coq.nat.S) n1 ■) ■) (primep) ■) (Hdiv) ■) ■)) ■))) ■) ■) ■)) ■) (n) ■)));
symbol permut_mod : Prf (∀ (λ p : El (coq.nat.nat), ∀ (λ a : El (coq.nat.nat), (app (coq.primes.prime) p ■) ⇒ (app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) a ■) ■) ⇒ app (app (coq.permutation.permut) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■))) ≔ in-∀ (λ p : El (coq.nat.nat),  in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ primep : Prf (app (coq.primes.prime) p ■), in-⇒ (λ ndiv : Prf (app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) a ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (∀ (λ x : El (coq.nat.nat), (app (app (coq.nat.le) x ■) (app (coq.nat.pred) p ■) ■) ⇒ app (app (coq.nat.le) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) x ■) ■) p ■) ■) (app (coq.nat.pred) p ■) ■)) ■) (app (app (coq.permutation.injn) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lei : Prf (app (app (coq.nat.le) i ■) (app (coq.nat.pred) p ■) ■), el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.transitive_le) (app (coq.nat.S) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (p) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.div_mod.lt_mod_m_m) (app (app (coq.nat.times) a ■) i ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (p) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.nat.le) p ■) x ■)) ■) (el-∀ (coq.nat.le_n) (p) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) ■) ■))) ■) (in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-⇒ (λ lei : Prf (app (app (coq.nat.le) i ■) (app (coq.nat.pred) p ■) ■), in-⇒ (λ lej : Prf (app (app (coq.nat.le) j ■) (app (coq.nat.pred) p ■) ■), in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) j ■) ■) p ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) i ■) j ■) ■) (app (coq.connectives.Not) (app (app (coq.nat.lt) i ■) j ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (in-⇒ (λ ltij : Prf (app (app (coq.nat.lt) i ■) j ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.lt) (app (app (coq.nat.minus) j ■) i ■) ■) p ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (coq.nat.lt) (app (app (coq.nat.minus) j ■) i ■) ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S) (app (app (coq.nat.minus) j ■) i ■) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.le_plus_to_minus) (j) ■) (i) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.transitive_le) (j) ■) (app (coq.nat.pred) p ■) ■) (app (app (coq.nat.plus) (app (coq.nat.pred) p ■) ■) i ■) ■) (lej) ■) (el-∀ (el-∀ (coq.nat.le_plus_n_r) (i) ■) (app (coq.nat.pred) p ■) ■) ■) ■) ■) ■) (p) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_not_lt) (p) ■) (app (app (coq.nat.minus) j ■) i ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.primes.divides_to_le) (p) ■) (app (app (coq.nat.minus) j ■) i ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_plus_to_minus_r) (coq.nat.O) ■) (i) ■) (j) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) i ■) ■) ■) j ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) i ■) ■) ■) j ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_plus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) i ■) ■) ■) j ■)) ■) (ltij) ■) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.primes.divides) p ■) a ■) ■) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) j ■) i ■) ■) ■) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) j ■) i ■) ■) ■) (in-⇒ (λ Hdiv : Prf (app (app (coq.primes.divides) p ■) a ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) j ■) i ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.primes.divides) p ■) a ■) ■) (Hdiv) ■) (ndiv) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) j ■) i ■) ■), auto)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.gcd.divides_times_to_divides) (p) ■) (a) ■) (app (app (coq.nat.minus) j ■) i ■) ■) (primep) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) a ■) j ■) ■) (app (app (coq.nat.times) a ■) i ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) x ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.primes.eq_mod_to_divides) (app (app (coq.nat.times) a ■) j ■) ■) (app (app (coq.nat.times) a ■) i ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) j ■) ■) p ■) ■) (H) ■) ■) ■) (app (app (coq.nat.times) a ■) (app (app (coq.nat.minus) j ■) i ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.distributive_times_minus) (a) ■) (j) ■) (i) ■) ■) ■) ■) ■) ■) ■) ■)) ■) (in-⇒ (λ Hij : Prf (app (coq.connectives.Not) (app (app (coq.nat.lt) i ■) j ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) j ■) i ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) j ■) i ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (in-⇒ (λ Hij0 : Prf (app (app (coq.nat.lt) j ■) i ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.lt) (app (app (coq.nat.minus) i ■) j ■) ■) p ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (coq.nat.lt) (app (app (coq.nat.minus) i ■) j ■) ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S) (app (app (coq.nat.minus) i ■) j ■) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.le_plus_to_minus) (i) ■) (j) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.transitive_le) (i) ■) (app (coq.nat.pred) p ■) ■) (app (app (coq.nat.plus) (app (coq.nat.pred) p ■) ■) j ■) ■) (lei) ■) (el-∀ (el-∀ (coq.nat.le_plus_n_r) (j) ■) (app (coq.nat.pred) p ■) ■) ■) ■) ■) ■) (p) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_not_lt) (p) ■) (app (app (coq.nat.minus) i ■) j ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.primes.divides_to_le) (p) ■) (app (app (coq.nat.minus) i ■) j ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_plus_to_minus_r) (coq.nat.O) ■) (j) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) j ■) ■) ■) i ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) j ■) ■) ■) i ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_plus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) j ■) ■) ■) i ■)) ■) (Hij0) ■) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.primes.divides) p ■) a ■) ■) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) i ■) j ■) ■) ■) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) i ■) j ■) ■) ■) (in-⇒ (λ Hdiv : Prf (app (app (coq.primes.divides) p ■) a ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) i ■) j ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.primes.divides) p ■) a ■) ■) (Hdiv) ■) (ndiv) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) i ■) j ■) ■), auto)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.gcd.divides_times_to_divides) (p) ■) (a) ■) (app (app (coq.nat.minus) i ■) j ■) ■) (primep) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) a ■) i ■) ■) (app (app (coq.nat.times) a ■) j ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) x ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.primes.eq_mod_to_divides) (app (app (coq.nat.times) a ■) i ■) ■) (app (app (coq.nat.times) a ■) j ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) j ■) ■) p ■) ■) (H) ■) ■) ■) (app (app (coq.nat.times) a ■) (app (app (coq.nat.minus) i ■) j ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.distributive_times_minus) (a) ■) (i) ■) (j) ■) ■) ■) ■) ■) ■) ■) ■)) ■) (in-⇒ (λ Hij0 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) j ■) i ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) (j) ■) (Hij0) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (j) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_lt_to_le) (i) ■) (j) ■) (Hij) ■) ■) ■)) ■) (el-∀ (el-∀ (coq.nat.decidable_lt) (i) ■) (j) ■) ■)))))) ■))));
symbol eq_fact_pi_p : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) n ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) n ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) _x_365 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) _x_365 ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus) (app (coq.nat.S) coq.nat.O ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus_body_S) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (app (coq.nat.S) coq.nat.O ■) ■) (abs (λ q : El (coq.nat.nat), app (app (coq.nat.minus) coq.nat.O ■) q ■)) ■) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) y ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) coq.nat.O ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) coq.nat.O ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_minus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) coq.nat.O ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (coq.bigops.sym_eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (coq.bigops.sym_eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (coq.fact.eq_fact_body_O) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.eq_filter_nat_type_O) (coq.nat.nat) ■) (coq.fact.fact_body) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.fact.eq_fact) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (coq.fact.fact) coq.nat.O ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ n1 : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (coq.fact.sym_eq_fact) (app (coq.nat.S) n1 ■) ■) (abs (λ y : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) n1 ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.S) n1 ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat) ■) (coq.fact.fact_body) ■) (n1) ■) (abs (λ y : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) n1 ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.S) n1 ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.fact.sym_eq_fact_body_S) (n1) ■) (abs (λ y : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) n1 ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.S) n1 ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (in-⇒ (λ Hind : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) n1 ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.S) n1 ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus) (app (coq.nat.S) (app (coq.nat.S) n1 ■) ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (app (coq.nat.S) n1 ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus_body_S) (app (coq.nat.S) n1 ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.S) n1 ■) ■) ■) (abs (λ q : El (coq.nat.nat), app (app (coq.nat.minus) (app (coq.nat.S) n1 ■) ■) q ■)) ■) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) y ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus) (app (coq.nat.S) n1 ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) coq.nat.O ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (n1) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) coq.nat.O ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus_body_S) (n1) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (y) coq.nat.O ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (abs (λ q : El (coq.nat.nat), app (app (coq.nat.minus) n1 ■) q ■)) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) y ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.nat.plus) n1 ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (coq.nat.S) (app (app (coq.nat.plus) n1 ■) coq.nat.O ■) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (coq.nat.times) x_1 ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (n1) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) (app (coq.fact.fact) n1 ■) ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) x_1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (coq.nat.nat) ■) (coq.nat.nat) ■) (app (coq.nat.times) (app (coq.nat.S) n1 ■) ■) ■) (app (coq.fact.fact) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) n1 ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.fact.fact) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) x_1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■)) ■) (Hind) ■) (n1) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus) (app (coq.nat.S) n1 ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) n1 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (n1) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) n1 ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus_body_S) (n1) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) coq.nat.O ■) ■) ■) n1 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (abs (λ q : El (coq.nat.nat), app (app (coq.nat.minus) n1 ■) q ■)) ■) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) n1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (n1) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) n1 ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n1) ■) ■) (app (app (coq.nat.minus) n1 ■) coq.nat.O ■) ■) (el-∀ (coq.nat.minus_n_O) (n1) ■) ■) ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.plus) n1 ■) coq.nat.O ■) ■) (el-∀ (coq.nat.plus_n_O) (n1) ■) ■) ■) (app (app (coq.nat.plus) n1 ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (el-∀ (el-∀ (coq.nat.plus_n_Sm) (n1) ■) (coq.nat.O) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bigops.bigop_Strue) (coq.nat.nat) ■) (n1) ■) (abs (λ __ : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.nat.plus) __ ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.times) (app (coq.fact.fact) n1 ■) ■) (app (coq.nat.S) n1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (coq.fact.fact) n1 ■) ■) (app (coq.nat.S) n1 ■) ■) ■)) ■) ■) ■)) ■) (n) ■);
symbol congruent_pi : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), ∀ (λ p : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (app (app (coq.cong.congruent) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■)))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), ∀ (λ p : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (app (app (coq.cong.congruent) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) _x_365 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) _x_365 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■))) ■) (in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ₚ (coq.bigops.sym_eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (app (app (coq.cong.congruent) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (coq.bigops.sym_eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (app (app (coq.cong.congruent) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (coq.bigops.eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (app (app (coq.cong.congruent) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) p ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (coq.bigops.eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (app (app (coq.cong.congruent) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) p ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.lt) coq.nat.O ■) p ■), el-∀ (el-∀ (coq.cong.congruent_n_n) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (p) ■)) ■) ■) ■) ■)) ■) (in-∀ (λ n1 : El (coq.nat.nat),  in-⇒ (λ Hind : Prf (∀ (λ p : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) p ■) ⇒ app (app (app (coq.cong.congruent) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■)), in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ posp : Prf (app (app (coq.nat.lt) coq.nat.O ■) p ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (app (coq.cong.congruent) x ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.bigops.sym_eq_bigop_S) (coq.nat.nat) ■) (n1) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), app (app (app (coq.cong.congruent) (app (app (coq.nat.times) (app (f) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.bigops.sym_eq_bigop_body_S) (coq.nat.nat) ■) (n1) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), app (app (app (coq.cong.congruent) (app (app (coq.nat.times) (app (f) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) p ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.mod) (app (f) n1 ■) ■) p ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (app (coq.cong.congruent) (app (app (coq.nat.times) (app (f) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) y ■) p ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (coq.cong.congruent_times) (app (f) n1 ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (coq.div_mod.mod) (app (f) n1 ■) ■) p ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (f) i ■) ■) p ■)) ■) ■) (p) ■) (posp) ■) (el-⇒ (el-∀ (el-∀ (coq.cong.congruent_n_mod_n) (app (f) n1 ■) ■) (p) ■) (posp) ■) ■) (el-⇒ (el-∀ (Hind) (p) ■) (posp) ■) ■) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bigops.bigop_Strue) (coq.nat.nat) ■) (n1) ■) (abs (λ __ : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) ■))))) ■) (n) ■));
symbol congruent_exp_pred_SO : Prf (∀ (λ p : El (coq.nat.nat), ∀ (λ a : El (coq.nat.nat), (app (coq.primes.prime) p ■) ⇒ (app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) a ■) ■) ⇒ app (app (app (coq.cong.congruent) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) p ■))) ≔ in-∀ (λ p : El (coq.nat.nat),  in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ primep : Prf (app (coq.primes.prime) p ■), in-⇒ (λ ndiv : Prf (app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) a ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.cong.divides_to_congruent) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.exp.lt_O_exp) (a) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (abs (λ __ : El (coq.nat.nat), (app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) __ ■) ■) ⇒ app (app (coq.nat.lt) coq.nat.O ■) __ ■)) ■) (in-⇒ (λ _clearme : Prf (app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) coq.nat.O ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.Not_ind) (app (app (coq.primes.divides) p ■) coq.nat.O ■) ■) (app (app (coq.nat.lt) coq.nat.O ■) coq.nat.O ■) ■) (in-⇒ (λ div0 : Prf ((app (app (coq.primes.divides) p ■) coq.nat.O ■) ⇒ coq.connectives.False), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.lt) coq.nat.O ■) coq.nat.O ■) ■) (el-⇒ (div0) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.primes.quotient) (p) ■) (coq.nat.O) ■) (coq.nat.O) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (coq.nat.O) ■) ■) (app (app (coq.nat.times) p ■) coq.nat.O ■) ■) (el-∀ (coq.nat.times_n_O) (p) ■) ■) ■) ■) ■)) ■) (_clearme) ■)) ■) (in-∀ (λ auto : El (coq.nat.nat),  in-⇒ (λ auto' : Prf (app (coq.connectives.Not) (app (app (coq.primes.divides) p ■) (app (coq.nat.S) auto ■) ■) ■), el-∀ (coq.nat.lt_O_S) (auto) ■))) ■) (a) ■) (ndiv) ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (in-⇒ (λ auto : Prf (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■), auto)) ■) (in-⇒ (λ Hdiv : Prf (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.primes.divides) p ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) ■) (Hdiv) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (prime_to_not_divides_fact) (p) ■) (primep) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (p) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (p) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.nat.le) (app (coq.nat.S) x ■) ■) (app (coq.nat.S) p ■) ■)) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) ■) ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.gcd.divides_times_to_divides) (p) ■) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (primep) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (coq.nat.times) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) ■) x_1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) x ■) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) x ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) (app (app (coq.exp.exp) a ■) x ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■) ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.primes.divides) p ■) (app (app (coq.nat.minus) x ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.cong.congruent_to_divides) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (coq.cong.transitive_congruent) (p) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) p ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (congruent_pi) (abs (λ m : El (coq.nat.nat), app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) coq.nat.O ■) ■) ■)) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (app (coq.cong.congruent) x_1 ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) p ■)) ■) (el-∀ (el-∀ (coq.cong.congruent_n_n) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (p) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) p ■)) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), i)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) p ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), i)) ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), i)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (coq.bigops.bigop_iso) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) __ ■) ■) coq.bool.true ■)) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) __ ■) ■) coq.bool.true ■)) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) __ ■) ■) p ■)) ■) (abs (λ __ : El (coq.nat.nat), __)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ x : El ((coq.nat.nat ⇝ coq.nat.nat)), app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (app (x) i ■) ■)) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) x ■) k ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) ■) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) k ■) x ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) ■)) ■)) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■)) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) y ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) ■) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) y ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) ■)) ■) (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■)) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) ■) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (∀ (λ x : El (coq.nat.nat), (app (app (coq.nat.lt) x ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) x ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) x ■) ■) p ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) x ■) ■) p ■) ■)) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■), in-⇒ (λ __ : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■) ■) coq.bool.true ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■)))) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■), in-⇒ (λ posi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) i ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.lt) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (p) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.nat.lt) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.div_mod.lt_mod_m_m) (app (app (coq.nat.times) a ■) i ■) ■) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) x ■) coq.bool.true ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.bool.bool) ■) (coq.bool.true) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) coq.bool.true ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) coq.bool.true ■) coq.bool.true ■) ■) ■) ■) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_leb_true) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) coq.nat.O ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.lt) coq.nat.O ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■), auto)) ■) (in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.le) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.times) a ■) i ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.primes.mod_O_to_divides) (p) ■) (app (app (coq.nat.times) a ■) i ■) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (coq.nat.O) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (H) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (coq.primes.divides) p ■) (app (app (coq.nat.times) a ■) i ■) ■) ■) (app (app (coq.primes.divides) p ■) a ■) ■) (in-⇒ (λ Hdiv : Prf (app (app (coq.primes.divides) p ■) (app (app (coq.nat.times) a ■) i ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.primes.divides) p ■) a ■) ■) (app (app (coq.primes.divides) p ■) i ■) ■) (app (app (coq.primes.divides) p ■) a ■) ■) (in-⇒ (λ auto : Prf (app (app (coq.primes.divides) p ■) a ■), auto)) ■) (in-⇒ (λ divpi : Prf (app (app (coq.primes.divides) p ■) i ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.primes.divides) p ■) a ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.lt) i ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ■) (lti) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_not_lt) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (i) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (p) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.nat.le) x ■) i ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.primes.divides_to_le) (p) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.leb_true_to_le) (app (coq.nat.S) coq.nat.O ■) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.bool.andb_true_l) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) (coq.bool.true) ■) (posi) ■) ■) ■) (divpi) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (p) ■) (el-⇒ (el-∀ (coq.primes.prime_to_lt_O) (p) ■) (primep) ■) ■) ■) ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.gcd.divides_times_to_divides) (p) ■) (a) ■) (i) ■) (primep) ■) (Hdiv) ■) ■)) ■) (ndiv) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (coq.nat.O) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) (el-∀ (coq.nat.le_O_n) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■) ■) ■) ■) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.permutation.invert_permut_f) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (i) ■) (app (coq.nat.pred) p ■) ■) (lti) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i1 : El (coq.nat.nat), (app (app (coq.nat.le) i1 ■) (app (coq.nat.pred) p ■) ■) ⇒ app (app (coq.nat.le) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i1 ■) ■) p ■) ■) (app (coq.nat.pred) p ■) ■)) ■) (app (app (coq.permutation.injn) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■) ■) (app (app (coq.permutation.injn) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■) ■) (in-⇒ (λ auto : Prf (∀ (λ i0 : El (coq.nat.nat), (app (app (coq.nat.le) i0 ■) (app (coq.nat.pred) p ■) ■) ⇒ app (app (coq.nat.le) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■) ■) (app (coq.nat.pred) p ■) ■)), in-⇒ (λ auto' : Prf (app (app (coq.permutation.injn) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■), auto'))) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (permut_mod) (p) ■) (a) ■) (primep) ■) (ndiv) ■) ■) ■) ■)))) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.pred) p ■) ■) ⇒ app (app (coq.nat.le) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) i ■) ■) (app (coq.nat.pred) p ■) ■)) ■) (app (app (coq.permutation.injn) (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) ■) (app (coq.nat.pred) p ■) ■) ■) (app (app (app (app (app (app (app (app (coq.bigops.sub_hk) (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i ■) ■) p ■)) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) _0 ■) ■) coq.bool.true ■)) ■) (abs (λ _0 : El (coq.nat.nat), _0)) ■) (abs (λ _0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) _0 ■) ■) p ■)) ■) ■) (in-⇒ (λ le_invert_permut : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.pred) p ■) ■) ⇒ app (app (coq.nat.le) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) i ■) ■) (app (coq.nat.pred) p ■) ■)), in-⇒ (λ inj_inv_permut : Prf (app (app (coq.permutation.injn) (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) ■) (app (coq.nat.pred) p ■) ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■), in-⇒ (λ posi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) i ■) ■) coq.bool.true ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) p ■) ■) i ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.lt) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-∀ (le_invert_permut) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (i) ■) (app (coq.nat.pred) p ■) ■) (lti) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) x ■) coq.bool.true ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.bool.bool) ■) (coq.bool.true) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) coq.bool.true ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) coq.bool.true ■) coq.bool.true ■) ■) ■) ■) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_leb_true) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) coq.nat.O ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.lt) coq.nat.O ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■), auto)) ■) (in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.le) (app (coq.nat.S) coq.nat.O ■) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) p ■) ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (i) ■) (abs (λ x : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) x ■) ⇒ coq.connectives.False)) ■) (in-⇒ (λ eq0i : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) i ■), el-⇒ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x_1 : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) (app (coq.nat.S) coq.nat.O ■) ■) x_1 ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_leb) (app (coq.nat.S) coq.nat.O ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (y) coq.nat.O ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.bool.bool) ■) (coq.nat.leb_body) ■) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (y) coq.nat.O ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_leb_body_S) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (y) coq.nat.O ■) ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ q : El (coq.nat.nat), app (app (coq.nat.leb) coq.nat.O ■) q ■)) ■) (abs (λ y : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) y ■) coq.bool.true ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.true) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) y ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (in-⇒ (λ H0 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■), el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (abs (λ y : El (prop), y)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (prop) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) coq.bool.true ■) ■) (abs (λ y : El (prop), y)) ■) (el-⇒ (el-∀ (el-∀ (coq.bool.bool_discr) (coq.bool.false) ■) (coq.bool.true) ■) (H0) ■) ■) ■) (coq.connectives.False) ■)) ■) ■) ■) ■) ■) ■) (i) ■) (eq0i) ■) (posi) ■)) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) p ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.permutation.f_invert_permut) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (i) ■) (app (coq.nat.pred) p ■) ■) (lti) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (permut_mod) (p) ■) (a) ■) (primep) ■) (ndiv) ■) ■) ■) ■) (app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) coq.nat.O ■) ■) p ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) x_1 ■) p ■) ■) coq.nat.O ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) coq.nat.O ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (coq.nat.O) ■) ■) (app (app (coq.div_mod.mod) coq.nat.O ■) p ■) ■) (el-∀ (coq.div_mod.mod_O_n) (p) ■) ■) ■) (app (app (coq.nat.times) a ■) coq.nat.O ■) ■) (el-∀ (coq.nat.times_n_O) (a) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (coq.nat.nat) ■) (coq.nat.nat) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) (coq.nat.O) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (coq.nat.O) ■) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) (H) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (coq.nat.O) ■) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) (el-∀ (coq.nat.le_O_n) (app (app (app (coq.permutation.invert_permut) (app (coq.nat.pred) p ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) i0 ■) ■) p ■)) ■) i ■) ■) ■) ■) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.permutation.f_invert_permut) (abs (λ __ : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) __ ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (i) ■) (app (coq.nat.pred) p ■) ■) (lti) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (permut_mod) (p) ■) (a) ■) (primep) ■) (ndiv) ■) ■) ■)))))) ■) (el-⇒ (el-∀ (el-∀ (coq.permutation.permut_invert_permut) (abs (λ n : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) n ■) ■) p ■)) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (permut_mod) (p) ■) (a) ■) (primep) ■) (ndiv) ■) ■) ■) ■) ■) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) (app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) p ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (coq.bigops.bigop_I_gen) (app (coq.nat.S) coq.nat.O ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ __ : El (coq.nat.nat), coq.bool.true)) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.div_mod.mod) (app (app (coq.nat.times) a ■) __ ■) ■) p ■)) ■) (el-∀ (coq.nat.lt_O_S) (app (coq.nat.pred) p ■) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (coq.bigops.bigop_I_gen) (app (coq.nat.S) coq.nat.O ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ __ : El (coq.nat.nat), coq.bool.true)) ■) (abs (λ __ : El (coq.nat.nat), __)) ■) (el-∀ (coq.nat.lt_O_S) (app (coq.nat.pred) p ■) ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (coq.exp.exp) a ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) ■) (el-∀ (el-∀ (el-∀ (el-∀ (coq.sigma_pi.exp_pi_bc) (a) ■) (app (coq.nat.S) coq.nat.O ■) ■) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (abs (λ __ : El (coq.nat.nat), __)) ■) ■) ■) (app (coq.nat.pred) p ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.pred) p ■) ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.pred) p ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (coq.nat.pred) p ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.pred) p ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (coq.nat.pred) p ■) ■) ■) (app (app (coq.nat.minus) (app (coq.nat.pred) p ■) ■) coq.nat.O ■) ■) (el-∀ (coq.nat.minus_n_O) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (el-∀ (el-∀ (coq.nat.minus_S_S) (app (coq.nat.pred) p ■) ■) (coq.nat.O) ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (app (app (app (el-∀ₖ (coq.bigops.bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.true)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (app (coq.nat.plus) i ■) (app (coq.nat.S) coq.nat.O ■) ■)) ■) ■) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) ■) ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (el-∀ (eq_fact_pi_p) (app (coq.nat.pred) p ■) ■) ■) ■) (app (app (coq.nat.times) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (el-∀ (coq.nat.times_n_1) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) ■) ■) (app (app (coq.nat.times) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.distributive_times_minus) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (coq.nat.minus) (app (app (coq.exp.exp) a ■) (app (coq.nat.pred) p ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (app (coq.fact.fact) (app (coq.nat.pred) p ■) ■) ■) ■) ■) ■) ■))));
