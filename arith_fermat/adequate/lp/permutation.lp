require open coq.sttfa;
require coq.bool;
require coq.connectives;
require coq.leibniz;
require coq.logic;
require coq.nat;
require coq.relations;
symbol injn : Els (↑ ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ prop)) ≔ abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ n : El (coq.nat.nat), ∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ (app (app (coq.nat.le) j ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))));
symbol injn_Sn_n : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (injn) f ■) (app (coq.nat.S) n ■) ■) ⇒ app (app (injn) f ■) n ■))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ H : Prf (app (app (injn) f ■) (app (coq.nat.S) n ■) ■), in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-⇒ (λ lei : Prf (app (app (coq.nat.le) i ■) n ■), in-⇒ (λ lej : Prf (app (app (coq.nat.le) j ■) n ■), in-⇒ (λ eqf : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (H) (i) ■) (j) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (i) ■) (n) ■) (lei) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (j) ■) (n) ■) (lej) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (f) i ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (f) i ■) ■) ■) (app (f) j ■) ■) (eqf) ■) ■))))))));
symbol permut : Els (↑ ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ prop)) ≔ abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) m ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) m ■)) ■) (app (app (injn) f ■) m ■) ■));
symbol transpose : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)) ≔ abs (λ i : El (coq.nat.nat), abs (λ j : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■)));
symbol transpose_i_j_i : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) i ■) ■) j ■))) ≔ in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) i ■) (app (app (coq.nat.eqb) i ■) j ■) ■) ■) x ■) ■) j ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) i ■) (app (app (coq.nat.eqb) i ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) i ■) (app (app (coq.nat.eqb) i ■) j ■) ■) ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) i ■) (app (app (coq.nat.eqb) i ■) j ■) ■) ■) coq.bool.true ■) ■) ■) ■) (app (app (coq.nat.eqb) i ■) i ■) ■) (el-∀ (coq.nat.eqb_n_n) (i) ■) ■));
symbol transpose_i_j_j : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) j ■) ■) i ■))) ≔ in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) ■) i ■) ■) (in-⇒ (λ Hc : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) x ■) ■) i ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) i ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (i) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) i ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) (j) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (j) ■) (i) ■) (Hc) ■) ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) (Hc) ■)) ■) (in-⇒ (λ Hc : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) x ■) ■) i ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) x ■) ■) coq.bool.false ■) ■) i ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) coq.bool.true ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) i ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (j) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) coq.bool.true ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) coq.bool.true ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) coq.bool.true ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) coq.bool.true ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) coq.bool.true ■) ■) coq.bool.false ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) coq.bool.true ■) ■) coq.bool.false ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) j ■) j ■) ■) (el-∀ (coq.nat.eqb_n_n) (j) ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) (Hc) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) j ■) i ■) ■) ■));
symbol transpose_i_j_j_i : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) n ■) ■) (app (app (app (transpose) j ■) i ■) n ■) ■)))) ≔ in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) (app (app (coq.nat.eqb) n ■) i ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) ■) (in-⇒ (λ Hni : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) x ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) ■) (in-⇒ (λ Hnj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.true ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) coq.bool.true ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) j ■) y ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (n) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) j ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (n) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x_1 ■) n ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■) ■) (j) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (n) ■) (j) ■) (Hnj) ■) ■) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (n) ■) (i) ■) (Hni) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) (Hnj) ■)) ■) (in-⇒ (λ Hnj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) y ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) coq.bool.false ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.true ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) j ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (j) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) (Hnj) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) (Hni) ■)) ■) (in-⇒ (λ Hni : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) x ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.false ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.false ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) ■) (in-⇒ (λ Hnj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) coq.bool.false ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.false ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.true ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.false ■) ■) coq.bool.true ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) y ■) coq.bool.true ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.true ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) i ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) (Hnj) ■)) ■) (in-⇒ (λ Hnj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) coq.bool.false ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.false ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) y ■) coq.bool.false ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.false ■) ■) coq.bool.false ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) n ■) coq.bool.false ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) y ■) coq.bool.false ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) (Hnj) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) (Hni) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) n ■) i ■) ■) ■)));
symbol transpose_transpose : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) (app (app (app (transpose) i ■) j ■) n ■) ■) ■) n ■)))) ≔ in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) ■) i ■) ■) ■) n ■) ■) (in-⇒ (λ Hni : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.true ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.true ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) y ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.true ■) ■) (app (app (coq.nat.eqb) y ■) j ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) y ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) ■) n ■) ■) (in-⇒ (λ Hji : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) x ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) n ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (i) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) j ■) x ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (j) ■) (i) ■) (Hji) ■) ■) (n) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (n) ■) (i) ■) (Hni) ■) ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) (Hji) ■)) ■) (in-⇒ (λ Hji : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) x ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) (app (app (coq.nat.eqb) j ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) n ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) j ■) x ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (j) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (n) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (n) ■) (i) ■) (Hni) ■) ■) ■) ■) (app (app (coq.nat.eqb) j ■) j ■) ■) (el-∀ (coq.nat.eqb_n_n) (j) ■) ■) ■) ■) (app (app (coq.nat.eqb) j ■) i ■) ■) (Hji) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) j ■) i ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) (Hni) ■)) ■) (in-⇒ (λ Hni : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.false ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.false ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) y ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) coq.bool.false ■) ■) (app (app (coq.nat.eqb) y ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) y ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) i ■) ■) ■) n ■) ■) (in-⇒ (λ Hnj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.true ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.true ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) y ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.true ■) ■) (app (app (coq.nat.eqb) y ■) j ■) ■) ■) (app (app (coq.nat.eqb) i ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) y ■) (app (app (coq.nat.eqb) i ■) j ■) ■) ■) (app (app (coq.nat.eqb) i ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) i ■) (app (app (coq.nat.eqb) i ■) j ■) ■) ■) x ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) i ■) (app (app (coq.nat.eqb) i ■) j ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (n) ■) (j) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (n) ■) (j) ■) (Hnj) ■) ■) ■) ■) (app (app (coq.nat.eqb) i ■) i ■) ■) (el-∀ (coq.nat.eqb_n_n) (i) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) (Hnj) ■)) ■) (in-⇒ (λ Hnj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■) (app (app (coq.nat.eqb) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■) j ■) ■) ■) (app (app (coq.nat.eqb) y ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■) (app (app (coq.nat.eqb) y ■) j ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) y ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) x ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) x ■) ■) coq.bool.false ■) ■) n ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (n) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■) coq.bool.false ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■) coq.bool.false ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) n ■) coq.bool.false ■) ■) coq.bool.false ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) (Hnj) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) (Hni) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) j ■) ■) (Hnj) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) n ■) j ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) n ■) i ■) ■) (Hni) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) n ■) i ■) ■) ■)));
symbol injective_transpose : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), app (el-∀ₖ (el-∀ₖ (coq.relations.injective_) (coq.nat.nat) ■) (coq.nat.nat) ■) (app (app (transpose) i ■) j ■) ■))) ≔ in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-∀ (λ x : El (coq.nat.nat),  in-∀ (λ y : El (coq.nat.nat),  in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) x ■) ■) (app (app (app (transpose) i ■) j ■) y ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (y) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (y) ■) ■) (x) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) (app (app (app (transpose) i ■) j ■) x ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) y ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) y ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) __ ■) ■) y ■)) ■) (el-∀ (el-∀ (el-∀ (transpose_transpose) (i) ■) (j) ■) (y) ■) ■) (app (app (app (transpose) i ■) j ■) x ■) ■) (auto) ■) ■) (x) ■) (el-∀ (el-∀ (el-∀ (transpose_transpose) (i) ■) (j) ■) (x) ■) ■) ■)))));
symbol permut_S_to_permut_transpose : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ m : El (coq.nat.nat), (app (app (permut) f ■) (app (coq.nat.S) m ■) ■) ⇒ app (app (permut) (abs (λ n : El (coq.nat.nat), app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) n ■) ■)) ■) m ■))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (permut) f ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.S) m ■) ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■)) ■) (app (app (injn) f ■) (app (coq.nat.S) m ■) ■) ■) (app (app (permut) (abs (λ n : El (coq.nat.nat), app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) n ■) ■)) ■) m ■) ■) (in-⇒ (λ permf1 : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.S) m ■) ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■)), in-⇒ (λ permf2 : Prf (app (app (injn) f ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (∀ (λ x : El (coq.nat.nat), (app (app (coq.nat.le) x ■) m ■) ⇒ app (app (coq.nat.le) (app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) x ■) ■) ■) m ■)) ■) (app (app (injn) (abs (λ n : El (coq.nat.nat), app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) n ■) ■)) ■) m ■) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ leim : Prf (app (app (coq.nat.le) i ■) m ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) i ■) ■) (app (app (coq.nat.eqb) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) x ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) i ■) ■) (app (app (coq.nat.eqb) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (coq.nat.le) y ■) m ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) i ■) ■) (app (app (coq.nat.eqb) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) m ■) ■) (in-⇒ (λ Hfi : Prf (app (app (coq.nat.lt) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) i ■) ■) x ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) i ■) ■) (abs (λ y : El (coq.nat.nat), app (app (coq.nat.le) y ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (app (f) i ■) ■) (m) ■) (Hfi) ■) ■) ■) (app (app (coq.nat.eqb) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_eq_to_eqb_false) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_eq) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) (Hfi) ■) ■) ■)) ■) (in-⇒ (λ Hfi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) i ■) ■) x ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) i ■) ■) (abs (λ y : El (coq.nat.nat), app (app (coq.nat.le) y ■) m ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (coq.nat.le) (app (f) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (in-⇒ (λ H : Prf (app (app (coq.nat.lt) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (app (f) (app (coq.nat.S) m ■) ■) ■) (m) ■) (H) ■)) ■) (in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.le) (app (f) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) (app (coq.nat.S) m ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (permf2) (i) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (i) ■) (m) ■) (leim) ■) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) m ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (f) i ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (f) i ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (f) i ■) ■) ■) (app (f) (app (f) i ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (f) i ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) __ ■) ■) (app (coq.nat.S) m ■) ■)) ■) (H) ■) (app (f) i ■) ■) (Hfi) ■) ■) (app (f) i ■) ■) (Hfi) ■) ■) ■) (app (coq.nat.S) m ■) ■) (Hfi) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) (app (coq.nat.S) m ■) ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) m ■) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) i ■) m ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) m ■) ■) (leim) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) i ■) m ■) ■) (app (app (coq.nat.le) __ ■) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) i ■) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (auto) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_le) (m) ■) (app (coq.nat.S) m ■) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) m ■) ■) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (permf1) (app (coq.nat.S) m ■) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) m ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eq_to_eqb_true) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) (Hfi) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (permf1) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (i) ■) (m) ■) (leim) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) (app (f) i ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_eq_to_eqb_false) (app (f) i ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (el-⇒ (el-∀ (coq.connectives.nmk) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) ■) (in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) (app (coq.nat.S) m ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (permf2) (i) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (i) ■) (m) ■) (leim) ■) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) m ■) ■) ■) (H) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_eq) (i) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S) (i) ■) (m) ■) (leim) ■) ■) ■)) ■) ■) ■))) ■) (in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-⇒ (λ leam : Prf (app (app (coq.nat.le) a ■) m ■), in-⇒ (λ lebm : Prf (app (app (coq.nat.le) b ■) m ■), in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) a ■) ■) ■) (app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) b ■) ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (permf2) (a) ■) (b) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (a) ■) (m) ■) (leam) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (b) ■) (m) ■) (lebm) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (injective_transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) a ■) ■) (app (f) b ■) ■) (H) ■) ■)))))) ■))) ■) (_clearme) ■)));
symbol bijn : Els (↑ ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ prop)) ≔ abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) m ■) n ■) ⇒ app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) m ■) ■)) ■)));
symbol eq_to_bijn : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ g : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (g) i ■) ■)) ⇒ (app (app (bijn) f ■) n ■) ⇒ app (app (bijn) g ■) n ■)))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ g : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ H : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (g) i ■) ■)), in-⇒ (λ bijf : Prf (app (app (bijn) f ■) n ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) n ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) i ■) ■)) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) p ■) ■) i ■) ■)) ■) ■) (in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) p ■) ■) i ■) ■)) ■) ■) (in-⇒ (λ lean : Prf (app (app (coq.nat.le) a ■) n ■), in-⇒ (λ fa : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) x ■) ■) i ■) ■)) ■) (a) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) a ■) ■) i ■) ■) (lean) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (f) a ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) a ■) ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (app (f) a ■) ■) (app (g) a ■) ■) (el-⇒ (el-∀ (H) (a) ■) (lean) ■) ■) ■) (i) ■) (fa) ■) ■) ■))) ■) (_clearme) ■))) ■) (el-⇒ (el-∀ (bijf) (i) ■) (lein) ■) ■)))))));
symbol bijn_n_Sn : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (bijn) f ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) n ■) ■) ⇒ app (app (bijn) f ■) (app (coq.nat.S) n ■) ■))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ bijf : Prf (app (app (bijn) f ■) n ■), in-⇒ (λ fS : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) n ■) ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) (app (coq.nat.S) n ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) i ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) (app (coq.nat.S) n ■) ■) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) i ■) ■)) ■) ■) (in-⇒ (λ Hi : Prf (app (app (coq.nat.lt) i ■) (app (coq.nat.S) n ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) i ■) ■)) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) i ■) ■)) ■) ■) (in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) i ■) ■)) ■) ■) (in-⇒ (λ lean : Prf (app (app (coq.nat.le) a ■) n ■), in-⇒ (λ fa : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) x ■) ■) i ■) ■)) ■) (a) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) a ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (a) ■) (n) ■) (lean) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) i ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) (app (f) a ■) ■) (fa) ■) ■) ■))) ■) (_clearme) ■))) ■) (el-⇒ (el-∀ (bijf) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (i) ■) (n) ■) (Hi) ■) ■) ■)) ■) (in-⇒ (λ Hi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) (app (coq.nat.S) n ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) x ■) ■) i ■) ■)) ■) (i) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) i ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) i ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) i ■) i ■) ■) (app (app (coq.nat.le) i ■) (app (coq.nat.S) n ■) ■) ■) (el-∀ (coq.nat.le_n) (i) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) i ■) i ■) ■) (app (app (coq.nat.le) i ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) i ■) i ■) ■) ■) (app (coq.nat.S) n ■) ■) (Hi) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) i ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) (app (f) i ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) __ ■) ■) (app (coq.nat.S) n ■) ■)) ■) (fS) ■) (i) ■) (Hi) ■) ■) (i) ■) (Hi) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (i) ■) (app (coq.nat.S) n ■) ■) (lein) ■) ■))))));
symbol bijn_fg : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ g : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (bijn) f ■) n ■) ⇒ (app (app (bijn) g ■) n ■) ⇒ app (app (bijn) (abs (λ p : El (coq.nat.nat), app (f) (app (g) p ■) ■)) ■) n ■)))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ g : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ bijf : Prf (app (app (bijn) f ■) n ■), in-⇒ (λ bijg : Prf (app (app (bijn) g ■) n ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) n ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) i ■) ■)) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (g) p ■) ■) ■) i ■) ■)) ■) ■) (in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (g) p ■) ■) ■) i ■) ■)) ■) ■) (in-⇒ (λ lean : Prf (app (app (coq.nat.le) a ■) n ■), in-⇒ (λ ga : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) p ■) ■) a ■) ■)) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (g) p ■) ■) ■) i ■) ■)) ■) ■) (in-∀ (λ b : El (coq.nat.nat),  in-⇒ (λ _clearme0 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) b ■) ■) a ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) b ■) ■) a ■) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (g) p ■) ■) ■) i ■) ■)) ■) ■) (in-⇒ (λ lebn : Prf (app (app (coq.nat.le) b ■) n ■), in-⇒ (λ gb : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (g) b ■) ■) a ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (g) x ■) ■) ■) i ■) ■)) ■) (b) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (g) b ■) ■) ■) i ■) ■) (lebn) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) __ ■) ■) i ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) i ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) (app (f) a ■) ■) (ga) ■) ■) (app (g) b ■) ■) (gb) ■) ■) ■))) ■) (_clearme0) ■))) ■) (el-⇒ (el-∀ (bijg) (a) ■) (lean) ■) ■))) ■) (_clearme) ■))) ■) (el-⇒ (el-∀ (bijf) (i) ■) (lein) ■) ■)))))));
symbol bijn_transpose : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ (app (app (coq.nat.le) j ■) n ■) ⇒ app (app (bijn) (app (app (transpose) i ■) j ■) ■) n ■)))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) n ■), in-⇒ (λ lejn : Prf (app (app (coq.nat.le) j ■) n ■), in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ lean : Prf (app (app (coq.nat.le) a ■) n ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) i ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) i ■) ■) coq.bool.false ■) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) p ■) ■) a ■) ■)) ■) ■) (in-⇒ (λ Hi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) i ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) x ■) ■) a ■) ■)) ■) (j) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) j ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) j ■) ■) a ■) ■) (lejn) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (i) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (a) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (a) ■) (i) ■) (Hi) ■) ■) ■) (app (app (app (transpose) i ■) j ■) j ■) ■) (el-∀ (el-∀ (transpose_i_j_j) (i) ■) (j) ■) ■) ■) ■)) ■) (in-⇒ (λ Hi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) i ■) ■) coq.bool.false ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) j ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) j ■) ■) coq.bool.false ■) ■) (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) p ■) ■) a ■) ■)) ■) ■) (in-⇒ (λ Hj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) j ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) x ■) ■) a ■) ■)) ■) (i) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) i ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) i ■) ■) a ■) ■) (lein) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (j) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (a) ■) (j) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (a) ■) (j) ■) (Hj) ■) ■) ■) (app (app (app (transpose) i ■) j ■) i ■) ■) (el-∀ (el-∀ (transpose_i_j_i) (i) ■) (j) ■) ■) ■) ■)) ■) (in-⇒ (λ Hj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) a ■) j ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) x ■) ■) a ■) ■)) ■) (a) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (transpose) i ■) j ■) a ■) ■) a ■) ■) (lean) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) a ■) (app (app (coq.nat.eqb) a ■) j ■) ■) ■) x ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) a ■) x ■) ■) coq.bool.false ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.nat.nat) ■) (i) ■) (a) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) a ■) coq.bool.false ■) ■) coq.bool.false ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.nat.nat) ■) (j) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) a ■) coq.bool.false ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) a ■) coq.bool.false ■) ■) coq.bool.false ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) j ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) i ■) a ■) coq.bool.false ■) ■) coq.bool.false ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) a ■) j ■) ■) (Hj) ■) ■) (app (app (coq.nat.eqb) a ■) i ■) ■) (Hi) ■) ■) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) a ■) j ■) ■) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (coq.nat.eqb) a ■) i ■) ■) ■)))))));
symbol permut_to_bijn : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (permut) f ■) n ■) ⇒ app (app (bijn) f ■) n ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), ∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (permut) f ■) _x_365 ■) ⇒ app (app (bijn) f ■) _x_365 ■))) ■) (in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) coq.nat.O ■)) ■) (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ (app (app (coq.nat.le) j ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) coq.nat.O ■)) ■) (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ (app (app (coq.nat.le) j ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))) ■) (∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) m ■) coq.nat.O ■) ⇒ app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) coq.nat.O ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) m ■) ■)) ■)) ■) (in-⇒ (λ H : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) coq.nat.O ■)), in-⇒ (λ H1 : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ (app (app (coq.nat.le) j ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))), in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ lem0 : Prf (app (app (coq.nat.le) m ■) coq.nat.O ■), el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.ex_intro) (coq.nat.nat) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) x ■) coq.nat.O ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) x ■) ■) m ■) ■)) ■) (coq.nat.O) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.le) coq.nat.O ■) coq.nat.O ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) coq.nat.O ■) ■) m ■) ■) (el-∀ (coq.nat.le_O_n) (coq.nat.O) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (coq.nat.le_n_O_elim) (m) ■) (lem0) ■) (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) coq.nat.O ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (coq.nat.O) ■) (app (f) coq.nat.O ■) ■) (el-⇒ (el-∀ (coq.nat.le_n_O_to_eq) (app (f) coq.nat.O ■) ■) (el-⇒ (el-∀ (H) (coq.nat.O) ■) (el-∀ (coq.nat.le_O_n) (coq.nat.O) ■) ■) ■) ■) ■) ■) ■))))) ■) (_clearme) ■))) ■) (in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ Hind : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (permut) f ■) m ■) ⇒ app (app (bijn) f ■) m ■)), in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ permf : Prf (app (app (permut) f ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (eq_to_bijn) (abs (λ p : El (coq.nat.nat), app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) p ■) ■) ■)) ■) (f) ■) (app (coq.nat.S) m ■) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lei : Prf (app (app (coq.nat.le) i ■) (app (coq.nat.S) m ■) ■), el-∀ (el-∀ (el-∀ (transpose_transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) i ■) ■))) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (bijn_fg) (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) __ ■) ■)) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.S) m ■) ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■)) ■) (app (app (injn) f ■) (app (coq.nat.S) m ■) ■) ■) (app (app (bijn) (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) (in-⇒ (λ lef : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.S) m ■) ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) (app (coq.nat.S) m ■) ■)), in-⇒ (λ __ : Prf (app (app (injn) f ■) (app (coq.nat.S) m ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (bijn_transpose) (app (coq.nat.S) m ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (lef) (app (coq.nat.S) m ■) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) m ■) ■) ■) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) m ■) ■) ■))) ■) (permf) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (bijn_n_Sn) (abs (λ __ : El (coq.nat.nat), app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) __ ■) ■)) ■) (m) ■) (el-⇒ (el-∀ (Hind) (abs (λ __ : El (coq.nat.nat), app (app (app (transpose) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) (app (f) __ ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (permut_S_to_permut_transpose) (f) ■) (m) ■) (permf) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (app (coq.nat.eqb) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) x ■) ■) (app (coq.nat.S) m ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (app (coq.nat.eqb) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (app (coq.nat.eqb) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (app (coq.nat.eqb) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) coq.bool.true ■) ■) ■) ■) (app (app (coq.nat.eqb) (app (f) (app (coq.nat.S) m ■) ■) ■) (app (f) (app (coq.nat.S) m ■) ■) ■) ■) (el-∀ (coq.nat.eqb_n_n) (app (f) (app (coq.nat.S) m ■) ■) ■) ■) ■) ■) ■))))) ■) (n) ■);
constant symbol invert_permut : Els (↑ (coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat));
constant symbol invert_permut_body : Els (↑ (coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat));
constant symbol axiom_invert_permut : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) invert_permut_body ■) n ■) ■));
symbol eq_invert_permut : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) invert_permut_body ■) n ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) invert_permut_body ■) n ■) ■) (el-∀ (axiom_invert_permut) (n) ■) ■);
symbol sym_eq_invert_permut : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) invert_permut_body ■) n ■) ■) (app (invert_permut) n ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) invert_permut_body ■) n ■) ■) (el-∀ (eq_invert_permut) (n) ■) ■);
constant symbol axiom_invert_permut_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) coq.nat.O ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) (app (app (coq.nat.eqb) m ■) (app (f) coq.nat.O ■) ■) ■))) ■);
symbol eq_invert_permut_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) coq.nat.O ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) (app (app (coq.nat.eqb) m ■) (app (f) coq.nat.O ■) ■) ■))) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) coq.nat.O ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) (app (app (coq.nat.eqb) m ■) (app (f) coq.nat.O ■) ■) ■))) ■) (axiom_invert_permut_body_O) ■;
symbol sym_eq_invert_permut_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) (app (app (coq.nat.eqb) m ■) (app (f) coq.nat.O ■) ■) ■))) ■) (app (invert_permut_body) coq.nat.O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) coq.nat.O ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) (app (app (coq.nat.eqb) m ■) (app (f) coq.nat.O ■) ■) ■))) ■) (eq_invert_permut_body_O) ■;
constant symbol axiom_invert_permut_body_S : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) (app (coq.nat.S) n ■) ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (app (app (app (invert_permut) n ■) f ■) m ■) ■) (app (app (coq.nat.eqb) m ■) (app (f) (app (coq.nat.S) n ■) ■) ■) ■))) ■));
symbol eq_invert_permut_body_S : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) (app (coq.nat.S) n ■) ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (app (app (app (invert_permut) n ■) f ■) m ■) ■) (app (app (coq.nat.eqb) m ■) (app (f) (app (coq.nat.S) n ■) ■) ■) ■))) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) (app (coq.nat.S) n ■) ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (app (app (app (invert_permut) n ■) f ■) m ■) ■) (app (app (coq.nat.eqb) m ■) (app (f) (app (coq.nat.S) n ■) ■) ■) ■))) ■) (el-∀ (axiom_invert_permut_body_S) (n) ■) ■);
symbol sym_eq_invert_permut_body_S : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (app (app (app (invert_permut) n ■) f ■) m ■) ■) (app (app (coq.nat.eqb) m ■) (app (f) (app (coq.nat.S) n ■) ■) ■) ■))) ■) (app (invert_permut_body) (app (coq.nat.S) n ■) ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (invert_permut_body) (app (coq.nat.S) n ■) ■) ■) (abs (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (app (app (app (invert_permut) n ■) f ■) m ■) ■) (app (app (coq.nat.eqb) m ■) (app (f) (app (coq.nat.S) n ■) ■) ■) ■))) ■) (el-∀ (eq_invert_permut_body_S) (n) ■) ■);
symbol invert_permut_f : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) m ■) n ■) ⇒ (app (app (injn) f ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) (app (f) m ■) ■) ■) m ■)))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ lenm : Prf (app (app (coq.nat.le) m ■) n ■), el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.nat.le_ind) (m) ■) (abs (λ x_417 : El (coq.nat.nat), (app (app (injn) f ■) x_417 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) x_417 ■) f ■) (app (f) m ■) ■) ■) m ■)) ■) (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (abs (λ __ : El (coq.nat.nat), (app (app (injn) f ■) __ ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) __ ■) f ■) (app (f) __ ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut) (coq.nat.O) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (injn) f ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) coq.nat.O ■) ■) ■) coq.nat.O ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (invert_permut_body) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (injn) f ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) coq.nat.O ■) ■) ■) coq.nat.O ■)) ■) (el-⇒ (el-∀ (sym_eq_invert_permut_body_O) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (injn) f ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) coq.nat.O ■) ■) ■) coq.nat.O ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ (app (app (coq.nat.le) j ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) x ■) ■) coq.nat.O ■)) ■) (in-⇒ (λ auto : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) coq.nat.O ■) ⇒ (app (app (coq.nat.le) j ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.nat.nat) ■) (coq.nat.O) ■) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) coq.bool.true ■) ■) ■)) ■) (app (app (coq.nat.eqb) (app (f) coq.nat.O ■) ■) (app (f) coq.nat.O ■) ■) ■) (el-∀ (coq.nat.eqb_n_n) (app (f) coq.nat.O ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ a : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut) (app (coq.nat.S) a ■) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (injn) f ■) (app (coq.nat.S) a ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) (app (coq.nat.S) a ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (invert_permut_body) ■) (a) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (injn) f ■) (app (coq.nat.S) a ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) (app (coq.nat.S) a ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut_body_S) (a) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (injn) f ■) (app (coq.nat.S) a ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) (app (coq.nat.S) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.S) a ■) ■) ⇒ (app (app (coq.nat.le) j ■) (app (coq.nat.S) a ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) (app (app (app (invert_permut) a ■) f ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) x ■) ■) (app (coq.nat.S) a ■) ■)) ■) (in-⇒ (λ auto : Prf (∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) (app (coq.nat.S) a ■) ■) ⇒ (app (app (coq.nat.le) j ■) (app (coq.nat.S) a ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) i ■) ■) (app (f) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■))), el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) (app (app (app (invert_permut) a ■) f ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) (app (app (app (invert_permut) a ■) f ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) (app (app (app (invert_permut) a ■) f ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) coq.bool.true ■) ■) ■)) ■) (app (app (coq.nat.eqb) (app (f) (app (coq.nat.S) a ■) ■) ■) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) (el-∀ (coq.nat.eqb_n_n) (app (f) (app (coq.nat.S) a ■) ■) ■) ■) ■) ■) ■)) ■) (m) ■) ■) (in-∀ (λ m0 : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut) (app (coq.nat.S) m0 ■) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) m ■) m0 ■) ⇒ ((app (app (injn) f ■) m0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) m0 ■) f ■) (app (f) m ■) ■) ■) m ■) ⇒ (app (app (injn) f ■) (app (coq.nat.S) m0 ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) m ■) ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (invert_permut_body) ■) (m0) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) m ■) m0 ■) ⇒ ((app (app (injn) f ■) m0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) m0 ■) f ■) (app (f) m ■) ■) ■) m ■) ⇒ (app (app (injn) f ■) (app (coq.nat.S) m0 ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) m ■) ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut_body_S) (m0) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) m ■) m0 ■) ⇒ ((app (app (injn) f ■) m0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) m0 ■) f ■) (app (f) m ■) ■) ■) m ■) ⇒ (app (app (injn) f ■) (app (coq.nat.S) m0 ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (y) f ■) (app (f) m ■) ■) ■) m ■)) ■) (in-⇒ (λ lem : Prf (app (app (coq.nat.le) m ■) m0 ■), in-⇒ (λ H : Prf ((app (app (injn) f ■) m0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) m0 ■) f ■) (app (f) m ■) ■) ■) m ■), in-⇒ (λ H1 : Prf (app (app (injn) f ■) (app (coq.nat.S) m0 ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) m0 ■) ■) (app (app (app (invert_permut) m0 ■) f ■) (app (f) m ■) ■) ■) x ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (app (coq.nat.S) m0 ■) ■) (app (app (app (invert_permut) m0 ■) f ■) (app (f) m ■) ■) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) m ■)) ■) (el-⇒ (H) (el-⇒ (el-∀ (el-∀ (injn_Sn_n) (f) ■) (m0) ■) (H1) ■) ■) ■) ■) (app (app (coq.nat.eqb) (app (f) m ■) ■) (app (f) (app (coq.nat.S) m0 ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_eq_to_eqb_false) (app (f) m ■) ■) (app (f) (app (coq.nat.S) m0 ■) ■) ■) (el-⇒ (el-∀ (coq.connectives.nmk) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) m ■) ■) (app (f) (app (coq.nat.S) m0 ■) ■) ■) ■) (in-⇒ (λ eqf : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) m ■) ■) (app (f) (app (coq.nat.S) m0 ■) ■) ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (coq.nat.S) m0 ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (H1) (m) ■) (app (coq.nat.S) m0 ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (m) ■) (m0) ■) (lem) ■) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) m0 ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (f) m ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) m ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (f) m ■) ■) ■) (app (f) (app (coq.nat.S) m0 ■) ■) ■) (eqf) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_eq) (m) ■) (app (coq.nat.S) m0 ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S) (m) ■) (m0) ■) (lem) ■) ■) ■)) ■) ■) ■)))) ■) ■) ■)) ■) (n) ■) (lenm) ■))));
symbol let_clause_1063 : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (permut) f ■) n ■) ⇒ ∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ (app (app (coq.nat.le) j ■) n ■) ⇒ ∀ (λ a : El (coq.nat.nat), (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■) ⇒ (app (app (coq.nat.le) a ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ⇒ ∀ (λ b : El (coq.nat.nat), (app (app (coq.connectives.And) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ■) ⇒ (app (app (coq.nat.le) b ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ⇒ (∀ (λ i0 : El (coq.nat.nat), (app (app (coq.nat.le) i0 ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i0 ■) ■) n ■)) ⇒ (app (app (injn) f ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) b ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) j ■))))))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ permf : Prf (app (app (permut) f ■) n ■), in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) n ■), in-⇒ (λ lejn : Prf (app (app (coq.nat.le) j ■) n ■), in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■), in-⇒ (λ lean : Prf (app (app (coq.nat.le) a ■) n ■), in-⇒ (λ fa : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■), in-∀ (λ b : El (coq.nat.nat),  in-⇒ (λ _clearme0 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ■), in-⇒ (λ lebn : Prf (app (app (coq.nat.le) b ■) n ■), in-⇒ (λ fb : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■), in-⇒ (λ __ : Prf (∀ (λ i0 : El (coq.nat.nat), (app (app (coq.nat.le) i0 ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i0 ■) ■) n ■)), in-⇒ (λ injf : Prf (app (app (injn) f ■) n ■), in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) b ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (b) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) __1 ■) ■) j ■)) ■) (fb) ■) (a) ■) (auto) ■))))))))))))))))));
symbol let_clause_1068 : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (permut) f ■) n ■) ⇒ ∀ (λ i : El (coq.nat.nat), ∀ (λ j : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ (app (app (coq.nat.le) j ■) n ■) ⇒ ∀ (λ a : El (coq.nat.nat), (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■) ⇒ (app (app (coq.nat.le) a ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ⇒ ∀ (λ b : El (coq.nat.nat), (app (app (coq.connectives.And) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ■) ⇒ (app (app (coq.nat.le) b ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ⇒ (∀ (λ i0 : El (coq.nat.nat), (app (app (coq.nat.le) i0 ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i0 ■) ■) n ■)) ⇒ (app (app (injn) f ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) b ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■))))))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ permf : Prf (app (app (permut) f ■) n ■), in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) n ■), in-⇒ (λ lejn : Prf (app (app (coq.nat.le) j ■) n ■), in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■), in-⇒ (λ lean : Prf (app (app (coq.nat.le) a ■) n ■), in-⇒ (λ fa : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■), in-∀ (λ b : El (coq.nat.nat),  in-⇒ (λ _clearme0 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ■), in-⇒ (λ lebn : Prf (app (app (coq.nat.le) b ■) n ■), in-⇒ (λ fb : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■), in-⇒ (λ __ : Prf (∀ (λ i0 : El (coq.nat.nat), (app (app (coq.nat.le) i0 ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i0 ■) ■) n ■)), in-⇒ (λ injf : Prf (app (app (injn) f ■) n ■), in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) b ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (j) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) __1 ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (el-∀ (let_clause_1063) (f) ■) (n) ■) (permf) ■) (i) ■) (j) ■) (lein) ■) (lejn) ■) (a) ■) (_clearme) ■) (lean) ■) (fa) ■) (b) ■) (_clearme0) ■) (lebn) ■) (fb) ■) (__) ■) (injf) ■) (auto) ■) ■) (i) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (f) a ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __1 ■) i ■)) ■) (fa) ■) (j) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (el-∀ (let_clause_1063) (f) ■) (n) ■) (permf) ■) (i) ■) (j) ■) (lein) ■) (lejn) ■) (a) ■) (_clearme) ■) (lean) ■) (fa) ■) (b) ■) (_clearme0) ■) (lebn) ■) (fb) ■) (__) ■) (injf) ■) (auto) ■) ■) ■))))))))))))))))));
symbol injective_invert_permut : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (permut) f ■) n ■) ⇒ app (app (injn) (app (app (invert_permut) n ■) f ■) ■) n ■))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ permf : Prf (app (app (permut) f ■) n ■), in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ j : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) n ■), in-⇒ (λ lejn : Prf (app (app (coq.nat.le) j ■) n ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) i ■) ■)) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) i ■) ■) (app (app (app (invert_permut) n ■) f ■) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.le) a ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) i ■) ■) (app (app (app (invert_permut) n ■) f ■) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (in-⇒ (λ lean : Prf (app (app (coq.nat.le) a ■) n ■), in-⇒ (λ fa : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) i ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat) ■) (abs (λ p : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.le) p ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) p ■) ■) j ■) ■)) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) i ■) ■) (app (app (app (invert_permut) n ■) f ■) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (in-∀ (λ b : El (coq.nat.nat),  in-⇒ (λ _clearme0 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.le) b ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) i ■) ■) (app (app (app (invert_permut) n ■) f ■) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (in-⇒ (λ lebn : Prf (app (app (coq.nat.le) b ■) n ■), in-⇒ (λ fb : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) b ■) ■) j ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i1 : El (coq.nat.nat), (app (app (coq.nat.le) i1 ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i1 ■) ■) n ■)) ■) (app (app (injn) f ■) n ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) i ■) ■) (app (app (app (invert_permut) n ■) f ■) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) j ■) ■) (in-⇒ (λ __ : Prf (∀ (λ i0 : El (coq.nat.nat), (app (app (coq.nat.le) i0 ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i0 ■) ■) n ■)), in-⇒ (λ injf : Prf (app (app (injn) f ■) n ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (f) a ■) ■) (abs (λ x_1 : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) x_1 ■) ■) (app (app (app (invert_permut) n ■) f ■) j ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x_1 ■) j ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (f) b ■) ■) (abs (λ x_1 : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (invert_permut) n ■) f ■) (app (f) a ■) ■) ■) (app (app (app (invert_permut) n ■) f ■) x_1 ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (a) ■) (abs (λ x : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (app (invert_permut) n ■) f ■) (app (f) b ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) (app (f) b ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (b) ■) (abs (λ x : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) x ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) a ■) ■) (app (f) b ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) b ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __1 ■) (app (f) b ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) (app (f) __1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) __1 ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) (app (f) a ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (el-∀ (let_clause_1068) (f) ■) (n) ■) (permf) ■) (i) ■) (j) ■) (lein) ■) (lejn) ■) (a) ■) (_clearme) ■) (lean) ■) (fa) ■) (b) ■) (_clearme0) ■) (lebn) ■) (fb) ■) (__) ■) (injf) ■) (auto) ■) ■) ■) (b) ■) (auto) ■) ■) (app (f) a ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (el-∀ (let_clause_1068) (f) ■) (n) ■) (permf) ■) (i) ■) (j) ■) (lein) ■) (lejn) ■) (a) ■) (_clearme) ■) (lean) ■) (fa) ■) (b) ■) (_clearme0) ■) (lebn) ■) (fb) ■) (__) ■) (injf) ■) (auto) ■) ■)) ■) (app (app (app (invert_permut) n ■) f ■) (app (f) b ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (invert_permut_f) (f) ■) (n) ■) (b) ■) (lebn) ■) (injf) ■) ■) ■) (app (app (app (invert_permut) n ■) f ■) (app (f) a ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (invert_permut_f) (f) ■) (n) ■) (a) ■) (lean) ■) (injf) ■) ■) ■) (j) ■) (fb) ■) ■) (i) ■) (fa) ■))) ■) (permf) ■))) ■) (_clearme0) ■))) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (permut_to_bijn) (n) ■) (f) ■) (permf) ■) (j) ■) (lejn) ■) ■))) ■) (_clearme) ■))) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (permut_to_bijn) (n) ■) (f) ■) (permf) ■) (i) ■) (lein) ■) ■)))))));
symbol permut_invert_permut : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (permut) f ■) n ■) ⇒ app (app (permut) (app (app (invert_permut) n ■) f ■) ■) n ■))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ permf : Prf (app (app (permut) f ■) n ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (∀ (λ x : El (coq.nat.nat), (app (app (coq.nat.le) x ■) n ■) ⇒ app (app (coq.nat.le) (app (app (app (invert_permut) n ■) f ■) x ■) ■) n ■)) ■) (app (app (injn) (app (app (invert_permut) n ■) f ■) ■) n ■) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lein : Prf (app (app (coq.nat.le) i ■) n ■), el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), app (app (coq.nat.le) (app (app (app (invert_permut) _x_365 ■) f ■) i ■) ■) _x_365 ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut) (coq.nat.O) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (app (y) f ■) i ■) ■) coq.nat.O ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (invert_permut_body) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (app (y) f ■) i ■) ■) coq.nat.O ■)) ■) (el-⇒ (el-∀ (sym_eq_invert_permut_body_O) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (app (y) f ■) i ■) ■) coq.nat.O ■)) ■) (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.bool.match_bool_prop) (abs (λ __ : El (coq.bool.bool), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) __ ■) ■) coq.nat.O ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.nat.nat) ■) (coq.nat.O) ■) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (coq.nat.le_n) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) coq.bool.true ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.nat.nat) ■) (coq.nat.O) ■) (coq.nat.O) ■) (abs (λ y : El (coq.nat.nat), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) coq.bool.false ■) ■) y ■)) ■) (el-∀ (coq.nat.le_n) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) coq.nat.O ■) coq.bool.false ■) ■) ■) ■) (app (app (coq.nat.eqb) i ■) (app (f) coq.nat.O ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ n1 : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut) (app (coq.nat.S) n1 ■) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) n1 ■) ⇒ app (app (coq.nat.le) (app (app (y) f ■) i ■) ■) (app (coq.nat.S) n1 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) ((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (invert_permut_body) ■) (n1) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) n1 ■) ⇒ app (app (coq.nat.le) (app (app (y) f ■) i ■) ■) (app (coq.nat.S) n1 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_invert_permut_body_S) (n1) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) n1 ■) ⇒ app (app (coq.nat.le) (app (app (y) f ■) i ■) ■) (app (coq.nat.S) n1 ■) ■)) ■) (in-⇒ (λ Hind : Prf (app (app (coq.nat.le) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) n1 ■), el-∀ (el-⇒ (el-⇒ (el-∀ (coq.bool.match_bool_prop) (abs (λ __ : El (coq.bool.bool), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) __ ■) ■) (app (coq.nat.S) n1 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) (abs (λ y : El (coq.nat.nat), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (coq.nat.le_n) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) coq.bool.true ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (app (coq.nat.S) n1 ■) ■) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) (abs (λ y : El (coq.nat.nat), app (app (coq.nat.le) y ■) (app (coq.nat.S) n1 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (app (app (app (invert_permut) n1 ■) f ■) i ■) ■) (n1) ■) (Hind) ■) ■) ■) (app (app (coq.nat.eqb) i ■) (app (f) (app (coq.nat.S) n1 ■) ■) ■) ■)) ■) ■) ■)) ■) (n) ■))) ■) (el-⇒ (el-∀ (el-∀ (injective_invert_permut) (f) ■) (n) ■) (permf) ■) ■)));
symbol f_invert_permut : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) m ■) n ■) ⇒ (app (app (permut) f ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (app (app (invert_permut) n ■) f ■) m ■) ■) ■) m ■)))) ≔ in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ lemn : Prf (app (app (coq.nat.le) m ■) n ■), in-⇒ (λ permf : Prf (app (app (permut) f ■) n ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ app (app (coq.nat.le) (app (app (app (invert_permut) n ■) f ■) i ■) ■) n ■)) ■) (app (app (injn) (app (app (invert_permut) n ■) f ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (app (app (invert_permut) n ■) f ■) m ■) ■) ■) m ■) ■) (in-⇒ (λ Hle : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ app (app (coq.nat.le) (app (app (app (invert_permut) n ■) f ■) i ■) ■) n ■)), in-⇒ (λ Hinj : Prf (app (app (injn) (app (app (invert_permut) n ■) f ■) ■) n ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) n ■)) ■) (app (app (injn) f ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f) (app (app (app (invert_permut) n ■) f ■) m ■) ■) ■) m ■) ■) (in-⇒ (λ lef : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.le) i ■) n ■) ⇒ app (app (coq.nat.le) (app (f) i ■) ■) n ■)), in-⇒ (λ injf : Prf (app (app (injn) f ■) n ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-⇒ (el-∀ (el-∀ (injective_invert_permut) (f) ■) (n) ■) (permf) ■) (app (f) (app (app (app (invert_permut) n ■) f ■) m ■) ■) ■) (m) ■) (el-⇒ (el-∀ (lef) (app (app (app (invert_permut) n ■) f ■) m ■) ■) (el-⇒ (el-∀ (Hle) (m) ■) (lemn) ■) ■) ■) (lemn) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (invert_permut_f) (f) ■) (n) ■) (app (app (app (invert_permut) n ■) f ■) m ■) ■) (el-⇒ (el-∀ (Hle) (m) ■) (lemn) ■) ■) (injf) ■) ■))) ■) (permf) ■))) ■) (el-⇒ (el-∀ (el-∀ (permut_invert_permut) (f) ■) (n) ■) (permf) ■) ■)))));
