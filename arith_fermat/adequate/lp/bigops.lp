require open coq.sttfa;
require coq.bool;
require coq.connectives;
require coq.div_mod;
require coq.leibniz;
require coq.logic;
require coq.nat;
symbol sameF_upto : Els (∀ₖ (λ A, ↑ (coq.nat.nat ⇝ (coq.nat.nat ⇝ A) ⇝ (coq.nat.nat ⇝ A) ⇝ prop))) ≔ in-∀ₖ (λ A, abs (λ k : El (coq.nat.nat), abs (λ f : El ((coq.nat.nat ⇝ A)), abs (λ g : El ((coq.nat.nat ⇝ A)), ∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) k ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (f) i ■) ■) (app (g) i ■) ■)))));
symbol sameF_p : Els (∀ₖ (λ A, ↑ (coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.bool.bool) ⇝ (coq.nat.nat ⇝ A) ⇝ (coq.nat.nat ⇝ A) ⇝ prop))) ≔ in-∀ₖ (λ A, abs (λ k : El (coq.nat.nat), abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ f : El ((coq.nat.nat ⇝ A)), abs (λ g : El ((coq.nat.nat ⇝ A)), ∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) k ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (f) i ■) ■) (app (g) i ■) ■))))));
symbol sameF_upto_le : Prf (∀ₚ (λ A, ∀ (λ f : El ((coq.nat.nat ⇝ A)), ∀ (λ g : El ((coq.nat.nat ⇝ A)), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) m ■) ⇒ (app (app (app (el-∀ₖ (sameF_upto) (A) ■) m ■) f ■) g ■) ⇒ app (app (app (el-∀ₖ (sameF_upto) (A) ■) n ■) f ■) g ■)))))) ≔ in-∀ₚ (λ A, in-∀ (λ f : El (coq.nat.nat ⇝ A),  in-∀ (λ g : El (coq.nat.nat ⇝ A),  in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ lenm : Prf (app (app (coq.nat.le) n ■) m ■), in-⇒ (λ samef : Prf (app (app (app (el-∀ₖ (sameF_upto) (A) ■) m ■) f ■) g ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ ltin : Prf (app (app (coq.nat.lt) i ■) n ■), el-⇒ (el-∀ (samef) (i) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_to_le_to_lt) (i) ■) (n) ■) (m) ■) (ltin) ■) (lenm) ■) ■)))))))));
symbol sameF_p_le : Prf (∀ₚ (λ A, ∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f : El ((coq.nat.nat ⇝ A)), ∀ (λ g : El ((coq.nat.nat ⇝ A)), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) m ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (A) ■) m ■) p ■) f ■) g ■) ⇒ app (app (app (app (el-∀ₖ (sameF_p) (A) ■) n ■) p ■) f ■) g ■))))))) ≔ in-∀ₚ (λ A, in-∀ (λ p : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f : El (coq.nat.nat ⇝ A),  in-∀ (λ g : El (coq.nat.nat ⇝ A),  in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ lenm : Prf (app (app (coq.nat.le) n ■) m ■), in-⇒ (λ samef : Prf (app (app (app (app (el-∀ₖ (sameF_p) (A) ■) m ■) p ■) f ■) g ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ ltin : Prf (app (app (coq.nat.lt) i ■) n ■), in-⇒ (λ pi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (samef) (i) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_to_le_to_lt) (i) ■) (n) ■) (m) ■) (ltin) ■) (lenm) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p) i ■) ■) (pi) ■) ■)))))))))));
constant symbol bigop : Els (∀ₖ (λ H, ↑ (coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H)));
constant symbol bigop_body : Els (∀ₖ (λ H, ↑ (coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H)));
constant symbol axiom_bigop_O : Prf (∀ₚ (λ H, app (app (el-∀ₖ (coq.connectives.equal) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) coq.nat.O ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■));
symbol eq_bigop_O : Prf (∀ₚ (λ H, app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) coq.nat.O ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■)) ≔ in-∀ₚ (λ H, el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) coq.nat.O ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■) (el-∀ₚ (axiom_bigop_O) (H) ■) ■);
symbol sym_eq_bigop_O : Prf (∀ₚ (λ H, app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■) (app (el-∀ₖ (bigop) (H) ■) coq.nat.O ■) ■)) ≔ in-∀ₚ (λ H, el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) coq.nat.O ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■) (el-∀ₚ (eq_bigop_O) (H) ■) ■);
constant symbol axiom_bigop_S : Prf (∀ₚ (λ H, ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) (app (coq.nat.S) n ■) ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■)));
symbol eq_bigop_S : Prf (∀ₚ (λ H, ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) (app (coq.nat.S) n ■) ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■))) ≔ in-∀ₚ (λ H, in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) (app (coq.nat.S) n ■) ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■) (el-∀ (el-∀ₚ (axiom_bigop_S) (H) ■) (n) ■) ■));
symbol sym_eq_bigop_S : Prf (∀ₚ (λ H, ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■) (app (el-∀ₖ (bigop) (H) ■) (app (coq.nat.S) n ■) ■) ■))) ≔ in-∀ₚ (λ H, in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop) (H) ■) (app (coq.nat.S) n ■) ■) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■) (el-∀ (el-∀ₚ (eq_bigop_S) (H) ■) (n) ■) ■));
constant symbol axiom_bigop_body_O : Prf (∀ₚ (λ H, app (app (el-∀ₖ (coq.connectives.equal) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), nil))))) ■));
symbol eq_bigop_body_O : Prf (∀ₚ (λ H, app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), nil))))) ■)) ≔ in-∀ₚ (λ H, el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), nil))))) ■) (el-∀ₚ (axiom_bigop_body_O) (H) ■) ■);
symbol sym_eq_bigop_body_O : Prf (∀ₚ (λ H, app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), nil))))) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■)) ≔ in-∀ₚ (λ H, el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) coq.nat.O ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), nil))))) ■) (el-∀ₚ (eq_bigop_body_O) (H) ■) ■);
constant symbol axiom_bigop_body_S : Prf (∀ₚ (λ H, ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (H) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) (app (p) n ■) ■))))) ■)));
symbol eq_bigop_body_S : Prf (∀ₚ (λ H, ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (H) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) (app (p) n ■) ■))))) ■))) ≔ in-∀ₚ (λ H, in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (H) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) (app (p) n ■) ■))))) ■) (el-∀ (el-∀ₚ (axiom_bigop_body_S) (H) ■) (n) ■) ■));
symbol sym_eq_bigop_body_S : Prf (∀ₚ (λ H, ∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (H) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) (app (p) n ■) ■))))) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■))) ≔ in-∀ₚ (λ H, in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) ((coq.nat.nat ⇝ coq.bool.bool) ⇝ H ⇝ (H ⇝ H ⇝ H) ⇝ (coq.nat.nat ⇝ H) ⇝ H) ■) (app (el-∀ₖ (bigop_body) (H) ■) (app (coq.nat.S) n ■) ■) ■) (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil : El (H), abs (λ op : El ((H ⇝ H ⇝ H)), abs (λ f : El ((coq.nat.nat ⇝ H)), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (H) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (H) ■) n ■) p ■) nil ■) op ■) f ■) ■) (app (p) n ■) ■))))) ■) (el-∀ (el-∀ₚ (eq_bigop_body_S) (H) ■) (n) ■) ■));
symbol bigop_Strue : Prf (∀ₚ (λ B, ∀ (λ k : El (coq.nat.nat), ∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ nil : El (B), ∀ (λ op : El ((B ⇝ B ⇝ B)), ∀ (λ f : El ((coq.nat.nat ⇝ B)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) (app (coq.nat.S) k ■) ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■))))))) ≔ in-∀ₚ (λ B, in-∀ (λ k : El (coq.nat.nat),  in-∀ (λ p : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ nil : El (B),  in-∀ (λ op : El (B ⇝ B ⇝ B),  in-∀ (λ f : El (coq.nat.nat ⇝ B),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_S) (B) ■) (k) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_body_S) (B) ■) (k) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■)) ■) (in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) x ■) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (abs (λ y : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) coq.bool.true ■) ■) ■) ■) (app (p) k ■) ■) (H) ■)) ■) ■))))));
symbol bigop_Sfalse : Prf (∀ₚ (λ B, ∀ (λ k : El (coq.nat.nat), ∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ nil : El (B), ∀ (λ op : El ((B ⇝ B ⇝ B)), ∀ (λ f : El ((coq.nat.nat ⇝ B)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.false ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) (app (coq.nat.S) k ■) ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■))))))) ≔ in-∀ₚ (λ B, in-∀ (λ k : El (coq.nat.nat),  in-∀ (λ p : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ nil : El (B),  in-∀ (λ op : El (B ⇝ B ⇝ B),  in-∀ (λ f : El (coq.nat.nat ⇝ B),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_S) (B) ■) (k) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.false ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_body_S) (B) ■) (k) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.false ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (in-⇒ (λ H : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) x ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (abs (λ y : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) coq.bool.false ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) k ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) coq.bool.false ■) ■) ■) ■) (app (p) k ■) ■) (H) ■)) ■) ■))))));
symbol same_bigop : Prf (∀ₚ (λ B, ∀ (λ k : El (coq.nat.nat), ∀ (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ nil : El (B), ∀ (λ op : El ((B ⇝ B ⇝ B)), ∀ (λ f : El ((coq.nat.nat ⇝ B)), ∀ (λ g : El ((coq.nat.nat ⇝ B)), (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) k ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) k ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) k ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■))))))))) ≔ in-∀ₚ (λ B, in-∀ (λ k : El (coq.nat.nat),  in-∀ (λ p1 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ p2 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ nil : El (B),  in-∀ (λ op : El (B ⇝ B ⇝ B),  in-∀ (λ f : El (coq.nat.nat ⇝ B),  in-∀ (λ g : El (coq.nat.nat ⇝ B),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) _x_365 ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) _x_365 ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) _x_365 ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) _x_365 ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_O) (B) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) coq.nat.O ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) coq.nat.O ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_body_O) (B) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) coq.nat.O ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) coq.nat.O ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_body_O) (B) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) coq.nat.O ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) coq.nat.O ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_O) (B) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) coq.nat.O ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) coq.nat.O ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) coq.nat.O ■) p1 ■) p2 ■), in-⇒ (λ auto' : Prf (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) coq.nat.O ■) p1 ■) f ■) g ■), el-∀ (el-∀ₚ (coq.logic.refl) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■))) ■) ■) ■) ■) ■) (in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_S) (B) ■) (n) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), ((app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) n ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) n ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ⇒ (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) (app (coq.nat.S) n ■) ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) (app (coq.nat.S) n ■) ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) (app (coq.nat.S) n ■) ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_S) (B) ■) (n) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), ((app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) n ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) n ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ⇒ (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) (app (coq.nat.S) n ■) ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) (app (coq.nat.S) n ■) ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop_body) (B) ■) (app (coq.nat.S) n ■) ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_body_S) (B) ■) (n) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), ((app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) n ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) n ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ⇒ (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) (app (coq.nat.S) n ■) ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) (app (coq.nat.S) n ■) ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop_body) (B) ■) (app (coq.nat.S) n ■) ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (sym_eq_bigop_body_S) (B) ■) (n) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), ((app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) n ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) n ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ⇒ (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) (app (coq.nat.S) n ■) ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) (app (coq.nat.S) n ■) ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (abs (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ nil0 : El (B), abs (λ op0 : El ((B ⇝ B ⇝ B)), abs (λ f0 : El ((coq.nat.nat ⇝ B)), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op0) (app (f0) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) p ■) nil0 ■) op0 ■) f0 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) p ■) nil0 ■) op0 ■) f0 ■) ■) (app (p) n ■) ■))))) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■)) ■) (in-⇒ (λ Hind : Prf ((app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) n ■) p1 ■) p2 ■) ⇒ (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) n ■) p1 ■) f ■) g ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■), in-⇒ (λ samep : Prf (app (app (app (el-∀ₖ (sameF_upto) (coq.bool.bool) ■) (app (coq.nat.S) n ■) ■) p1 ■) p2 ■), in-⇒ (λ samef : Prf (app (app (app (app (el-∀ₖ (sameF_p) (B) ■) (app (coq.nat.S) n ■) ■) p1 ■) f ■) g ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (abs (λ x : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) n ■) ■) x ■) ■) x ■) (app (p1) n ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (app (p2) n ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.bool.bool) ■) (app (p1) n ■) ■) (abs (λ x_1 : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (app (p1) n ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) x_1 ■) ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (app (p1) n ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (app (p1) n ■) ■) ■) ■) (in-⇒ (λ H1 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) x ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (abs (λ y : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) y ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) coq.bool.true ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (abs (λ y : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (B) ■) (app (f) n ■) ■) (abs (λ x_1 : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (op) x_1 ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) ■) (app (g) n ■) ■) (el-⇒ (el-⇒ (el-∀ (samef) (n) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) n ■) ■) ■) (H1) ■) ■) ■) ■) ■) (app (p1) n ■) ■) (H1) ■)) ■) (in-⇒ (λ H1 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) x ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (B) ■) (app (app (op) (app (f) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (abs (λ y : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) y ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) coq.bool.false ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (B) ■) (app (app (op) (app (g) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) (abs (λ y : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (g) i ■)) ■) ■) ■) ■) ■) (app (p1) n ■) ■) (H1) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (p1) n ■) ■) ■) ■) (app (p2) n ■) ■) (el-⇒ (el-∀ (samep) (n) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) n ■) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (el-⇒ (el-⇒ (Hind) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sameF_upto_le) (coq.bool.bool) ■) (p1) ■) (p2) ■) (n) ■) (app (coq.nat.S) n ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (coq.nat.pred) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.le) n ■) (app (coq.nat.S) n ■) ■) ■) (el-∀ (coq.nat.le_pred_n) (app (coq.nat.S) n ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (n) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.le) n ■) (app (coq.nat.S) n ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) n ■) (app (coq.nat.S) n ■) ■) ■) ■) (app (coq.nat.pred) (app (coq.nat.S) n ■) ■) ■) (el-∀ (coq.nat.pred_Sn) (n) ■) ■) ■) ■) (samep) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sameF_p_le) (B) ■) (p1) ■) (f) ■) (g) ■) (n) ■) (app (coq.nat.S) n ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (coq.nat.pred) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.le) n ■) (app (coq.nat.S) n ■) ■) ■) (el-∀ (coq.nat.le_pred_n) (app (coq.nat.S) n ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (n) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.le) n ■) (app (coq.nat.S) n ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) n ■) (app (coq.nat.S) n ■) ■) ■) ■) (app (coq.nat.pred) (app (coq.nat.S) n ■) ■) ■) (el-∀ (coq.nat.pred_Sn) (n) ■) ■) ■) ■) (samef) ■) ■) ■)))) ■) ■) ■) ■)) ■) (k) ■))))))));
symbol bigop_false : Prf (∀ₚ (λ B, ∀ (λ n : El (coq.nat.nat), ∀ (λ nil : El (B), ∀ (λ op : El ((B ⇝ B ⇝ B)), ∀ (λ f : El ((coq.nat.nat ⇝ B)), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) nil ■)))))) ≔ in-∀ₚ (λ B, in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ nil : El (B),  in-∀ (λ op : El (B ⇝ B ⇝ B),  in-∀ (λ f : El (coq.nat.nat ⇝ B),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) _x_365 ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) nil ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_body_O) (B) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_O) (B) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ B ⇝ (B ⇝ B ⇝ B) ⇝ (coq.nat.nat ⇝ B) ⇝ B)), app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) coq.nat.O ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) ■) ■) (in-∀ (λ n1 : El (coq.nat.nat),  in-⇒ (λ Hind : Prf (app (app (el-∀ₖ (coq.logic.eq) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) nil ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (B) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (abs (λ x : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) x ■) nil ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (B) ■) (nil) ■) (abs (λ __ : El (B), app (app (el-∀ₖ (coq.logic.eq) (B) ■) __ ■) nil ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (B) ■) (nil) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) n1 ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (Hind) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (B) ■) (app (coq.nat.S) n1 ■) ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) nil ■) op ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (B) ■) (n1) ■) (abs (λ __ : El (coq.nat.nat), coq.bool.false)) ■) (nil) ■) (op) ■) (f) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) ■))) ■) (n) ■)))));
constant symbol Aop : Els (∀ₖ (λ A, ↑ (A ⇝ prop)));
constant symbol mk_Aop : Prf (∀ₚ (λ A, ∀ (λ nil : El (A), ∀ (λ op : El ((A ⇝ A ⇝ A)), (∀ (λ a : El (A), app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (app (op) nil ■) a ■) ■) a ■)) ⇒ (∀ (λ a : El (A), app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (app (op) a ■) nil ■) ■) a ■)) ⇒ (∀ (λ a : El (A), ∀ (λ b : El (A), ∀ (λ c : El (A), app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (app (op) a ■) (app (app (op) b ■) c ■) ■) ■) (app (app (op) (app (app (op) a ■) b ■) ■) c ■) ■)))) ⇒ app (el-∀ₖ (Aop) (A) ■) nil ■))));
symbol assoc : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), ∀ (λ c : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) a ■) (app (app (coq.nat.times) b ■) c ■) ■) ■) (app (app (coq.nat.times) (app (app (coq.nat.times) a ■) b ■) ■) c ■) ■)))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-∀ (λ c : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.nat.times) a ■) b ■) ■) c ■) ■) (app (app (coq.nat.times) a ■) (app (app (coq.nat.times) b ■) c ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.associative_times) (a) ■) (b) ■) (c) ■) ■)));
symbol timesA : Prf (app (el-∀ₖ (Aop) (coq.nat.nat) ■) (app (coq.nat.S) coq.nat.O ■) ■) ≔ el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (mk_Aop) (coq.nat.nat) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (in-∀ (λ a : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (app (coq.nat.S) coq.nat.O ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) a ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) a ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times_body_S) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) a ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.plus) a ■) (app (y) a ■) ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.plus) a ■) (app (y) a ■) ■) ■) a ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_times_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.plus) a ■) (app (y) a ■) ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (a) ■) (app (app (coq.nat.plus) a ■) coq.nat.O ■) ■) (el-∀ (coq.nat.plus_n_O) (a) ■) ■) ■) ■) ■) ■) ■) ■)) ■) (in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (n) ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (el-∀ (coq.nat.times_n_1) (n) ■) ■)) ■) (in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-∀ (λ c : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.nat.times) a ■) b ■) ■) c ■) ■) (app (app (coq.nat.times) a ■) (app (app (coq.nat.times) b ■) c ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.associative_times) (a) ■) (b) ■) (c) ■) ■)))) ■;
symbol bigop_I_gen : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), ∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) b ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) b ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■))))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), ∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) _x_365 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) _x_365 ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) _x_365 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)))) ■) (in-∀ (λ p : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.eq_minus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (y) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (y) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eq_minus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) coq.nat.O ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (y) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.le) a ■) coq.nat.O ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■)) ■) ■) ■) ■) ■) ■) ■))) ■) (in-∀ (λ b0 : El (coq.nat.nat),  in-⇒ (λ Hind : Prf (∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) a ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■))), in-∀ (λ p : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ lea : Prf (app (app (coq.nat.le) a ■) (app (coq.nat.S) b0 ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) a ■) (app (coq.nat.S) b0 ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (coq.nat.S) b0 ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (in-⇒ (λ Ha : Prf (app (app (coq.nat.lt) a ■) (app (coq.nat.S) b0 ■) ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) b0 ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) b0 ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (in-⇒ (λ Hcase : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) b0 ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) b0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) a ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) x ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (coq.nat.times) (app (f) b0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) (app (app (coq.nat.plus) (app (app (coq.nat.minus) b0 ■) a ■) ■) a ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.nat.times) (app (f) b0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f2) (coq.nat.nat) ■) (coq.nat.nat) ■) (coq.nat.nat) ■) (coq.nat.times) ■) (app (f) (app (app (coq.nat.plus) (app (app (coq.nat.minus) b0 ■) a ■) ■) a ■) ■) ■) (app (f) b0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (coq.nat.nat) ■) (coq.nat.nat) ■) (f) ■) (app (app (coq.nat.plus) (app (app (coq.nat.minus) b0 ■) a ■) ■) a ■) ■) (b0) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (b0) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x_1 ■) b0 ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (b0) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.minus) b0 ■) a ■) ■) a ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.plus_minus_m_m) (b0) ■) (a) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (Hind) (p) ■) (f) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) a ■) ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Strue) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a ■) ■) (abs (λ __ : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) __ ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (abs (λ __ : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) __ ■) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (b0) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) x_1 ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p) b0 ■) ■) (Hcase) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.minus) b0 ■) a ■) ■) a ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.plus_minus_m_m) (b0) ■) (a) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) a ■) ■) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (abs (λ __ : El (coq.nat.nat), (app (app (coq.nat.le) __ ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) __ ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) __ ■) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.le) coq.nat.O ■) b0 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) coq.nat.O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (b0) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (app (coq.nat.S) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) ■) (app (app (coq.nat.minus) b0 ■) coq.nat.O ■) ■) (el-∀ (coq.nat.minus_n_O) (b0) ■) ■) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) coq.nat.O ■) ■) (el-∀ (coq.nat.minus_n_O) (app (coq.nat.S) b0 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus) (app (coq.nat.S) b0 ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (coq.nat.le) (app (coq.nat.S) n ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) n ■) ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (b0) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (coq.nat.le) (app (coq.nat.S) n ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) n ■) ■) ■) ■))) ■) (in-∀ (λ a1 : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus_body_S) (b0) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) (app (coq.nat.S) a1 ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) a1 ■) ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) a1 ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ q : El (coq.nat.nat), app (app (coq.nat.minus) b0 ■) q ■)) ■) (a1) ■) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.le) (app (coq.nat.S) a1 ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) a1 ■) ■) ■) ■)) ■) (in-⇒ (λ lta1 : Prf (app (app (coq.nat.le) (app (coq.nat.S) a1 ■) ■) b0 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (coq.nat.pred) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) (app (coq.nat.S) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) x ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) ■) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_plus_to_minus_r) (coq.nat.O) ■) (a1) ■) (b0) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) a1 ■) ■) ■) b0 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) a1 ■) ■) ■) b0 ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_plus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) a1 ■) ■) ■) b0 ■)) ■) (lta1) ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) a1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.eq_minus_S_pred) (b0) ■) (a1) ■) ■)) ■) ■)) ■) ■) ■) (a) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Strue) (coq.nat.nat) ■) (b0) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) __ ■) ■) (app (p) __ ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) b0 ■) ■) x ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) x ■) coq.bool.true ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.bool.bool) ■) (coq.bool.true) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) coq.bool.true ■) coq.bool.true ■) ■) ■) ■) (app (app (coq.nat.leb) a ■) b0 ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_leb_true) (a) ■) (b0) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) ■) (app (p) b0 ■) ■) (Hcase) ■) ■) ■)) ■) (in-⇒ (λ Hcase : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) b0 ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) a ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) x ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) b0 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (Hind) (p) ■) (f) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) a ■) ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a ■) ■) (abs (λ __ : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) __ ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (abs (λ __ : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) __ ■) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (b0) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) x_1 ■) ■) coq.bool.false ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (p) b0 ■) ■) (Hcase) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.minus) b0 ■) a ■) ■) a ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.plus_minus_m_m) (b0) ■) (a) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) a ■) ■) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (abs (λ __ : El (coq.nat.nat), (app (app (coq.nat.le) __ ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) __ ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) __ ■) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.le) coq.nat.O ■) b0 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) coq.nat.O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (b0) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (app (coq.nat.S) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) ■) (app (app (coq.nat.minus) b0 ■) coq.nat.O ■) ■) (el-∀ (coq.nat.minus_n_O) (b0) ■) ■) ■) (app (app (coq.nat.minus) (app (coq.nat.S) b0 ■) ■) coq.nat.O ■) ■) (el-∀ (coq.nat.minus_n_O) (app (coq.nat.S) b0 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus) (app (coq.nat.S) b0 ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (coq.nat.le) (app (coq.nat.S) n ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) n ■) ■) ■) ■))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.minus_body) ■) (b0) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n : El (coq.nat.nat), (app (app (coq.nat.le) (app (coq.nat.S) n ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) n ■) ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) n ■) ■) ■) ■))) ■) (in-∀ (λ a1 : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_minus_body_S) (b0) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) (app (coq.nat.S) a1 ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) (app (coq.nat.S) a1 ■) ■) ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) a1 ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ q : El (coq.nat.nat), app (app (coq.nat.minus) b0 ■) q ■)) ■) (a1) ■) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.le) (app (coq.nat.S) a1 ■) ■) b0 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) y ■) (app (coq.nat.S) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) a1 ■) ■) ■) ■)) ■) (in-⇒ (λ lta1 : Prf (app (app (coq.nat.le) (app (coq.nat.S) a1 ■) ■) b0 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (coq.nat.pred) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) (app (coq.nat.S) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) x ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) ■) ■) (el-⇒ (el-∀ (coq.nat.S_pred) (app (app (coq.nat.minus) b0 ■) a1 ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_plus_to_minus_r) (coq.nat.O) ■) (a1) ■) (b0) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) a1 ■) ■) ■) b0 ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) a1 ■) ■) ■) b0 ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_plus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.nat.le) (app (coq.nat.S) (app (y) a1 ■) ■) ■) b0 ■)) ■) (lta1) ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.minus) b0 ■) (app (coq.nat.S) a1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.eq_minus_S_pred) (b0) ■) (a1) ■) ■)) ■) ■)) ■) ■) ■) (a) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (a) ■) (b0) ■) (Ha) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) b0 ■) ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (coq.nat.nat) ■) (b0) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) __ ■) ■) (app (p) __ ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) b0 ■) ■) x ■) ■) coq.bool.false ■)) ■) (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.bool.match_bool_prop) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) __ ■) coq.bool.false ■) ■) coq.bool.false ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.false ■) coq.bool.true ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) coq.bool.true ■) coq.bool.false ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.false ■) coq.bool.false ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) coq.bool.false ■) coq.bool.false ■) ■) ■) ■) (app (app (coq.nat.leb) a ■) b0 ■) ■) ■) (app (p) b0 ■) ■) (Hcase) ■) ■) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (p) b0 ■) ■) ■)) ■) (in-⇒ (λ Ha : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (coq.nat.S) b0 ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (a) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (app (coq.nat.minus) x_1 ■) a ■) ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) x_1 ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) x_1 ■) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) a ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) a ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (y) (abs (λ i : El (coq.nat.nat), app (p) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) (app (app (coq.nat.plus) i ■) a ■) ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) a ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) a ■) (abs (λ i : El (coq.nat.nat), coq.bool.false)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x_1 ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) a ■) (abs (λ i : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) i ■) ■) (app (p) i ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f) i ■)) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (same_bigop) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), coq.bool.false)) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (app (coq.nat.leb) a ■) __ ■) ■) (app (p) __ ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (f) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ ltia : Prf (app (app (coq.nat.lt) i ■) a ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.false ■) (app (app (coq.bool.andb) x ■) (app (p) i ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (app (p) i ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.false ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) ■) (app (app (coq.nat.leb) a ■) i ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_le_to_leb_false) (a) ■) (i) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_le) (i) ■) (a) ■) (ltia) ■) ■) ■))) ■) (in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ auto : Prf (app (app (coq.nat.lt) i ■) a ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (f) i ■) ■)))) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_false) (coq.nat.nat) ■) (a) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) ■) ■) ■) ■) (app (app (coq.nat.minus) a ■) a ■) ■) (el-∀ (coq.nat.minus_n_n) (a) ■) ■) ■) (app (coq.nat.S) b0 ■) ■) (Ha) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (a) ■) (app (coq.nat.S) b0 ■) ■) (lea) ■) ■)))))) ■) (b) ■));
constant symbol ACop : Els (∀ₖ (λ A, ↑ (A ⇝ prop)));
constant symbol mk_ACop : Prf (∀ₚ (λ A, ∀ (λ nil : El (A), ∀ (λ op : El ((A ⇝ A ⇝ A)), (∀ (λ a : El (A), app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (app (op) nil ■) a ■) ■) a ■)) ⇒ (∀ (λ a : El (A), app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (app (op) a ■) nil ■) ■) a ■)) ⇒ (∀ (λ a : El (A), ∀ (λ b : El (A), ∀ (λ c : El (A), app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (app (op) a ■) (app (app (op) b ■) c ■) ■) ■) (app (app (op) (app (app (op) a ■) b ■) ■) c ■) ■)))) ⇒ (∀ (λ a : El (A), ∀ (λ b : El (A), app (app (el-∀ₖ (coq.logic.eq) (A) ■) (app (app (op) a ■) b ■) ■) (app (app (op) b ■) a ■) ■))) ⇒ app (el-∀ₖ (ACop) (A) ■) nil ■))));
symbol timesAC : Prf (app (el-∀ₖ (ACop) (coq.nat.nat) ■) (app (coq.nat.S) coq.nat.O ■) ■) ≔ el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (mk_ACop) (coq.nat.nat) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (in-∀ (λ a : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (app (coq.nat.S) coq.nat.O ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) a ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) a ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times_body_S) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (y) a ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.plus) a ■) (app (y) a ■) ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.plus) a ■) (app (y) a ■) ■) ■) a ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_times_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.plus) a ■) (app (y) a ■) ■) ■) a ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (a) ■) (app (app (coq.nat.plus) a ■) coq.nat.O ■) ■) (el-∀ (coq.nat.plus_n_O) (a) ■) ■) ■) ■) ■) ■) ■) ■)) ■) (in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (n) ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (el-∀ (coq.nat.times_n_1) (n) ■) ■)) ■) (in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-∀ (λ c : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.nat.times) a ■) b ■) ■) c ■) ■) (app (app (coq.nat.times) a ■) (app (app (coq.nat.times) b ■) c ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.associative_times) (a) ■) (b) ■) (c) ■) ■)))) ■) (coq.nat.commutative_times) ■;
symbol bigop_diff : Prf (∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ i : El (coq.nat.nat), ∀ (λ n : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■))))) ≔ in-∀ (λ p : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ n : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) _x_365 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) _x_365 ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) _x_365 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■)) ■) (in-⇒ (λ ltO : Prf (app (app (coq.nat.lt) i ■) coq.nat.O ■), el-⇒ (el-∀ (coq.connectives.falsity) ((app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) coq.nat.O ■) ■) (ltO) ■) (el-∀ (coq.nat.not_le_Sn_O) (i) ■) ■) ■)) ■) (in-∀ (λ n0 : El (coq.nat.nat),  in-⇒ (λ Hind : Prf ((app (app (coq.nat.lt) i ■) n0 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■), in-⇒ (λ lein : Prf (app (app (coq.nat.lt) i ■) (app (coq.nat.S) n0 ■) ■), in-⇒ (λ pi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) i ■) n0 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) n0 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■) ■) (in-⇒ (λ Hi : Prf (app (app (coq.nat.lt) i ■) n0 ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■) ■) (in-⇒ (λ pn : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ x0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x0 ■) ■) ■) (app (p) x0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x0 : El (coq.nat.nat), app (f) x0 ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■) (app (p) i0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.nat.times) (app (f) i ■) ■) (app (f) n0 ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (f) i ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) (app (app (coq.nat.times) x ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) x_1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) x ■) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (el-⇒ (el-⇒ (Hind) (Hi) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p) i ■) ■) (pi) ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (f) i ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) (el-∀ (el-∀ (el-∀ (assoc) (app (f) n0 ■) ■) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (f) n0 ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (f) i ■) ■) (app (f) n0 ■) ■) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (coq.nat.times) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (assoc) (app (f) i ■) ■) (app (f) n0 ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■) (app (p) i0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Strue) (coq.nat.nat) ■) (n0) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) __ ■) ■) ■) (app (p) __ ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) __ ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) coq.bool.true ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (app (p) n0 ■) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) coq.bool.true ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (app (p) n0 ■) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) __ ■) ■) (app (p) n0 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) x ■) ■) (app (p) n0 ■) ■) ■) (app (p) n0 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) y ■) ■) (app (p) n0 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.bool.bool) ■) (app (p) n0 ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) coq.bool.true ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) y ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) coq.bool.false ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) coq.bool.false ■) ■) (app (p) n0 ■) ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) i ■) n0 ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_eq_to_eqb_false) (i) ■) (n0) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_eq) (i) ■) (n0) ■) (Hi) ■) ■) ■) ■) (coq.bool.true) ■) (pn) ■) ■) (coq.bool.true) ■) (pn) ■) ■) ■) (app (p) n0 ■) ■) (pn) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Strue) (coq.nat.nat) ■) (n0) ■) (p) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p) n0 ■) ■) (pn) ■) ■) ■)) ■) (in-⇒ (λ pn : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ x0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x0 ■) ■) ■) (app (p) x0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x0 : El (coq.nat.nat), app (f) x0 ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■) (app (p) i0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■) (app (p) i0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n0 ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (el-⇒ (el-⇒ (Hind) (Hi) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p) i ■) ■) (pi) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■) (app (p) i0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (coq.nat.nat) ■) (n0) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) __ ■) ■) ■) (app (p) __ ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) __ ■) ■) coq.bool.false ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) coq.bool.false ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (app (p) n0 ■) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) coq.bool.false ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (app (p) n0 ■) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) n0 ■) ■) ■) __ ■) ■) (app (p) n0 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) x ■) ■) (app (p) n0 ■) ■) ■) (app (p) n0 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) y ■) ■) (app (p) n0 ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.bool.bool) ■) (app (p) n0 ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) coq.bool.true ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) coq.bool.true ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) y ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) n0 ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) coq.bool.false ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) coq.bool.false ■) ■) (app (p) n0 ■) ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) i ■) n0 ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_eq_to_eqb_false) (i) ■) (n0) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_eq) (i) ■) (n0) ■) (Hi) ■) ■) ■) ■) (coq.bool.false) ■) (pn) ■) ■) (coq.bool.false) ■) (pn) ■) ■) ■) (app (p) n0 ■) ■) (pn) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n0 ■) ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (coq.nat.nat) ■) (n0) ■) (p) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (p) n0 ■) ■) (pn) ■) ■) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (p) n0 ■) ■) ■)) ■) (in-⇒ (λ Hi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) n0 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (i) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) x_1 ■) ■) (abs (λ x : El (coq.nat.nat), app (p) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) x_1 ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) i ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.nat.times) (app (f) i ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) i ■) ■) (abs (λ x0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x0 ■) ■) ■) (app (p) x0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x0 : El (coq.nat.nat), app (f) x0 ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (coq.nat.nat) ■) (coq.nat.nat) ■) (app (coq.nat.times) (app (f) i ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) i ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) i ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) x ■) ■) ■) (app (p) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f) x ■)) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) i ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■) (app (p) i0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) i ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) x ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (same_bigop) (coq.nat.nat) ■) (i) ■) (p) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) __ ■) ■) ■) (app (p) __ ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (f) ■) (in-∀ (λ k : El (coq.nat.nat),  in-⇒ (λ ltki : Prf (app (app (coq.nat.lt) k ■) i ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) x ■) ■) (app (p) k ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) k ■) ■) coq.bool.false ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.bool.bool) ■) (app (p) k ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) k ■) ■) y ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (p) k ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) i ■) k ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_eq_to_eqb_false) (i) ■) (k) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) k ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) i ■) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) k ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (coq.nat.S) k ■) ■) i ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) i ■) ■) (ltki) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) __ ■) ■) i ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) i ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) i ■) ■) ■) (k) ■) (auto) ■) ■)) ■) (el-∀ (coq.nat.not_le_Sn_n) (i) ■) ■) ■) ■))) ■) (in-∀ (λ i0 : El (coq.nat.nat),  in-⇒ (λ auto : Prf (app (app (coq.nat.lt) i0 ■) i ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p) i0 ■) ■) coq.bool.true ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (f) i0 ■) ■)))) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) i ■) ■) (abs (λ i0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) i0 ■) ■) ■) (app (p) i0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) i ■) __ ■) ■) ■) (app (p) __ ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) x ■) ■) (app (p) i ■) ■) ■) coq.bool.false ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_false) (coq.bool.bool) ■) (app (p) i ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) coq.bool.true ■) ■) ■) y ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.eq_match_bool_type_true) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.false ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■) coq.bool.true ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p) i ■) ■) coq.bool.false ■) y ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) coq.bool.true ■) ■) (app (p) i ■) ■) ■) ■) ■) ■) (app (app (coq.nat.eqb) i ■) i ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eq_to_eqb_true) (i) ■) (i) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) ■) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) i ■) ■) (abs (λ i0 : El (coq.nat.nat), app (p) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Strue) (coq.nat.nat) ■) (i) ■) (p) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p) i ■) ■) (pi) ■) ■) ■) ■) (n0) ■) (Hi) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (i) ■) (n0) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (i) ■) (n0) ■) (lein) ■) ■) ■))))) ■) (n) ■))));
symbol sub_hk : Els (↑ ((coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.bool.bool) ⇝ (coq.nat.nat ⇝ coq.bool.bool) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ prop)) ≔ abs (λ h : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ n1 : El (coq.nat.nat), abs (λ n2 : El (coq.nat.nat), abs (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ f1 : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ f2 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) (app (h) i ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i ■) ■) ■) i ■) ■)))))))));
symbol iso : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.bool.bool) ⇝ (coq.nat.nat ⇝ coq.bool.bool) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ prop)) ≔ abs (λ n1 : El (coq.nat.nat), abs (λ n2 : El (coq.nat.nat), abs (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), abs (λ f1 : El ((coq.nat.nat ⇝ coq.nat.nat)), abs (λ f2 : El ((coq.nat.nat ⇝ coq.nat.nat)), app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ h : El ((coq.nat.nat ⇝ coq.nat.nat)), app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■)) ■)) ■))))));
symbol sub_hkO : Prf (∀ (λ h : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n1 : El (coq.nat.nat), ∀ (λ n2 : El (coq.nat.nat), ∀ (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f1 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ f2 : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n1 ■) coq.nat.O ■) ⇒ app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■))))))))) ≔ in-∀ (λ h : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ k : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n1 : El (coq.nat.nat),  in-∀ (λ n2 : El (coq.nat.nat),  in-∀ (λ p1 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ p2 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f1 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ f2 : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ up0 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n1 ■) coq.nat.O ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i ■) n1 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) (app (h) i ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i ■) ■) ■) i ■) ■)) ■) (el-⇒ (el-∀ (coq.connectives.falsity) ((app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) (app (h) i ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i ■) ■) ■) i ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) coq.nat.O ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) n1 ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) coq.nat.O ■) ■) (lti) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) coq.nat.O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) i ■) ■) coq.nat.O ■) ■) ■) (n1) ■) (up0) ■) ■) ■) (el-∀ (coq.nat.not_le_Sn_O) (i) ■) ■) ■) ■) (n1) ■) (up0) ■)))))))))));
symbol sub0_to_false : Prf (∀ (λ h : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n1 : El (coq.nat.nat), ∀ (λ n2 : El (coq.nat.nat), ∀ (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f1 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ f2 : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n1 ■) coq.nat.O ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ⇒ ∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n2 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.false ■)))))))))) ≔ in-∀ (λ h : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ k : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n1 : El (coq.nat.nat),  in-∀ (λ n2 : El (coq.nat.nat),  in-∀ (λ p1 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ p2 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f1 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ f2 : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ up0 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n1 ■) coq.nat.O ■), in-⇒ (λ sub : Prf (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i ■) n2 ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.false ■) ■) (in-⇒ (λ ptrue : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i ■) ■) n1 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (h) i ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i ■) ■) ■) i ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.false ■) ■) (in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i ■) ■) n1 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (h) i ■) ■) ■) coq.bool.true ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (h) i ■) ■) n1 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (h) i ■) ■) ■) coq.bool.true ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i ■) ■) ■) i ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.false ■) ■) (in-⇒ (λ hi : Prf (app (app (coq.nat.lt) (app (h) i ■) ■) n1 ■), el-⇒ (el-∀ (coq.connectives.falsity) ((app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (h) i ■) ■) ■) coq.bool.true ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i ■) ■) ■) i ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.false ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) (app (coq.nat.S) (app (h) i ■) ■) ■) coq.nat.O ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (coq.nat.S) (app (h) i ■) ■) ■) n1 ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) (app (h) i ■) ■) ■) coq.nat.O ■) ■) (hi) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) (app (h) i ■) ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) (app (h) i ■) ■) ■) coq.nat.O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) (app (h) i ■) ■) ■) coq.nat.O ■) ■) ■) (n1) ■) (up0) ■) ■) ■) (el-∀ (coq.nat.not_le_Sn_O) (app (h) i ■) ■) ■) ■)) ■) (_clearme) ■)) ■) (el-⇒ (el-⇒ (el-∀ (sub) (i) ■) (lti) ■) (ptrue) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) i ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (p2) i ■) ■) (auto) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (p2) i ■) ■) ■))))))))))));
symbol sub_lt : Prf (∀ (λ e : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ p : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (app (app (app (app (app (app (sub_hk) (abs (λ x : El (coq.nat.nat), x)) ■) (abs (λ x : El (coq.nat.nat), x)) ■) n ■) m ■) p ■) p ■) e ■) e ■))))) ≔ in-∀ (λ e : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ f : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ lenm : Prf (app (app (coq.nat.le) n ■) m ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i ■) n ■), in-⇒ (λ fi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (f) i ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (app (app (coq.nat.lt) i ■) m ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (f) i ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i ■) i ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.lt) i ■) m ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (f) i ■) ■) coq.bool.true ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_to_le_to_lt) (i) ■) (n) ■) (m) ■) (lti) ■) (lenm) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (f) i ■) ■) (fi) ■) ■) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■))))))));
symbol transitive_sub : Prf (∀ (λ h1 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ k1 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ h2 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ k2 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ n1 : El (coq.nat.nat), ∀ (λ n2 : El (coq.nat.nat), ∀ (λ n3 : El (coq.nat.nat), ∀ (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ p3 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f1 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ f2 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ f3 : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (app (app (app (app (app (app (sub_hk) h1 ■) k1 ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h2 ■) k2 ■) n2 ■) n3 ■) p2 ■) p3 ■) f2 ■) f3 ■) ⇒ app (app (app (app (app (app (app (app (sub_hk) (abs (λ x : El (coq.nat.nat), app (h2) (app (h1) x ■) ■)) ■) (abs (λ x : El (coq.nat.nat), app (k1) (app (k2) x ■) ■)) ■) n1 ■) n3 ■) p1 ■) p3 ■) f1 ■) f3 ■)))))))))))))) ≔ in-∀ (λ h1 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ k1 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ h2 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ k2 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ n1 : El (coq.nat.nat),  in-∀ (λ n2 : El (coq.nat.nat),  in-∀ (λ n3 : El (coq.nat.nat),  in-∀ (λ p1 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ p2 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ p3 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f1 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ f2 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ f3 : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ sub1 : Prf (app (app (app (app (app (app (app (app (sub_hk) h1 ■) k1 ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■), in-⇒ (λ sub2 : Prf (app (app (app (app (app (app (app (app (sub_hk) h2 ■) k2 ■) n2 ■) n3 ■) p2 ■) p3 ■) f2 ■) f3 ■), in-∀ (λ i : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i ■) n1 ■), in-⇒ (λ fi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h1) i ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) (app (h1) i ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (h1) i ■) ■) ■) i ■) ■) (app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) ■) i ■) ■) ■) (in-⇒ (λ _clearme : Prf (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h1) i ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) (app (h1) i ■) ■) ■) coq.bool.true ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (h1) i ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) (app (h1) i ■) ■) ■) coq.bool.true ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (h1) i ■) ■) ■) i ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) ■) i ■) ■) ■) (in-⇒ (λ lth1i : Prf (app (app (coq.nat.lt) (app (h1) i ■) ■) n2 ■), in-⇒ (λ fh1i : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p2) (app (h1) i ■) ■) ■) coq.bool.true ■), in-⇒ (λ ei : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (h1) i ■) ■) ■) i ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) (app (h1) i ■) ■) ■) (app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) ■) i ■) ■) ■) (in-⇒ (λ _clearme0 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) (app (h1) i ■) ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) ■) i ■) ■) ■) (in-⇒ (λ H1 : Prf (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■), in-⇒ (λ H2 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■), in-⇒ (λ H3 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) (app (h1) i ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) ■) i ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.lt) (app (h2) (app (h1) i ■) ■) ■) n3 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) coq.bool.true ■) ■) (H1) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p3) (app (h2) (app (h1) i ■) ■) ■) ■) (H2) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (h1) i ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k1) __ ■) ■) i ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) i ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i) ■) ■) (app (k1) (app (h1) i ■) ■) ■) (ei) ■) ■) (app (k2) (app (h2) (app (h1) i ■) ■) ■) ■) (H3) ■) ■)))) ■) (_clearme0) ■)) ■) (el-⇒ (el-⇒ (el-∀ (sub2) (app (h1) i ■) ■) (lth1i) ■) (fh1i) ■) ■)))) ■) (_clearme) ■)) ■) (el-⇒ (el-⇒ (el-∀ (sub1) (i) ■) (lti) ■) (fi) ■) ■))))))))))))))))));
symbol let_clause_10471 : Prf (∀ (λ n1 : El (coq.nat.nat), ∀ (λ n2 : El (coq.nat.nat), ∀ (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f1 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ f2 : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (app (app (app (app (iso) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ⇒ ∀ (λ h : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■)) ■) ⇒ ∀ (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■) ⇒ (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ⇒ (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ⇒ ∀ (λ i : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (∀ (λ f : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) m ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) m ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) m ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■)) ⇒ ∀ (λ p20 : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) (app (coq.nat.S) m ■) ■) p1 ■) p20 ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) (app (coq.nat.S) m ■) ■) coq.nat.O ■) p20 ■) p1 ■) f2 ■) f1 ■) ⇒ ∀ (λ x2571 : El (coq.nat.nat), ∀ (λ x2572 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x2571 ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) x2572 ■) (app (app (coq.div_mod.div) x2571 ■) x2572 ■) ■) ■) (app (app (coq.div_mod.mod) x2571 ■) x2572 ■) ■) ■)))))))))))))) ≔ in-∀ (λ n1 : El (coq.nat.nat),  in-∀ (λ n2 : El (coq.nat.nat),  in-∀ (λ p1 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ p2 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f1 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ f2 : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (app (app (app (app (iso) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■), in-∀ (λ h : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ _clearme0 : Prf (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■)) ■), in-∀ (λ k : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ _clearme1 : Prf (app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■), in-⇒ (λ _clearme2 : Prf (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■), in-⇒ (λ same : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)), in-∀ (λ i : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ Hind : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) m ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) m ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) m ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■)), in-∀ (λ p20 : El (coq.nat.nat ⇝ coq.bool.bool),  in-⇒ (λ __ : Prf (app (app (coq.nat.le) coq.nat.O ■) n1 ■), in-⇒ (λ sub1 : Prf (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) (app (coq.nat.S) m ■) ■) p1 ■) p20 ■) f1 ■) f2 ■), in-⇒ (λ sub2 : Prf (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) (app (coq.nat.S) m ■) ■) coq.nat.O ■) p20 ■) p1 ■) f2 ■) f1 ■), in-∀ (λ x2571 : El (coq.nat.nat),  in-∀ (λ x2572 : El (coq.nat.nat),  el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) x2571 ■) x2572 ■) ■) x2572 ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x2571 ■) (app (app (coq.nat.plus) __1 ■) (app (app (coq.div_mod.mod) x2571 ■) x2572 ■) ■) ■)) ■) (el-∀ (el-∀ (coq.div_mod.div_mod) (x2571) ■) (x2572) ■) ■) (app (app (coq.nat.times) x2572 ■) (app (app (coq.div_mod.div) x2571 ■) x2572 ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (coq.div_mod.div) x2571 ■) x2572 ■) ■) (x2572) ■) ■))))))))))))))))))))));
symbol bigop_iso : Prf (∀ (λ n1 : El (coq.nat.nat), ∀ (λ n2 : El (coq.nat.nat), ∀ (λ p1 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ p2 : El ((coq.nat.nat ⇝ coq.bool.bool)), ∀ (λ f1 : El ((coq.nat.nat ⇝ coq.nat.nat)), ∀ (λ f2 : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (app (app (app (app (iso) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f1) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f2) i ■)) ■) ■))))))) ≔ in-∀ (λ n1 : El (coq.nat.nat),  in-∀ (λ n2 : El (coq.nat.nat),  in-∀ (λ p1 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ p2 : El (coq.nat.nat ⇝ coq.bool.bool),  in-∀ (λ f1 : El (coq.nat.nat ⇝ coq.nat.nat),  in-∀ (λ f2 : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (app (app (app (app (iso) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ h : El ((coq.nat.nat ⇝ coq.nat.nat)), app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■)) ■)) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f1) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f2) i ■)) ■) ■) ■) (in-∀ (λ h : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ _clearme0 : Prf (app (el-∀ₖ (coq.connectives.ex) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■)) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.match_ex_prop) (coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ k : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■)) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f1) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f2) i ■)) ■) ■) ■) (in-∀ (λ k : El (coq.nat.nat ⇝ coq.nat.nat),  in-⇒ (λ _clearme1 : Prf (app (app (coq.connectives.And) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ■) (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f1) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f2) i ■)) ■) ■) ■) (in-⇒ (λ _clearme2 : Prf (app (app (coq.connectives.And) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)) ■) (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n1 ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ■) ((app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n1 ■) p2 ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n1 ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f1) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f2) i ■)) ■) ■) ■) (in-⇒ (λ same : Prf (∀ (λ i : El (coq.nat.nat), (app (app (coq.nat.lt) i ■) n1 ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i ■) ■) coq.bool.true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (f1) i ■) ■) (app (f2) (app (h) i ■) ■) ■)), el-⇒ (el-∀ (el-∀ (coq.nat.le_gen) (abs (λ __ : El (coq.nat.nat), (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) __ ■) n2 ■) p1 ■) p2 ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) __ ■) p2 ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) __ ■) (abs (λ i : El (coq.nat.nat), app (p1) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f1) i ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i : El (coq.nat.nat), app (p2) i ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i : El (coq.nat.nat), app (f2) i ■)) ■) ■)) ■) (n1) ■) (in-∀ (λ i : El (coq.nat.nat),  el-∀ (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), ∀ (λ f : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (coq.nat.le) _x_365 ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) _x_365 ■) n2 ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) _x_365 ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) _x_365 ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■))) ■) (el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), ∀ (λ f : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) _x_365 ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) _x_365 ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) _x_365 ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■))) ■) (in-∀ (λ f : El (coq.nat.nat ⇝ coq.bool.bool),  el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) coq.nat.O ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) coq.nat.O ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ iO : El (coq.nat.nat), app (p1) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f1) iO ■)) ■) ■) (app (app (app (app (y) (abs (λ iO : El (coq.nat.nat), app (f) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f2) iO ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (sym_eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) coq.nat.O ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) coq.nat.O ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ iO : El (coq.nat.nat), app (p1) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f1) iO ■)) ■) ■) (app (app (app (app (y) (abs (λ iO : El (coq.nat.nat), app (f) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f2) iO ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_body_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) coq.nat.O ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) coq.nat.O ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ iO : El (coq.nat.nat), app (p1) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f1) iO ■)) ■) ■) (app (app (app (app (y) (abs (λ iO : El (coq.nat.nat), app (p1) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f1) iO ■)) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ₚ (eq_bigop_O) (coq.nat.nat) ■) (abs (λ y : El (((coq.nat.nat ⇝ coq.bool.bool) ⇝ coq.nat.nat ⇝ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ⇝ (coq.nat.nat ⇝ coq.nat.nat) ⇝ coq.nat.nat)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) coq.nat.O ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) coq.nat.O ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ iO : El (coq.nat.nat), app (p1) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f1) iO ■)) ■) ■) (app (app (app (app (y) (abs (λ iO : El (coq.nat.nat), app (p1) iO ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ iO : El (coq.nat.nat), app (f1) iO ■)) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.le) coq.nat.O ■) n1 ■), in-⇒ (λ auto' : Prf (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) coq.nat.O ■) p1 ■) f ■) f1 ■) f2 ■), in-⇒ (λ auto'' : Prf (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) coq.nat.O ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■)))) ■) ■) ■) ■)) ■) (in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ Hind : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (coq.nat.le) coq.nat.O ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) m ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) m ■) coq.nat.O ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) m ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■)), in-∀ (λ p20 : El (coq.nat.nat ⇝ coq.bool.bool),  in-⇒ (λ __ : Prf (app (app (coq.nat.le) coq.nat.O ■) n1 ■), in-⇒ (λ sub1 : Prf (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) coq.nat.O ■) (app (coq.nat.S) m ■) ■) p1 ■) p20 ■) f1 ■) f2 ■), in-⇒ (λ sub2 : Prf (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) (app (coq.nat.S) m ■) ■) coq.nat.O ■) p20 ■) p1 ■) f2 ■) f1 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) m ■) (abs (λ i0 : El (coq.nat.nat), app (p20) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) x ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (Hind) (p20) ■) (el-∀ (coq.nat.le_O_n) (n1) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (sub_hkO) (h) ■) (k) ■) (coq.nat.O) ■) (m) ■) (p1) ■) (p20) ■) (f1) ■) (f2) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (coq.nat.O) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (transitive_sub) (abs (λ x : El (coq.nat.nat), x)) ■) (abs (λ x : El (coq.nat.nat), x)) ■) (k) ■) (h) ■) (m) ■) (app (coq.nat.S) m ■) ■) (coq.nat.O) ■) (p20) ■) (p20) ■) (p1) ■) (f2) ■) (f2) ■) (f1) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (sub_lt) (f2) ■) (p20) ■) (m) ■) (app (coq.nat.S) m ■) ■) (el-∀ (coq.nat.le_n_Sn) (m) ■) ■) ■) (sub2) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (abs (λ i0 : El (coq.nat.nat), app (p20) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (coq.nat.nat) ■) (m) ■) (p20) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f2) ■) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (sub0_to_false) (k) ■) (h) ■) (coq.nat.O) ■) (app (coq.nat.S) m ■) ■) (p1) ■) (p20) ■) (f1) ■) (f2) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (coq.nat.O) ■) ■) (sub2) ■) (m) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.lt) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (app (app (coq.nat.lt) m ■) (app (coq.nat.S) m ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.lt_plus_Sn_r) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) (coq.nat.O) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (app (app (coq.nat.plus) __1 ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (app (app (coq.nat.lt) m ■) (app (coq.nat.S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) __1 ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (app (app (coq.nat.lt) m ■) (app (coq.nat.S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (coq.nat.S) m ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) m ■) __1 ■) ■) (app (app (coq.nat.lt) m ■) (app (coq.nat.S) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.lt) m ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) m ■) coq.nat.O ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) __1 ■) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) coq.nat.O ■) ■) ■)) ■) (el-∀ (el-∀ (coq.nat.plus_n_Sm) (m) ■) (coq.nat.O) ■) ■) (m) ■) (el-∀ (coq.nat.plus_n_O) (m) ■) ■) ■) ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) __1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) coq.nat.O ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) __1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) __1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) __1 ■)) ■) (el-∀ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (let_clause_10471) (n1) ■) (n2) ■) (p1) ■) (p2) ■) (f1) ■) (f2) ■) (_clearme) ■) (h) ■) (_clearme0) ■) (k) ■) (_clearme1) ■) (_clearme2) ■) (same) ■) (i) ■) (m) ■) (Hind) ■) (p20) ■) (__) ■) (sub1) ■) (sub2) ■) (m) ■) (coq.nat.O) ■) ■) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) ■) ■) (coq.nat.O) ■) (el-∀ (coq.nat.times_O_n) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (coq.nat.O) ■) ■) ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (el-∀ (coq.nat.plus_O_n) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) __1 ■)) ■) (el-∀ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (let_clause_10471) (n1) ■) (n2) ■) (p1) ■) (p2) ■) (f1) ■) (f2) ■) (_clearme) ■) (h) ■) (_clearme0) ■) (k) ■) (_clearme1) ■) (_clearme2) ■) (same) ■) (i) ■) (m) ■) (Hind) ■) (p20) ■) (__) ■) (sub1) ■) (sub2) ■) (m) ■) (coq.nat.O) ■) ■) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) coq.nat.O ■) (app (app (coq.div_mod.div) m ■) coq.nat.O ■) ■) ■) (app (app (coq.div_mod.mod) m ■) coq.nat.O ■) ■) ■) ■) ■) ■) ■) ■))))))) ■) (n2) ■) ■) (in-∀ (λ n : El (coq.nat.nat),  in-⇒ (λ Hind : Prf (∀ (λ f : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (coq.nat.le) n ■) n1 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) n ■) n2 ■) p1 ■) f ■) f1 ■) f2 ■) ⇒ (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) n ■) f ■) p1 ■) f2 ■) f1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i0 : El (coq.nat.nat), app (f) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■)), in-∀ (λ p20 : El (coq.nat.nat ⇝ coq.bool.bool),  in-⇒ (λ ltn : Prf (app (app (coq.nat.le) (app (coq.nat.S) n ■) ■) n1 ■), in-⇒ (λ sub1 : Prf (app (app (app (app (app (app (app (app (sub_hk) h ■) k ■) (app (coq.nat.S) n ■) ■) n2 ■) p1 ■) p20 ■) f1 ■) f2 ■), in-⇒ (λ sub2 : Prf (app (app (app (app (app (app (app (app (sub_hk) k ■) h ■) n2 ■) (app (coq.nat.S) n ■) ■) p20 ■) p1 ■) f2 ■) f1 ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i0 : El (coq.nat.nat), app (p20) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■) ■) (in-⇒ (λ p1n : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f1) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i0 : El (coq.nat.nat), app (p20) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) n ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) n ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) n ■) ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f1) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i0 : El (coq.nat.nat), app (p20) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■) ■) (in-⇒ (λ _clearme3 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) n ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) n ■) ■) ■) coq.bool.true ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (h) n ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) n ■) ■) ■) coq.bool.true ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) n ■) ■) ■) n ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f1) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i0 : El (coq.nat.nat), app (p20) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■) ■) (in-⇒ (λ hn : Prf (app (app (coq.nat.lt) (app (h) n ■) ■) n2 ■), in-⇒ (λ p2hn : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) n ■) ■) ■) coq.bool.true ■), in-⇒ (λ eqn : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) n ■) ■) ■) n ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f2) (app (h) n ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) x ■) ■) ■) (app (p20) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f2) x ■)) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (f1) n ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (f2) (app (h) n ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) x ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) ■) (app (app (coq.nat.times) (app (f2) (app (h) n ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ x0 : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) x0 ■) ■) ■) (app (p20) x0 ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x0 : El (coq.nat.nat), app (f2) x0 ■)) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (el-∀ₚ (coq.logic.eq_f) (coq.nat.nat) ■) (coq.nat.nat) ■) (app (coq.nat.times) (app (f2) (app (h) n ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ x : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) x ■) ■) ■) (app (p20) x ■) ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f2) x ■)) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (Hind) (abs (λ __ : El (coq.nat.nat), app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) __ ■) ■) ■) (app (p20) __ ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_le) (n) ■) (n1) ■) (ltn) ■) ■) (in-∀ (λ i0 : El (coq.nat.nat),  in-⇒ (λ ltin : Prf (app (app (coq.nat.lt) i0 ■) n ■), in-⇒ (λ p1i : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) i0 ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) i0 ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i0 ■) ■) ■) i0 ■) ■) (app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) (app (h) i0 ■) ■) ■) ■) (app (p20) (app (h) i0 ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i0 ■) ■) ■) i0 ■) ■) ■) (in-⇒ (λ _clearme4 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) i0 ■) ■) ■) coq.bool.true ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) i0 ■) ■) ■) coq.bool.true ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i0 ■) ■) ■) i0 ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) (app (h) i0 ■) ■) ■) ■) (app (p20) (app (h) i0 ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i0 ■) ■) ■) i0 ■) ■) ■) (in-⇒ (λ h1i : Prf (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■), in-⇒ (λ p2h1i : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) (app (h) i0 ■) ■) ■) coq.bool.true ■), in-⇒ (λ eqi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i0 ■) ■) ■) i0 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) (app (h) i0 ■) ■) ■) ■) (app (p20) (app (h) i0 ■) ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) (app (h) i0 ■) ■) ■) i0 ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.lt) (app (h) i0 ■) ■) n2 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) (app (h) i0 ■) ■) ■) ■) (app (p20) (app (h) i0 ■) ■) ■) ■) coq.bool.true ■) ■) (h1i) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ x : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) x ■) ■) (app (p20) (app (h) i0 ■) ■) ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p20) (app (h) i0 ■) ■) ■) coq.bool.false ■) y ■) ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.bool.bool) ■) (app (p20) (app (h) i0 ■) ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) y ■) coq.bool.true ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p20) (app (h) i0 ■) ■) ■) (p2h1i) ■) ■) ■) ■) (app (app (coq.nat.eqb) (app (h) n ■) ■) (app (h) i0 ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_eq_to_eqb_false) (app (h) n ■) ■) (app (h) i0 ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) (app (h) i0 ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) i0 ■) n ■) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) (app (h) i0 ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (n) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) n ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■) ■) (i0) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (k) (app (h) n ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) n ■)) ■) (eqn) ■) (i0) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (h) i0 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) __ ■) ■) i0 ■)) ■) (eqi) ■) (app (h) n ■) ■) (auto) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_not_eq) (i0) ■) (n) ■) (ltin) ■) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i0) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) i0 ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i0) ■) ■) (app (k) (app (h) i0 ■) ■) ■) (eqi) ■) ■)))) ■) (_clearme4) ■)) ■) (el-⇒ (el-⇒ (el-∀ (sub1) (i0) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S) (app (coq.nat.S) i0 ■) ■) (n) ■) (ltin) ■) ■) (p1i) ■) ■)))) ■) (in-∀ (λ j : El (coq.nat.nat),  in-⇒ (λ ltj : Prf (app (app (coq.nat.lt) j ■) n2 ■), in-⇒ (λ p2j : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) j ■) ■) ■) (app (p20) j ■) ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) j ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) j ■) ■) ■) j ■) ■) (app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) j ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) j ■) ■) ■) j ■) ■) ■) (in-⇒ (λ _clearme4 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) j ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (k) j ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) j ■) ■) ■) j ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) j ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) j ■) ■) ■) j ■) ■) ■) (in-⇒ (λ ltkj : Prf (app (app (coq.nat.lt) (app (k) j ■) ■) (app (coq.nat.S) n ■) ■), in-⇒ (λ p1kj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■), in-⇒ (λ eqj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) j ■) ■) ■) j ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) j ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) j ■) ■) ■) j ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.lt) (app (k) j ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) j ■) ■) ■) coq.bool.true ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) (app (k) j ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) j ■) ■) n ■) ■) (app (app (coq.nat.lt) (app (k) j ■) ■) n ■) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.lt) (app (k) j ■) ■) n ■), auto)) ■) (in-⇒ (λ eqkj : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) j ■) ■) n ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.lt) (app (k) j ■) ■) n ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.eqb_elim) (app (h) n ■) ■) (j) ■) (abs (λ __ : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.bool.andb) (app (coq.bool.notb) __ ■) ■) (app (p20) j ■) ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) j ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p20) j ■) ■) coq.bool.false ■) y ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (app (p20) j ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) j ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) y ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) j ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.false ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (coq.bool.false) ■) (auto') ■) ■) (coq.bool.not_eq_true_false) ■))) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.bool.bool) ■) (coq.bool.false) ■) (coq.bool.true) ■) (abs (λ y : El (coq.bool.bool), (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) j ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.bool.bool) ■) (app (p20) j ■) ■) coq.bool.false ■) y ■) ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.bool.bool) ■) (app (p20) j ■) ■) (coq.bool.false) ■) (abs (λ y : El (coq.bool.bool), (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) j ■) ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) y ■) coq.bool.true ■) ⇒ coq.connectives.False)) ■) (in-⇒ (λ auto : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) j ■) ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) j ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) n ■) ■) j ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (j) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) j ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (j) ■) ■) (app (h) n ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (k) j ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) __ ■) ■) j ■)) ■) (eqj) ■) (n) ■) (eqkj) ■) ■) ■) (auto) ■))) ■) ■) ■) (p2j) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (app (k) j ■) ■) (n) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (app (k) j ■) ■) (n) ■) (ltkj) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p1) (app (k) j ■) ■) ■) (p1kj) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (j) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) j ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (j) ■) ■) (app (h) (app (k) j ■) ■) ■) (eqj) ■) ■)))) ■) (_clearme4) ■)) ■) (el-⇒ (el-⇒ (el-∀ (sub2) (j) ■) (ltj) ■) (el-⇒ (el-∀ (el-∀ (coq.bool.andb_true_r) (app (coq.bool.notb) (app (app (coq.nat.eqb) (app (h) n ■) ■) j ■) ■) ■) (app (p20) j ■) ■) (p2j) ■) ■) ■)))) ■) ■) ■) (app (f1) n ■) ■) (el-⇒ (el-⇒ (el-∀ (same) (n) ■) (ltn) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p1) n ■) ■) (p1n) ■) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ x : El (coq.nat.nat), app (p20) x ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ x : El (coq.nat.nat), app (f2) x ■)) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (bigop_diff) (p20) ■) (f2) ■) (app (h) n ■) ■) (n2) ■) (hn) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p20) (app (h) n ■) ■) ■) (p2hn) ■) ■) ■)))) ■) (_clearme3) ■)) ■) (el-⇒ (el-⇒ (el-∀ (sub1) (n) ■) (el-∀ (coq.nat.le_n) (app (coq.nat.S) n ■) ■) ■) (p1n) ■) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Strue) (coq.nat.nat) ■) (n) ■) (p1) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f1) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p1) n ■) ■) (p1n) ■) ■) ■)) ■) (in-⇒ (λ p1n : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) n ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) n2 ■) (abs (λ i0 : El (coq.nat.nat), app (p20) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f2) i0 ■)) ■) ■)) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (Hind) (p20) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.lt_to_le) (n) ■) (n1) ■) (ltn) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (transitive_sub) (abs (λ x : El (coq.nat.nat), x)) ■) (abs (λ x : El (coq.nat.nat), x)) ■) (h) ■) (k) ■) (n) ■) (app (coq.nat.S) n ■) ■) (n2) ■) (p1) ■) (p1) ■) (p20) ■) (f1) ■) (f1) ■) (f2) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (sub_lt) (f1) ■) (p1) ■) (n) ■) (app (coq.nat.S) n ■) ■) (el-∀ (coq.nat.le_n_Sn) (n) ■) ■) ■) (sub1) ■) ■) (in-∀ (λ i0 : El (coq.nat.nat),  in-⇒ (λ lti : Prf (app (app (coq.nat.lt) i0 ■) n2 ■), in-⇒ (λ p2i : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p20) i0 ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) i0 ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) i0 ■) ■) ■) i0 ■) ■) (app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) i0 ■) ■) ■) i0 ■) ■) ■) (in-⇒ (λ _clearme3 : Prf (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) i0 ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (k) i0 ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) i0 ■) ■) ■) i0 ■) ⇒ app (app (coq.connectives.And) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) i0 ■) ■) ■) i0 ■) ■) ■) (in-⇒ (λ ltki : Prf (app (app (coq.nat.lt) (app (k) i0 ■) ■) (app (coq.nat.S) n ■) ■), in-⇒ (λ p1ki : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■), in-⇒ (λ eqi : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) i0 ■) ■) ■) i0 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (h) (app (k) i0 ■) ■) ■) i0 ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.connectives.conj) (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) (app (k) i0 ■) ■) ■) coq.bool.true ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) i0 ■) ■) n ■) ■) (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■), auto)) ■) (in-⇒ (λ eqki : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (k) i0 ■) ■) n ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.lt) (app (k) i0 ■) ■) n ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (coq.bool.false) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (app (p1) n ■) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (p1n) ■) (coq.bool.true) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (k) i0 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (p1) __ ■) ■) coq.bool.true ■)) ■) (p1ki) ■) (n) ■) (eqki) ■) ■) ■) ■) (coq.bool.not_eq_true_false) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (app (k) i0 ■) ■) (n) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S_to_le) (app (k) i0 ■) ■) (n) ■) (ltki) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (p1) (app (k) i0 ■) ■) ■) (p1ki) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (i0) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) i0 ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (i0) ■) ■) (app (h) (app (k) i0 ■) ■) ■) (eqi) ■) ■)))) ■) (_clearme3) ■)) ■) (el-⇒ (el-⇒ (el-∀ (sub2) (i0) ■) (lti) ■) (p2i) ■) ■)))) ■) ■) (app (app (app (app (app (el-∀ₖ (bigop) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ i0 : El (coq.nat.nat), app (p1) i0 ■)) ■) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.times ■) (abs (λ i0 : El (coq.nat.nat), app (f1) i0 ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (bigop_Sfalse) (coq.nat.nat) ■) (n) ■) (p1) ■) (app (coq.nat.S) coq.nat.O ■) ■) (coq.nat.times) ■) (f1) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (p1) n ■) ■) (p1n) ■) ■) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (p1) n ■) ■) ■))))))) ■) (i) ■) (p2) ■)) ■)) ■) (_clearme2) ■)) ■) (_clearme1) ■))) ■) (_clearme0) ■))) ■) (_clearme) ■)))))));
