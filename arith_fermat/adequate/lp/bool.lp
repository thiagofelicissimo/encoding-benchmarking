require open coq.sttfa;
require coq.connectives;
require coq.leibniz;
require coq.logic;
require coq.relations;
constant symbol bool : Type;
constant symbol true : Els (↑ (bool));
constant symbol false : Els (↑ (bool));
constant symbol match_bool_prop : Prf (∀ (λ return_ : El ((bool ⇝ prop)), (app (return_) true ■) ⇒ (app (return_) false ■) ⇒ ∀ (λ z : El (bool), app (return_) z ■)));
constant symbol match_bool_type : Els (∀ₖ (λ return_, ↑ (return_ ⇝ return_ ⇝ bool ⇝ return_)));
constant symbol axiom_match_bool_type_true : Prf (∀ₚ (λ return_, ∀ (λ case_true : El (return_), ∀ (λ case_false : El (return_), app (app (el-∀ₖ (coq.connectives.equal) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) true ■) ■) case_true ■))));
symbol eq_match_bool_type_true : Prf (∀ₚ (λ return_, ∀ (λ case_true : El (return_), ∀ (λ case_false : El (return_), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) true ■) ■) case_true ■)))) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) true ■) ■) (case_true) ■) (el-∀ (el-∀ (el-∀ₚ (axiom_match_bool_type_true) (return_) ■) (case_true) ■) (case_false) ■) ■)));
constant symbol axiom_match_bool_type_false : Prf (∀ₚ (λ return_, ∀ (λ case_true : El (return_), ∀ (λ case_false : El (return_), app (app (el-∀ₖ (coq.connectives.equal) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) false ■) ■) case_false ■))));
symbol eq_match_bool_type_false : Prf (∀ₚ (λ return_, ∀ (λ case_true : El (return_), ∀ (λ case_false : El (return_), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) false ■) ■) case_false ■)))) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) false ■) ■) (case_false) ■) (el-∀ (el-∀ (el-∀ₚ (axiom_match_bool_type_false) (return_) ■) (case_true) ■) (case_false) ■) ■)));
symbol sym_eq_match_bool_type_true : Prf (∀ₚ (λ return_, ∀ (λ case_true : El (return_), ∀ (λ case_false : El (return_), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_) ■) case_true ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) true ■) ■)))) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) true ■) ■) (case_true) ■) (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_true) (return_) ■) (case_true) ■) (case_false) ■) ■)));
symbol sym_eq_match_bool_type_false : Prf (∀ₚ (λ return_, ∀ (λ case_true : El (return_), ∀ (λ case_false : El (return_), app (app (el-∀ₖ (coq.leibniz.leibniz) (return_) ■) case_false ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) false ■) ■)))) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_) ■) (app (app (app (el-∀ₖ (match_bool_type) (return_) ■) case_true ■) case_false ■) false ■) ■) (case_false) ■) (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_false) (return_) ■) (case_true) ■) (case_false) ■) ■)));
symbol bool_discr : Prf (∀ (λ x : El (bool), ∀ (λ y : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) x ■) y ■) ⇒ app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) y ■) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) y ■) ■) x ■))) ≔ in-∀ (λ x : El (bool),  in-∀ (λ y : El (bool),  in-⇒ (λ Deq : Prf (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) x ■) y ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (bool) ■) (x) ■) (abs (λ x_13 : El (bool), app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) x_13 ■) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) x_13 ■) ■) x ■)) ■) (el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (abs (λ __ : El (bool), app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) __ ■) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) __ ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (prop) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) true ■) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) true ■) ■) (abs (λ x0 : El (prop), x0)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) (abs (λ x0 : El (prop), x0)) ■) (in-∀ (λ P : El (prop),  in-⇒ (λ DH : Prf (P), DH))) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (prop) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) false ■) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) false ■) ■) (abs (λ x0 : El (prop), x0)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (abs (λ x0 : El (prop), x0)) ■) (in-∀ (λ P : El (prop),  in-⇒ (λ DH : Prf (P), DH))) ■) ■) ■) (x) ■) ■) (y) ■) (Deq) ■)));
symbol not_eq_true_false : Prf (app (coq.connectives.Not) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) true ■) false ■) ■) ≔ el-⇒ (el-∀ (coq.connectives.nmk) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) true ■) false ■) ■) (in-⇒ (λ Heq : Prf (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) true ■) false ■), el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_false) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) (abs (λ x : El (prop), x)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_true) (prop) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) (∀ (λ P : El (prop), P)) ■) false ■) ■) (app (app (app (el-∀ₖ (match_bool_type) (prop) ■) (∀ (λ P : El (prop), P)) ■) (∀ (λ P : El (prop), P ⇒ P)) ■) false ■) ■) (abs (λ x : El (prop), x)) ■) (el-⇒ (el-∀ (el-∀ (bool_discr) (true) ■) (false) ■) (Heq) ■) ■) ■) (coq.connectives.False) ■)) ■;
symbol notb : Els (↑ (bool ⇝ bool)) ≔ abs (λ b : El (bool), app (app (app (el-∀ₖ (match_bool_type) (bool) ■) false ■) true ■) b ■);
symbol andb : Els (↑ (bool ⇝ bool ⇝ bool)) ≔ abs (λ b1 : El (bool), abs (λ b2 : El (bool), app (app (app (el-∀ₖ (match_bool_type) (bool) ■) b2 ■) false ■) b1 ■));
symbol andb_true_l : Prf (∀ (λ b1 : El (bool), ∀ (λ b2 : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) (app (app (andb) b1 ■) b2 ■) ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b1 ■) true ■))) ≔ in-∀ (λ b1 : El (bool),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (abs (λ __ : El (bool), ∀ (λ b2 : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) (app (app (andb) __ ■) b2 ■) ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) __ ■) true ■))) ■) (in-∀ (λ b2 : El (bool),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (bool) ■) (b2) ■) (false) ■) (abs (λ x : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) x ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) true ■) true ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (bool) ■) (b2) ■) (abs (λ __ : El (bool), app (app (el-∀ₖ (coq.logic.eq) (bool) ■) __ ■) true ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (bool) ■) (b2) ■) (abs (λ __ : El (bool), app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (bool) ■) (b2) ■) ■) (true) ■) (auto) ■) ■) (true) ■) (auto) ■)) ■)) ■) (in-∀ (λ _b2 : El (bool),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (bool) ■) (_b2) ■) (false) ■) (abs (λ x : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) x ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) false ■) true ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) false ■) true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (bool) ■) (true) ■) (abs (λ __ : El (bool), app (app (el-∀ₖ (coq.logic.eq) (bool) ■) __ ■) true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (bool) ■) (true) ■) ■) (false) ■) (auto) ■)) ■)) ■) (b1) ■);
symbol andb_true_r : Prf (∀ (λ b1 : El (bool), ∀ (λ b2 : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) (app (app (andb) b1 ■) b2 ■) ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) true ■))) ≔ in-∀ (λ b1 : El (bool),  in-∀ (λ b2 : El (bool),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (abs (λ __ : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) (app (app (andb) __ ■) b2 ■) ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) true ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (bool) ■) (b2) ■) (false) ■) (abs (λ x : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) x ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) true ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (bool) ■) (b2) ■) (abs (λ __ : El (bool), app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (bool) ■) (b2) ■) ■) (true) ■) (auto) ■)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (bool) ■) (b2) ■) (false) ■) (abs (λ x : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) x ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b2 ■) true ■)) ■) (el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (abs (λ __ : El (bool), (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) false ■) true ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (bool) ■) __ ■) true ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) false ■) true ■), el-∀ (el-∀ₚ (coq.logic.refl) (bool) ■) (true) ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) false ■) true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (bool) ■) (true) ■) (abs (λ __ : El (bool), app (app (el-∀ₖ (coq.logic.eq) (bool) ■) __ ■) true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (bool) ■) (true) ■) ■) (false) ■) (auto) ■)) ■) (b2) ■) ■) ■) (b1) ■));
symbol true_or_false : Prf (∀ (λ b : El (bool), app (app (coq.connectives.Or) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b ■) true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) b ■) false ■) ■)) ≔ in-∀ (λ b : El (bool),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (abs (λ __ : El (bool), app (app (coq.connectives.Or) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) __ ■) true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) __ ■) false ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) true ■) true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (bool) ■) true ■) false ■) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (bool) ■) (true) ■) ■) ■) (el-∀ (el-∀ (el-∀ₚ (coq.relations.RC_reflexive) (bool) ■) (abs (λ __ : El (bool), abs (λ _0 : El (bool), app (app (el-∀ₖ (coq.logic.eq) (bool) ■) false ■) true ■))) ■) (false) ■) ■) (b) ■);
