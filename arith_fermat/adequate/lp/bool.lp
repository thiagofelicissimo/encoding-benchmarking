require open coq.sttfa;
require coq.connectives;
require coq.leibniz;
require coq.logic;
require coq.relations;
constant symbol bool : Type;
constant symbol true : Els (↑ (bool));
constant symbol false : Els (↑ (bool));
constant symbol match_bool_prop : Prf (`∀ return_ : El ((bool ⇝ prop)), ((return_) ▪ true) ⇒ ((return_) ▪ false) ⇒ `∀ z : El (bool), (return_) ▪ z);
constant symbol match_bool_type : Els (∀ₖ (λ return_, ↑ (return_ ⇝ return_ ⇝ bool ⇝ return_)));
constant symbol axiom_match_bool_type_true : Prf (`∀ₚ return_, `∀ case_true : El (return_), `∀ case_false : El (return_), (((coq.connectives.equal) at (return_)) ▪ (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ true)) ▪ case_true);
symbol eq_match_bool_type_true : Prf (`∀ₚ return_, `∀ case_true : El (return_), `∀ case_false : El (return_), (((coq.leibniz.leibniz) at (return_)) ▪ (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ true)) ▪ case_true) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_)) (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ true)) (case_true)) (el-∀ (el-∀ (el-∀ₚ (axiom_match_bool_type_true) (return_)) (case_true)) (case_false)))));
constant symbol axiom_match_bool_type_false : Prf (`∀ₚ return_, `∀ case_true : El (return_), `∀ case_false : El (return_), (((coq.connectives.equal) at (return_)) ▪ (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ false)) ▪ case_false);
symbol eq_match_bool_type_false : Prf (`∀ₚ return_, `∀ case_true : El (return_), `∀ case_false : El (return_), (((coq.leibniz.leibniz) at (return_)) ▪ (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ false)) ▪ case_false) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (return_)) (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ false)) (case_false)) (el-∀ (el-∀ (el-∀ₚ (axiom_match_bool_type_false) (return_)) (case_true)) (case_false)))));
symbol sym_eq_match_bool_type_true : Prf (`∀ₚ return_, `∀ case_true : El (return_), `∀ case_false : El (return_), (((coq.leibniz.leibniz) at (return_)) ▪ case_true) ▪ (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ true)) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_)) (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ true)) (case_true)) (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_true) (return_)) (case_true)) (case_false)))));
symbol sym_eq_match_bool_type_false : Prf (`∀ₚ return_, `∀ case_true : El (return_), `∀ case_false : El (return_), (((coq.leibniz.leibniz) at (return_)) ▪ case_false) ▪ (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ false)) ≔ in-∀ₚ (λ return_, in-∀ (λ case_true : El (return_),  in-∀ (λ case_false : El (return_),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (return_)) (((((match_bool_type) at (return_)) ▪ case_true) ▪ case_false) ▪ false)) (case_false)) (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_false) (return_)) (case_true)) (case_false)))));
symbol bool_discr : Prf (`∀ x : El (bool), `∀ y : El (bool), ((((coq.logic.eq) at (bool)) ▪ x) ▪ y) ⇒ ((((match_bool_type) at (prop)) ▪ (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ (`∀ P : El (prop), P)) ▪ y)) ▪ (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ y)) ▪ x) ≔ in-∀ (λ x : El (bool),  in-∀ (λ y : El (bool),  in-⇒ (λ Deq : Prf ((((coq.logic.eq) at (bool)) ▪ x) ▪ y), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (bool)) (x)) (`λ' x_13 : El (bool), ((((match_bool_type) at (prop)) ▪ (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ (`∀ P : El (prop), P)) ▪ x_13)) ▪ (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ x_13)) ▪ x)) (el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (`λ' __ : El (bool), ((((match_bool_type) at (prop)) ▪ (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ (`∀ P : El (prop), P)) ▪ __)) ▪ (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ __)) ▪ __)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (prop)) (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ (`∀ P : El (prop), P)) ▪ true)) (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ true)) (`λ' x0 : El (prop), x0)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (prop)) (`∀ P : El (prop), P ⇒ P)) (`∀ P : El (prop), P)) (`λ' x0 : El (prop), x0)) (in-∀ (λ P : El (prop),  in-⇒ (λ DH : Prf (P), DH)))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (prop)) (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ (`∀ P : El (prop), P)) ▪ false)) (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ false)) (`λ' x0 : El (prop), x0)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (prop)) (`∀ P : El (prop), P)) (`∀ P : El (prop), P ⇒ P)) (`λ' x0 : El (prop), x0)) (in-∀ (λ P : El (prop),  in-⇒ (λ DH : Prf (P), DH)))))) (x))) (y)) (Deq))));
symbol not_eq_true_false : Prf ((coq.connectives.Not) ▪ ((((coq.logic.eq) at (bool)) ▪ true) ▪ false)) ≔ el-⇒ (el-∀ (coq.connectives.nmk) ((((coq.logic.eq) at (bool)) ▪ true) ▪ false)) (in-⇒ (λ Heq : Prf ((((coq.logic.eq) at (bool)) ▪ true) ▪ false), el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_false) (prop)) (`∀ P : El (prop), P ⇒ P)) (`∀ P : El (prop), P)) (`λ' x : El (prop), x)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (eq_match_bool_type_true) (prop)) (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ (`∀ P : El (prop), P)) ▪ false)) (((((match_bool_type) at (prop)) ▪ (`∀ P : El (prop), P)) ▪ (`∀ P : El (prop), P ⇒ P)) ▪ false)) (`λ' x : El (prop), x)) (el-⇒ (el-∀ (el-∀ (bool_discr) (true)) (false)) (Heq)))) (coq.connectives.False)));
symbol notb : Els (↑ (bool ⇝ bool)) ≔ `λ' b : El (bool), ((((match_bool_type) at (bool)) ▪ false) ▪ true) ▪ b;
symbol andb : Els (↑ (bool ⇝ bool ⇝ bool)) ≔ `λ' b1 : El (bool), `λ' b2 : El (bool), ((((match_bool_type) at (bool)) ▪ b2) ▪ false) ▪ b1;
symbol andb_true_l : Prf (`∀ b1 : El (bool), `∀ b2 : El (bool), ((((coq.logic.eq) at (bool)) ▪ (((andb) ▪ b1) ▪ b2)) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ b1) ▪ true) ≔ in-∀ (λ b1 : El (bool),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (`λ' __ : El (bool), `∀ b2 : El (bool), ((((coq.logic.eq) at (bool)) ▪ (((andb) ▪ __) ▪ b2)) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ __) ▪ true)) (in-∀ (λ b2 : El (bool),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (bool)) (b2)) (false)) (`λ' x : El (bool), ((((coq.logic.eq) at (bool)) ▪ x) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ true) ▪ true)) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (bool)) ▪ b2) ▪ true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (bool)) (b2)) (`λ' __ : El (bool), (((coq.logic.eq) at (bool)) ▪ __) ▪ true)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (bool)) (b2)) (`λ' __ : El (bool), (((coq.logic.eq) at (bool)) ▪ b2) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (bool)) (b2))) (true)) (auto))) (true)) (auto)))))) (in-∀ (λ _b2 : El (bool),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (bool)) (_b2)) (false)) (`λ' x : El (bool), ((((coq.logic.eq) at (bool)) ▪ x) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ false) ▪ true)) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (bool)) ▪ false) ▪ true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (bool)) (true)) (`λ' __ : El (bool), (((coq.logic.eq) at (bool)) ▪ __) ▪ true)) (el-∀ (el-∀ₚ (coq.logic.refl) (bool)) (true))) (false)) (auto)))))) (b1));
symbol andb_true_r : Prf (`∀ b1 : El (bool), `∀ b2 : El (bool), ((((coq.logic.eq) at (bool)) ▪ (((andb) ▪ b1) ▪ b2)) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ b2) ▪ true) ≔ in-∀ (λ b1 : El (bool),  in-∀ (λ b2 : El (bool),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (`λ' __ : El (bool), ((((coq.logic.eq) at (bool)) ▪ (((andb) ▪ __) ▪ b2)) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ b2) ▪ true)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_true) (bool)) (b2)) (false)) (`λ' x : El (bool), ((((coq.logic.eq) at (bool)) ▪ x) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ b2) ▪ true)) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (bool)) ▪ b2) ▪ true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (bool)) (b2)) (`λ' __ : El (bool), (((coq.logic.eq) at (bool)) ▪ b2) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (bool)) (b2))) (true)) (auto))))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (sym_eq_match_bool_type_false) (bool)) (b2)) (false)) (`λ' x : El (bool), ((((coq.logic.eq) at (bool)) ▪ x) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ b2) ▪ true)) (el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (`λ' __ : El (bool), ((((coq.logic.eq) at (bool)) ▪ false) ▪ true) ⇒ (((coq.logic.eq) at (bool)) ▪ __) ▪ true)) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (bool)) ▪ false) ▪ true), el-∀ (el-∀ₚ (coq.logic.refl) (bool)) (true)))) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (bool)) ▪ false) ▪ true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (bool)) (true)) (`λ' __ : El (bool), (((coq.logic.eq) at (bool)) ▪ __) ▪ true)) (el-∀ (el-∀ₚ (coq.logic.refl) (bool)) (true))) (false)) (auto)))) (b2)))) (b1)));
symbol true_or_false : Prf (`∀ b : El (bool), ((coq.connectives.Or) ▪ ((((coq.logic.eq) at (bool)) ▪ b) ▪ true)) ▪ ((((coq.logic.eq) at (bool)) ▪ b) ▪ false)) ≔ in-∀ (λ b : El (bool),  el-∀ (el-⇒ (el-⇒ (el-∀ (match_bool_prop) (`λ' __ : El (bool), ((coq.connectives.Or) ▪ ((((coq.logic.eq) at (bool)) ▪ __) ▪ true)) ▪ ((((coq.logic.eq) at (bool)) ▪ __) ▪ false))) (el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) ((((coq.logic.eq) at (bool)) ▪ true) ▪ true)) ((((coq.logic.eq) at (bool)) ▪ true) ▪ false)) (el-∀ (el-∀ₚ (coq.logic.refl) (bool)) (true)))) (el-∀ (el-∀ (el-∀ₚ (coq.relations.RC_reflexive) (bool)) (`λ' __ : El (bool), `λ' _0 : El (bool), (((coq.logic.eq) at (bool)) ▪ false) ▪ true)) (false))) (b));
