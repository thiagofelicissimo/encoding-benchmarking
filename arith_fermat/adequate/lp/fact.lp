require open coq.sttfa;
require coq.connectives;
require coq.leibniz;
require coq.nat;
constant symbol fact : Els (↑ (coq.nat.nat ⇝ coq.nat.nat));
constant symbol fact_body : Els (↑ (coq.nat.nat ⇝ coq.nat.nat));
constant symbol axiom_fact : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat) ■) (app (fact) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat) ■) fact_body ■) n ■) ■));
symbol eq_fact : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat) ■) (app (fact) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat) ■) fact_body ■) n ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat) ■) (app (fact) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat) ■) fact_body ■) n ■) ■) (el-∀ (axiom_fact) (n) ■) ■);
symbol sym_eq_fact : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat) ■) fact_body ■) n ■) ■) (app (fact) n ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat) ■) (app (fact) n ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat) ■) fact_body ■) n ■) ■) (el-∀ (eq_fact) (n) ■) ■);
constant symbol axiom_fact_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat) ■) (app (fact_body) coq.nat.O ■) ■) (app (coq.nat.S) coq.nat.O ■) ■);
symbol eq_fact_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat) ■) (app (fact_body) coq.nat.O ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat) ■) (app (fact_body) coq.nat.O ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) (axiom_fact_body_O) ■;
symbol sym_eq_fact_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat) ■) (app (coq.nat.S) coq.nat.O ■) ■) (app (fact_body) coq.nat.O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat) ■) (app (fact_body) coq.nat.O ■) ■) (app (coq.nat.S) coq.nat.O ■) ■) (eq_fact_body_O) ■;
constant symbol axiom_fact_body_S : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat) ■) (app (fact_body) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.times) (app (fact) n ■) ■) (app (coq.nat.S) n ■) ■) ■));
symbol eq_fact_body_S : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat) ■) (app (fact_body) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.times) (app (fact) n ■) ■) (app (coq.nat.S) n ■) ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat) ■) (app (fact_body) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.times) (app (fact) n ■) ■) (app (coq.nat.S) n ■) ■) ■) (el-∀ (axiom_fact_body_S) (n) ■) ■);
symbol sym_eq_fact_body_S : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (fact) n ■) ■) (app (coq.nat.S) n ■) ■) ■) (app (fact_body) (app (coq.nat.S) n ■) ■) ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat) ■) (app (fact_body) (app (coq.nat.S) n ■) ■) ■) (app (app (coq.nat.times) (app (fact) n ■) ■) (app (coq.nat.S) n ■) ■) ■) (el-∀ (eq_fact_body_S) (n) ■) ■);
