require open coq.sttfa;
require coq.bool;
require coq.connectives;
require coq.leibniz;
require coq.logic;
require coq.nat;
constant symbol mod_aux : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat));
constant symbol mod_aux_body : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat));
constant symbol axiom_mod_aux : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) mod_aux_body ■) p ■) ■));
symbol eq_mod_aux : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) mod_aux_body ■) p ■) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) mod_aux_body ■) p ■) ■) (el-∀ (axiom_mod_aux) (p) ■) ■);
symbol sym_eq_mod_aux : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) mod_aux_body ■) p ■) ■) (app (mod_aux) p ■) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) mod_aux_body ■) p ■) ■) (el-∀ (eq_mod_aux) (p) ■) ■);
constant symbol axiom_mod_aux_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), m))) ■);
symbol eq_mod_aux_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), m))) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), m))) ■) (axiom_mod_aux_body_O) ■;
symbol sym_eq_mod_aux_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), m))) ■) (app (mod_aux_body) coq.nat.O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), m))) ■) (eq_mod_aux_body_O) ■;
constant symbol axiom_mod_aux_body_S : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) m ■) (app (app (app (mod_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■));
symbol eq_mod_aux_body_S : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) m ■) (app (app (app (mod_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) m ■) (app (app (app (mod_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■) (el-∀ (axiom_mod_aux_body_S) (p) ■) ■);
symbol sym_eq_mod_aux_body_S : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) m ■) (app (app (app (mod_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■) (app (mod_aux_body) (app (coq.nat.S) p ■) ■) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (mod_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) m ■) (app (app (app (mod_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■) (el-∀ (eq_mod_aux_body_S) (p) ■) ■);
symbol mod : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)) ≔ abs (λ n : El (coq.nat.nat), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) n ■) (abs (λ p : El (coq.nat.nat), app (app (app (mod_aux) n ■) n ■) p ■)) ■) m ■));
constant symbol div_aux : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat));
constant symbol div_aux_body : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat));
constant symbol axiom_div_aux : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) div_aux_body ■) p ■) ■));
symbol eq_div_aux : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) div_aux_body ■) p ■) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) div_aux_body ■) p ■) ■) (el-∀ (axiom_div_aux) (p) ■) ■);
symbol sym_eq_div_aux : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) div_aux_body ■) p ■) ■) (app (div_aux) p ■) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux) p ■) ■) (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) div_aux_body ■) p ■) ■) (el-∀ (eq_div_aux) (p) ■) ■);
constant symbol axiom_div_aux_body_O : Prf (app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), coq.nat.O))) ■);
symbol eq_div_aux_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), coq.nat.O))) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), coq.nat.O))) ■) (axiom_div_aux_body_O) ■;
symbol sym_eq_div_aux_body_O : Prf (app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), coq.nat.O))) ■) (app (div_aux_body) coq.nat.O ■) ■) ≔ el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) coq.nat.O ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), coq.nat.O))) ■) (eq_div_aux_body_O) ■;
constant symbol axiom_div_aux_body_S : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.connectives.equal) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■));
symbol eq_div_aux_body_S : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.connectives.equal_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■) (el-∀ (axiom_div_aux_body_S) (p) ■) ■);
symbol sym_eq_div_aux_body_S : Prf (∀ (λ p : El (coq.nat.nat), app (app (el-∀ₖ (coq.leibniz.leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■) (app (div_aux_body) (app (coq.nat.S) p ■) ■) ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.leibniz.sym_leibniz) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (app (div_aux_body) (app (coq.nat.S) p ■) ■) ■) (abs (λ m : El (coq.nat.nat), abs (λ n : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) p ■) (app (app (coq.nat.minus) m ■) (app (coq.nat.S) n ■) ■) ■) n ■) ■) ■) (app (app (coq.nat.leb) m ■) n ■) ■))) ■) (el-∀ (eq_div_aux_body_S) (p) ■) ■);
symbol div : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)) ≔ abs (λ n : El (coq.nat.nat), abs (λ m : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ p : El (coq.nat.nat), app (app (app (div_aux) n ■) n ■) p ■)) ■) m ■));
symbol le_mod_aux_m_m : Prf (∀ (λ p : El (coq.nat.nat), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) p ■) ⇒ app (app (coq.nat.le) (app (app (app (mod_aux) p ■) n ■) m ■) ■) m ■)))) ≔ in-∀ (λ p : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) _x_365 ■) ⇒ app (app (coq.nat.le) (app (app (app (mod_aux) _x_365 ■) n ■) m ■) ■) m ■)))) ■) (in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (sym_eq_mod_aux) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) coq.nat.O ■) ⇒ app (app (coq.nat.le) (app (app (y) n ■) m ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (mod_aux_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) coq.nat.O ■) ⇒ app (app (coq.nat.le) (app (app (y) n ■) m ■) ■) m ■)) ■) (el-⇒ (el-∀ (sym_eq_mod_aux_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) coq.nat.O ■) ⇒ app (app (coq.nat.le) (app (app (y) n ■) m ■) ■) m ■)) ■) (in-⇒ (λ lenO : Prf (app (app (coq.nat.le) n ■) coq.nat.O ■), el-⇒ (el-∀ (el-⇒ (el-∀ (coq.nat.le_n_O_elim) (n) ■) (lenO) ■) (abs (λ __ : El (coq.nat.nat), app (app (coq.nat.le) __ ■) m ■)) ■) (el-∀ (coq.nat.le_O_n) (m) ■) ■)) ■) ■) ■))) ■) (in-∀ (λ q : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (sym_eq_mod_aux) (app (coq.nat.S) q ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) q ■) ⇒ app (app (coq.nat.le) (app (app (app (mod_aux) q ■) n ■) m ■) ■) m ■))) ⇒ ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) (app (coq.nat.S) q ■) ■) ⇒ app (app (coq.nat.le) (app (app (y) n ■) m ■) ■) m ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (mod_aux_body) ■) (q) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) q ■) ⇒ app (app (coq.nat.le) (app (app (app (mod_aux) q ■) n ■) m ■) ■) m ■))) ⇒ ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) (app (coq.nat.S) q ■) ■) ⇒ app (app (coq.nat.le) (app (app (y) n ■) m ■) ■) m ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_mod_aux_body_S) (q) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) q ■) ⇒ app (app (coq.nat.le) (app (app (app (mod_aux) q ■) n ■) m ■) ■) m ■))) ⇒ ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) (app (coq.nat.S) q ■) ■) ⇒ app (app (coq.nat.le) (app (app (y) n ■) m ■) ■) m ■)))) ■) (in-⇒ (λ Hind : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.le) n ■) q ■) ⇒ app (app (coq.nat.le) (app (app (app (mod_aux) q ■) n ■) m ■) ■) m ■))), in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ len : Prf (app (app (coq.nat.le) n ■) (app (coq.nat.S) q ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.leb_elim) (n) ■) (m) ■) (abs (λ __ : El (coq.bool.bool), app (app (coq.nat.le) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) n ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) __ ■) ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (n) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (coq.nat.le) y ■) m ■)) ■) (in-⇒ (λ auto : Prf (app (app (coq.nat.le) n ■) m ■), auto)) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (n) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (abs (λ y : El (coq.nat.nat), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (coq.nat.le) y ■) m ■)) ■) (in-⇒ (λ notlenm : Prf (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■), el-⇒ (el-∀ (el-∀ (Hind) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) (m) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.le_plus_to_minus) (n) ■) (app (coq.nat.S) m ■) ■) (q) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.transitive_le) (n) ■) (app (coq.nat.S) q ■) ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■) (len) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (coq.nat.S) q ■) ■) (app (app (coq.nat.plus) (app (coq.nat.S) q ■) ■) m ■) ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) q ■) ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.le_plus_n_r) (m) ■) (app (coq.nat.S) q ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) q ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) q ■) ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) q ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) q ■) ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) q ■) ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■) ■) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) q ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (coq.nat.S) (app (app (coq.nat.plus) m ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) q ■) m ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) __ ■) ■) (app (app (coq.nat.plus) q ■) (app (coq.nat.S) m ■) ■) ■)) ■) (el-∀ (el-∀ (coq.nat.plus_n_Sm) (q) ■) (m) ■) ■) (app (app (coq.nat.plus) m ■) q ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (q) ■) (m) ■) ■) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.plus_n_Sm) (m) ■) (q) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (coq.nat.S) q ■) ■) m ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (m) ■) (app (coq.nat.S) q ■) ■) ■) ■) ■) ■) ■)) ■) ■))))) ■) ■) ■)) ■) (p) ■);
symbol lt_mod_m_m : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) m ■) ⇒ app (app (coq.nat.lt) (app (app (mod) n ■) m ■) ■) m ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (abs (λ __ : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) __ ■) ⇒ app (app (coq.nat.lt) (app (app (mod) n ■) __ ■) ■) __ ■)) ■) (in-⇒ (λ abs : Prf (app (app (coq.nat.lt) coq.nat.O ■) coq.nat.O ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.lt) (app (app (mod) n ■) coq.nat.O ■) ■) coq.nat.O ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) (app (coq.nat.S) coq.nat.O ■) ■) coq.nat.O ■) ■) (abs) ■) (el-∀ (coq.nat.not_le_Sn_O) (coq.nat.O) ■) ■) ■)) ■) (in-∀ (λ p : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (n) ■) (abs (λ q : El (coq.nat.nat), app (app (app (mod_aux) n ■) n ■) q ■)) ■) (p) ■) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) (app (coq.nat.S) p ■) ■) ⇒ app (app (coq.nat.lt) y ■) (app (coq.nat.S) p ■) ■)) ■) (in-⇒ (λ __ : Prf (app (app (coq.nat.lt) coq.nat.O ■) (app (coq.nat.S) p ■) ■), el-⇒ (el-∀ (el-∀ (coq.nat.le_S_S) (app (app (app (mod_aux) n ■) n ■) p ■) ■) (p) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (le_mod_aux_m_m) (n) ■) (n) ■) (p) ■) (el-∀ (coq.nat.le_n) (n) ■) ■) ■)) ■)) ■) (m) ■));
symbol div_aux_mod_aux : Prf (∀ (λ p : El (coq.nat.nat), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) p ■) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) p ■) n ■) m ■) ■) ■)))) ≔ in-∀ (λ p : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.nat_ind) (abs (λ _x_365 : El (coq.nat.nat), ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) _x_365 ■) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) _x_365 ■) n ■) m ■) ■) ■)))) ■) (in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (sym_eq_div_aux) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (y) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) coq.nat.O ■) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (div_aux_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (y) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) coq.nat.O ■) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_div_aux_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (y) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) coq.nat.O ■) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.eq_match_nat_type_O) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ q : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (app (app (coq.nat.leb) n ■) m ■) ■)) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) y ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) coq.nat.O ■) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_mod_aux) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (abs (λ m0 : El (coq.nat.nat), abs (λ n0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ q : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) m0 ■) (app (coq.nat.S) n0 ■) ■) ■) n0 ■) ■) ■) (app (app (coq.nat.leb) m0 ■) n0 ■) ■)) ■) coq.nat.O ■))) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (y) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (mod_aux_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (abs (λ m0 : El (coq.nat.nat), abs (λ n0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ q : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) m0 ■) (app (coq.nat.S) n0 ■) ■) ■) n0 ■) ■) ■) (app (app (coq.nat.leb) m0 ■) n0 ■) ■)) ■) coq.nat.O ■))) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (y) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (sym_eq_mod_aux_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (abs (λ m0 : El (coq.nat.nat), abs (λ n0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ q : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) m0 ■) (app (coq.nat.S) n0 ■) ■) ■) n0 ■) ■) ■) (app (app (coq.nat.leb) m0 ■) n0 ■) ■)) ■) coq.nat.O ■))) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (y) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ q : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (app (app (coq.nat.leb) n ■) m ■) ■)) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (abs (λ m0 : El (coq.nat.nat), abs (λ n0 : El (coq.nat.nat), y))) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_times_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_plus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) n ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■))) ■) (in-∀ (λ q : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (sym_eq_div_aux) (app (coq.nat.S) q ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) n ■) m ■) ■) ■))) ⇒ ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (y) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) (app (coq.nat.S) q ■) ■) n ■) m ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (div_aux_body) ■) (q) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) n ■) m ■) ■) ■))) ⇒ ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (y) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) (app (coq.nat.S) q ■) ■) n ■) m ■) ■) ■)))) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_div_aux_body_S) (q) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) n ■) m ■) ■) ■))) ⇒ ∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (y) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) (app (coq.nat.S) q ■) ■) n ■) m ■) ■) ■)))) ■) (in-⇒ (λ Hind : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) n ■) m ■) ■) ■))), in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.eq_match_nat_type_S) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ q0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q0 ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (app (app (coq.nat.leb) n ■) m ■) ■)) ■) (q) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) y ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) (app (coq.nat.S) q ■) ■) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_mod_aux) (app (coq.nat.S) q ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (abs (λ m0 : El (coq.nat.nat), abs (λ n0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ q0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q0 ■) (app (app (coq.nat.minus) m0 ■) (app (coq.nat.S) n0 ■) ■) ■) n0 ■) ■) ■) (app (app (coq.nat.leb) m0 ■) n0 ■) ■)) ■) (app (coq.nat.S) q ■) ■))) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (y) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat) ■) (mod_aux_body) ■) (q) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (abs (λ m0 : El (coq.nat.nat), abs (λ n0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ q0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q0 ■) (app (app (coq.nat.minus) m0 ■) (app (coq.nat.S) n0 ■) ■) ■) n0 ■) ■) ■) (app (app (coq.nat.leb) m0 ■) n0 ■) ■)) ■) (app (coq.nat.S) q ■) ■))) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (y) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (sym_eq_mod_aux_body_S) (q) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (abs (λ m0 : El (coq.nat.nat), abs (λ n0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) coq.nat.O ■) (abs (λ q0 : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q0 ■) (app (app (coq.nat.minus) m0 ■) (app (coq.nat.S) n0 ■) ■) ■) n0 ■) ■) ■) (app (app (coq.nat.leb) m0 ■) n0 ■) ■)) ■) (app (coq.nat.S) q ■) ■))) n ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (y) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ z : El (coq.nat.nat), app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) z ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (app (app (coq.nat.leb) n ■) m ■) ■)) ■) (q) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) y ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) n ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (app (coq.nat.leb) n ■) m ■) ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.leb_elim) (n) ■) (m) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) __ ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) n ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) __ ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (coq.nat.O) ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (abs (λ x : El (coq.nat.nat), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) x ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) n ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) coq.bool.true ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) n ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) coq.bool.true ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) n ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) coq.bool.true ■) ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_times_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) n ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) coq.bool.true ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_true) (coq.nat.nat) ■) (n) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (abs (λ y : El (coq.nat.nat), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) coq.nat.O ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) n ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_plus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (app (coq.nat.le) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) n ■) ■)) ■) (in-⇒ (λ lenm : Prf (app (app (coq.nat.le) n ■) m ■), el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■)) ■) ■) ■) ■) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (n) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (abs (λ x : El (coq.nat.nat), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (el-∀ₖ (coq.bool.match_bool_type) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) coq.bool.false ■) ■) (app (coq.nat.S) m ■) ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.bool.sym_eq_match_bool_type_false) (coq.nat.nat) ■) (coq.nat.O) ■) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (abs (λ y : El (coq.nat.nat), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) y ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (app (coq.nat.S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times_body_S) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (app (coq.nat.S) m ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (m) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus_body_S) (m) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (app (coq.nat.S) (app (app (coq.nat.plus) m ■) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (app (app (coq.nat.plus) m ■) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus_body_S) (app (app (coq.nat.plus) m ■) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (y) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) (in-⇒ (λ lenm : Prf (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) m ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (coq.nat.S) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (coq.nat.S) (app (app (coq.nat.plus) m ■) x_1 ■) ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (coq.nat.S) (app (app (coq.nat.plus) m ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.plus_minus_m_m) (n) ■) (app (coq.nat.S) m ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_le_to_lt) (n) ■) (m) ■) (lenm) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) __ ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (coq.nat.S) (app (app (coq.nat.plus) m ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (coq.nat.S) (app (app (coq.nat.plus) m ■) __ ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (coq.nat.S) (app (app (coq.nat.plus) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) m ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) __ ■) ■) (app (app (coq.nat.plus) m ■) (app (coq.nat.S) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■)) ■) (el-∀ (el-∀ (coq.nat.plus_n_Sm) (m) ■) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) (app (app (coq.nat.plus) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) m ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (m) ■) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (app (coq.nat.S) m ■) ■) ■) (el-∀ (el-∀ (coq.nat.plus_n_Sm) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (m) ■) ■) ■) ■) (app (coq.nat.S) (app (app (coq.nat.plus) m ■) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.plus_n_Sm) (m) ■) (app (coq.nat.pred) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) (el-∀ (el-∀ (coq.nat.eq_minus_S_pred) (n) ■) (m) ■) ■) ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) (el-∀ (el-∀ (coq.nat.eq_minus_S_pred) (n) ■) (m) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (el-∀ (el-∀ (Hind) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) (m) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.plus) m ■) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.associative_plus) (m) ■) (app (app (coq.nat.times) (app (app (app (div_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) (app (coq.nat.S) m ■) ■) ■) (app (app (app (mod_aux) q ■) (app (app (coq.nat.minus) n ■) (app (coq.nat.S) m ■) ■) ■) m ■) ■) ■)) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■)))) ■) ■) ■)) ■) (p) ■);
symbol div_mod : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (div) n ■) m ■) ■) m ■) ■) (app (app (mod) n ■) m ■) ■) ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (div) n ■) __ ■) ■) __ ■) ■) (app (app (mod) n ■) __ ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times) (app (app (div) n ■) coq.nat.O ■) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) coq.nat.O ■) ■) (app (app (mod) n ■) coq.nat.O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ p : El (coq.nat.nat), app (app (app (div_aux) n ■) n ■) p ■)) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (app (el-∀ₖ (coq.nat.filter_nat_type) (coq.nat.nat ⇝ coq.nat.nat) ■) coq.nat.times_body ■) y ■) coq.nat.O ■) ■) (app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) n ■) (abs (λ p : El (coq.nat.nat), app (app (app (mod_aux) n ■) n ■) p ■)) ■) coq.nat.O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_S) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.times_body) ■) (n) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) coq.nat.O ■) ■) (app (app (mod) n ■) coq.nat.O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_times_body_S) (n) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) coq.nat.O ■) ■) (app (app (mod) n ■) coq.nat.O ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat) ■) (n) ■) (abs (λ p : El (coq.nat.nat), app (app (app (mod_aux) n ■) n ■) p ■)) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_plus) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.nat.nat) ■) (coq.nat.plus_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_plus_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.nat.nat)), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (y) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) __ ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) n ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (n) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■) ■) (app (app (coq.nat.plus) n ■) coq.nat.O ■) ■) (el-∀ (coq.nat.plus_n_O) (n) ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) n ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (coq.nat.O) ■) (n) ■) ■) ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) (el-∀ (coq.nat.times_n_O) (n) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) ■) (in-∀ (λ auto : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (app (coq.nat.S) n ■) ■) (abs (λ p : El (coq.nat.nat), app (app (app (div_aux) n ■) n ■) p ■)) ■) (auto) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) y ■) (app (coq.nat.S) auto ■) ■) ■) (app (app (app (el-∀ₖ (coq.nat.match_nat_type) (coq.nat.nat) ■) n ■) (abs (λ p : El (coq.nat.nat), app (app (app (mod_aux) n ■) n ■) p ■)) ■) (app (coq.nat.S) auto ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_S) (coq.nat.nat) ■) (n) ■) (abs (λ p : El (coq.nat.nat), app (app (app (mod_aux) n ■) n ■) p ■)) ■) (auto) ■) (abs (λ y : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) n ■) n ■) auto ■) ■) (app (coq.nat.S) auto ■) ■) ■) y ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) n ■) n ■) auto ■) ■) (app (coq.nat.S) auto ■) ■) ■) (app (app (app (mod_aux) n ■) n ■) auto ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) n ■) n ■) auto ■) ■) (app (coq.nat.S) auto ■) ■) ■) (app (app (app (mod_aux) n ■) n ■) auto ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (app (div_aux) n ■) n ■) auto ■) ■) (app (coq.nat.S) auto ■) ■) ■) (app (app (app (mod_aux) n ■) n ■) auto ■) ■) ■) ■) (n) ■) (el-∀ (el-∀ (el-∀ (div_aux_mod_aux) (n) ■) (n) ■) (auto) ■) ■) ■) ■)) ■) (m) ■));
symbol eq_times_div_minus_mod : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (div) a ■) b ■) ■) b ■) ■) (app (app (coq.nat.minus) a ■) (app (app (mod) a ■) b ■) ■) ■))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (coq.nat.minus) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (div) a ■) b ■) ■) b ■) ■) (app (app (coq.nat.minus) a ■) (app (app (mod) a ■) b ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.minus_plus_m_m) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (mod) a ■) b ■) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (coq.nat.minus) __ ■) (app (app (mod) a ■) b ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (div) a ■) b ■) ■) b ■) ■) (app (app (coq.nat.minus) a ■) (app (app (mod) a ■) b ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (coq.nat.minus) (app (app (coq.nat.plus) (app (app (mod) a ■) b ■) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.minus) a ■) (app (app (mod) a ■) b ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (coq.nat.minus) __ ■) (app (app (mod) a ■) b ■) ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (coq.nat.minus) a ■) (app (app (mod) a ■) b ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (coq.nat.minus) a ■) (app (app (mod) a ■) b ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (mod) a ■) b ■) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (div) a ■) b ■) ■) b ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __ ■) (app (app (mod) a ■) b ■) ■) ■)) ■) (el-∀ (el-∀ (div_mod) (a) ■) (b) ■) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (div) a ■) b ■) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) (app (app (mod) a ■) b ■) ■) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (div) a ■) b ■) ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (div) a ■) b ■) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) (app (app (div) a ■) b ■) ■) ■) (app (app (mod) a ■) b ■) ■) ■) ■));
constant symbol div_mod_spec : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ coq.nat.nat ⇝ prop));
constant symbol div_mod_spec_intro : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), ∀ (λ r : El (coq.nat.nat), (app (app (coq.nat.lt) r ■) m ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) m ■) ■) r ■) ■) ⇒ app (app (app (app (div_mod_spec) n ■) m ■) q ■) r ■)))));
constant symbol match_div_mod_spec_prop : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), ∀ (λ r : El (coq.nat.nat), ∀ (λ return_ : El (prop), ((app (app (coq.nat.lt) r ■) m ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) m ■) ■) r ■) ■) ⇒ return_) ⇒ (app (app (app (app (div_mod_spec) n ■) m ■) q ■) r ■) ⇒ return_))))));
symbol div_mod_spec_div_mod : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) m ■) ⇒ app (app (app (app (div_mod_spec) n ■) m ■) (app (app (div) n ■) m ■) ■) (app (app (mod) n ■) m ■) ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posm : Prf (app (app (coq.nat.lt) coq.nat.O ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (div_mod_spec_intro) (n) ■) (m) ■) (app (app (div) n ■) m ■) ■) (app (app (mod) n ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (lt_mod_m_m) (n) ■) (m) ■) (posm) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) __ ■) (app (app (mod) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (mod) n ■) m ■) ■) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (n) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■) ■) (app (app (coq.nat.plus) (app (app (mod) n ■) m ■) ■) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) (app (app (mod) n ■) m ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (div) n ■) m ■) ■) m ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) __ ■) (app (app (mod) n ■) m ■) ■) ■)) ■) (el-∀ (el-∀ (div_mod) (n) ■) (m) ■) ■) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (div) n ■) m ■) ■) (m) ■) ■) ■) (app (app (coq.nat.plus) (app (app (mod) n ■) m ■) ■) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) (app (app (mod) n ■) m ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) (app (app (mod) n ■) m ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) m ■) (app (app (div) n ■) m ■) ■) ■) (app (app (mod) n ■) m ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (div) n ■) m ■) ■) m ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (div) n ■) m ■) ■) (m) ■) ■) ■)));
symbol let_clause_1078 : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), ∀ (λ r : El (coq.nat.nat), ∀ (λ q1 : El (coq.nat.nat), ∀ (λ r1 : El (coq.nat.nat), (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■) ⇒ (app (app (coq.nat.lt) r ■) b ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■) ⇒ (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■) ⇒ (app (app (coq.nat.lt) r1 ■) b ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■) ⇒ (app (app (coq.nat.le) q ■) q1 ■) ⇒ (app (app (coq.nat.lt) q ■) q1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■))))))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-∀ (λ q : El (coq.nat.nat),  in-∀ (λ r : El (coq.nat.nat),  in-∀ (λ q1 : El (coq.nat.nat),  in-∀ (λ r1 : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■), in-⇒ (λ ltrb : Prf (app (app (coq.nat.lt) r ■) b ■), in-⇒ (λ spec : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■), in-⇒ (λ _clearme0 : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■), in-⇒ (λ ltr1b : Prf (app (app (coq.nat.lt) r1 ■) b ■), in-⇒ (λ spec1 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■), in-⇒ (λ leqq1 : Prf (app (app (coq.nat.le) q ■) q1 ■), in-⇒ (λ ltqq1 : Prf (app (app (coq.nat.lt) q ■) q1 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) b ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __ ■) r ■) ■)) ■) (spec) ■) (app (app (coq.nat.times) b ■) q ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r) ■) ■))))))))))))));
symbol let_clause_1062 : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), ∀ (λ r : El (coq.nat.nat), ∀ (λ q1 : El (coq.nat.nat), ∀ (λ r1 : El (coq.nat.nat), (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■) ⇒ (app (app (coq.nat.lt) r ■) b ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■) ⇒ (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■) ⇒ (app (app (coq.nat.lt) r1 ■) b ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■) ⇒ (app (coq.connectives.Not) (app (app (coq.nat.le) q ■) q1 ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■))))))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-∀ (λ q : El (coq.nat.nat),  in-∀ (λ r : El (coq.nat.nat),  in-∀ (λ q1 : El (coq.nat.nat),  in-∀ (λ r1 : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■), in-⇒ (λ ltrb : Prf (app (app (coq.nat.lt) r ■) b ■), in-⇒ (λ spec : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■), in-⇒ (λ _clearme0 : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■), in-⇒ (λ ltr1b : Prf (app (app (coq.nat.lt) r1 ■) b ■), in-⇒ (λ spec1 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■), in-⇒ (λ leqq1 : Prf (app (coq.connectives.Not) (app (app (coq.nat.le) q ■) q1 ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __ ■) r1 ■) ■)) ■) (spec1) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q1) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q1 ■) ■) (r1) ■) ■)))))))))))));
symbol div_mod_spec_to_eq : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), ∀ (λ r : El (coq.nat.nat), ∀ (λ q1 : El (coq.nat.nat), ∀ (λ r1 : El (coq.nat.nat), (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■) ⇒ (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■))))))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-∀ (λ q : El (coq.nat.nat),  in-∀ (λ r : El (coq.nat.nat),  in-∀ (λ q1 : El (coq.nat.nat),  in-∀ (λ r1 : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (match_div_mod_spec_prop) (a) ■) (b) ■) (q) ■) (r) ■) ((app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■) ■) (in-⇒ (λ ltrb : Prf (app (app (coq.nat.lt) r ■) b ■), in-⇒ (λ spec : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■), in-⇒ (λ _clearme0 : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (match_div_mod_spec_prop) (a) ■) (b) ■) (q1) ■) (r1) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■) ■) (in-⇒ (λ ltr1b : Prf (app (app (coq.nat.lt) r1 ■) b ■), in-⇒ (λ spec1 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.leb_elim) (q) ■) (q1) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■)) ■) (in-⇒ (λ leqq1 : Prf (app (app (coq.nat.le) q ■) q1 ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) q ■) q1 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■) ■) (in-⇒ (λ ltqq1 : Prf (app (app (coq.nat.lt) q ■) q1 ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) (app (coq.nat.S) a ■) ■) a ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_to_le_to_lt) (a) ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) (a) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.nat.lt) x ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.monotonic_lt_plus_r) (app (app (coq.nat.times) q ■) b ■) ■) (r) ■) (b) ■) (ltrb) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) __ ■) r ■) ■) (app (app (coq.nat.plus) __ ■) b ■) ■) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) __ ■) r ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) a ■) __ ■) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (let_clause_1078) (a) ■) (b) ■) (q) ■) (r) ■) (q1) ■) (r1) ■) (_clearme) ■) (ltrb) ■) (spec) ■) (_clearme0) ■) (ltr1b) ■) (spec1) ■) (leqq1) ■) (ltqq1) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r) ■) ■) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (b) ■) (q) ■) ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (coq.nat.S) q ■) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (let_clause_1078) (a) ■) (b) ■) (q) ■) (r) ■) (q1) ■) (r1) ■) (_clearme) ■) (ltrb) ■) (spec) ■) (_clearme0) ■) (ltr1b) ■) (spec1) ■) (leqq1) ■) (ltqq1) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r) ■) ■) ■) (app (app (coq.nat.times) q ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■) ■) (a) ■) (spec) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.transitive_le) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) (a) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.monotonic_le_times_r) (b) ■) (app (coq.nat.S) q ■) ■) (q1) ■) (ltqq1) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.times) q1 ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.times) q1 ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (b) ■) (q) ■) ■) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q1) ■) (b) ■) ■) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (b) ■) (q) ■) ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q ■) ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (coq.nat.S) q ■) ■) (b) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (app (coq.nat.times) q1 ■) b ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) q1 ■) b ■) ■) a ■) ■) (el-∀ (el-∀ (coq.nat.le_plus_n_r) (r1) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.plus) __ ■) r1 ■) ■) ■) (app (app (coq.nat.le) __ ■) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q1 ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q1 ■) ■) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q1 ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q1 ■) ■) a ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q1 ■) ■) a ■) ■) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __ ■) r1 ■) ■)) ■) (spec1) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q1) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q1 ■) ■) (r1) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q1 ■) ■) (r1) ■) ■) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q1) ■) (b) ■) ■) ■) ■) ■) ■) (el-∀ (coq.nat.not_le_Sn_n) (a) ■) ■) ■)) ■) (in-⇒ (λ _x_172 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (q) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (q) ■) ■) (q1) ■) (_x_172) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (q) ■) (q1) ■) (leqq1) ■) ■)) ■) (in-⇒ (λ leqq1 : Prf (app (coq.connectives.Not) (app (app (coq.nat.le) q ■) q1 ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) q ■) q1 ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) (app (coq.nat.S) a ■) ■) a ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.lt_to_le_to_lt) (a) ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) (a) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.nat.lt) x ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.monotonic_lt_plus_r) (app (app (coq.nat.times) q1 ■) b ■) ■) (r1) ■) (b) ■) (ltr1b) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) __ ■) r1 ■) ■) (app (app (coq.nat.plus) __ ■) b ■) ■) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) __ ■) r1 ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) __ ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) b ■) ■) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.lt) a ■) __ ■) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.lt) a ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q1 ■) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (let_clause_1062) (a) ■) (b) ■) (q) ■) (r) ■) (q1) ■) (r1) ■) (_clearme) ■) (ltrb) ■) (spec) ■) (_clearme0) ■) (ltr1b) ■) (spec1) ■) (leqq1) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q1 ■) ■) (r1) ■) ■) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (b) ■) (q1) ■) ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (coq.nat.S) q1 ■) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (let_clause_1062) (a) ■) (b) ■) (q) ■) (r) ■) (q1) ■) (r1) ■) (_clearme) ■) (ltrb) ■) (spec) ■) (_clearme0) ■) (ltr1b) ■) (spec1) ■) (leqq1) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q1 ■) ■) (r1) ■) ■) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q1) ■) (b) ■) ■) ■) ■) (a) ■) (spec1) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.transitive_le) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) (app (app (coq.nat.times) q ■) b ■) ■) (a) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) (app (app (coq.nat.times) q ■) b ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.monotonic_le_times_r) (b) ■) (app (coq.nat.S) q1 ■) ■) (q) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.not_le_to_lt) (q) ■) (q1) ■) (leqq1) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.times) q ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.times) q ■) b ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (app (app (coq.nat.times) b ■) q ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.plus) b ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (b) ■) (q1) ■) ■) ■) (app (app (coq.nat.times) q ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■) (app (app (coq.nat.times) b ■) (app (coq.nat.S) q1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (b) ■) (q1) ■) ■) ■) (app (app (coq.nat.times) (app (coq.nat.S) q1 ■) ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (coq.nat.S) q1 ■) ■) (b) ■) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (app (coq.nat.times) q ■) b ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) q ■) b ■) ■) a ■) ■) (el-∀ (el-∀ (coq.nat.le_plus_n_r) (r) ■) (app (app (coq.nat.times) q ■) b ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.plus) __ ■) r ■) ■) ■) (app (app (coq.nat.le) __ ■) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q ■) ■) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q ■) ■) a ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (app (coq.nat.times) b ■) q ■) ■) a ■) ■) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) b ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __ ■) r ■) ■)) ■) (spec) ■) (app (app (coq.nat.times) b ■) q ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r) ■) ■) ■) (app (app (coq.nat.times) q ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■) ■) ■) ■) (el-∀ (coq.nat.not_le_Sn_n) (a) ■) ■) ■)) ■))) ■) (_clearme0) ■)))) ■) (_clearme) ■)))))));
symbol div_mod_spec_to_eq2 : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), ∀ (λ r : El (coq.nat.nat), ∀ (λ q1 : El (coq.nat.nat), ∀ (λ r1 : El (coq.nat.nat), (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■) ⇒ (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) r ■) r1 ■))))))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-∀ (λ q : El (coq.nat.nat),  in-∀ (λ r : El (coq.nat.nat),  in-∀ (λ q1 : El (coq.nat.nat),  in-∀ (λ r1 : El (coq.nat.nat),  in-⇒ (λ spec : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q ■) r ■), in-⇒ (λ spec1 : Prf (app (app (app (app (div_mod_spec) a ■) b ■) q1 ■) r1 ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (match_div_mod_spec_prop) (a) ■) (b) ■) (q) ■) (r) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) r ■) r1 ■) ■) (in-⇒ (λ __ : Prf (app (app (coq.nat.lt) r ■) b ■), in-⇒ (λ eqa : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (match_div_mod_spec_prop) (a) ■) (b) ■) (q1) ■) (r1) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) r ■) r1 ■) ■) (in-⇒ (λ _0 : Prf (app (app (coq.nat.lt) r1 ■) b ■), in-⇒ (λ eqa1 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q1 ■) b ■) ■) r1 ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.injective_plus_r) (app (app (coq.nat.times) q ■) b ■) ■) (r) ■) (r1) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.plus) __1 ■) r ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __1 ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __1 ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) b ■) ■) r1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) b ■) q ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __1 ■) r1 ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (a) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __1 ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (a) ■) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (q1) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) __1 ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q1 ■) ■) r1 ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) q1 ■) b ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __1 ■) r1 ■) ■)) ■) (eqa1) ■) (app (app (coq.nat.times) b ■) q1 ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q1) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r1 ■) (app (app (coq.nat.times) b ■) q1 ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q1 ■) ■) (r1) ■) ■) ■) (q) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (div_mod_spec_to_eq) (a) ■) (b) ■) (q) ■) (r) ■) (q1) ■) (r1) ■) (spec) ■) (spec1) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r1 ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r1) ■) ■) ■) (app (app (coq.nat.times) q ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) __1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) b ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) a ■) (app (app (coq.nat.plus) __1 ■) r ■) ■)) ■) (eqa) ■) (app (app (coq.nat.times) b ■) q ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■) (app (app (coq.nat.plus) r ■) (app (app (coq.nat.times) b ■) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) b ■) q ■) ■) r ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) b ■) q ■) ■) (r) ■) ■) ■) (app (app (coq.nat.times) q ■) b ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (b) ■) ■) ■))) ■) (spec1) ■))) ■) (spec) ■))))))));
symbol div_times : Prf (∀ (λ a : El (coq.nat.nat), ∀ (λ b : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) b ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (div) (app (app (coq.nat.times) a ■) b ■) ■) b ■) ■) a ■))) ≔ in-∀ (λ a : El (coq.nat.nat),  in-∀ (λ b : El (coq.nat.nat),  in-⇒ (λ posb : Prf (app (app (coq.nat.lt) coq.nat.O ■) b ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (div_mod_spec_to_eq) (app (app (coq.nat.times) a ■) b ■) ■) (b) ■) (app (app (div) (app (app (coq.nat.times) a ■) b ■) ■) b ■) ■) (app (app (mod) (app (app (coq.nat.times) a ■) b ■) ■) b ■) ■) (a) ■) (coq.nat.O) ■) (el-⇒ (el-∀ (el-∀ (div_mod_spec_div_mod) (app (app (coq.nat.times) a ■) b ■) ■) (b) ■) (posb) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (div_mod_spec_intro) (app (app (coq.nat.times) a ■) b ■) ■) (b) ■) (a) ■) (coq.nat.O) ■) (posb) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.nat.times) a ■) b ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) a ■) b ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) a ■) b ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) a ■) b ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.times) a ■) b ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.nat.times) a ■) b ■) ■) ■) (el-∀ (coq.nat.plus_O_n) (app (app (coq.nat.times) a ■) b ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) a ■) b ■) ■) coq.nat.O ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) a ■) b ■) ■) (coq.nat.O) ■) ■) ■) ■)));
symbol eq_div_O : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (div) n ■) m ■) ■) coq.nat.O ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ ltnm : Prf (app (app (coq.nat.lt) n ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (div_mod_spec_to_eq) (n) ■) (m) ■) (app (app (div) n ■) m ■) ■) (app (app (mod) n ■) m ■) ■) (coq.nat.O) ■) (n) ■) (el-⇒ (el-∀ (el-∀ (div_mod_spec_div_mod) (n) ■) (m) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.ltn_to_ltO) (n) ■) (m) ■) (ltnm) ■) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (div_mod_spec_intro) (n) ■) (m) ■) (coq.nat.O) ■) (n) ■) (ltnm) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) m ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) __ ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) (app (app (coq.nat.plus) __ ■) n ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) n ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (n) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) n ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (n) ■) ■) (app (app (coq.nat.plus) n ■) coq.nat.O ■) ■) (el-∀ (coq.nat.plus_n_O) (n) ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) n ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (coq.nat.O) ■) (n) ■) ■) ■) (app (app (coq.nat.times) m ■) coq.nat.O ■) ■) (el-∀ (coq.nat.times_n_O) (m) ■) ■) ■) (app (app (coq.nat.times) coq.nat.O ■) m ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (coq.nat.O) ■) (m) ■) ■) ■) ■)));
symbol mod_O_n : Prf (∀ (λ n : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (coq.nat.O) ■) (app (app (mod) coq.nat.O ■) n ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (mod) coq.nat.O ■) n ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (mod) coq.nat.O ■) n ■) ■) ■) (el-⇒ (el-∀ (coq.nat.le_n_O_to_eq) (app (app (mod) coq.nat.O ■) n ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (app (coq.nat.minus) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) ■) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) ■) (app (app (coq.nat.le) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■) ■) (el-∀ (el-∀ (coq.nat.minus_le) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) ■) (app (app (coq.nat.le) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (mod) coq.nat.O ■) n ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) __ ■) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) ■) (app (app (coq.nat.le) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (app (mod) coq.nat.O ■) n ■) ■) __ ■) ■) (app (app (coq.nat.le) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■) ■) ■) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) (app (app (mod) coq.nat.O ■) n ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (div) coq.nat.O ■) n ■) ■) n ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.nat.plus) __ ■) (app (app (mod) coq.nat.O ■) n ■) ■) ■)) ■) (el-∀ (el-∀ (div_mod) (coq.nat.O) ■) (n) ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (div) coq.nat.O ■) n ■) ■) (n) ■) ■) ■) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) (app (app (mod) coq.nat.O ■) n ■) ■) ■) ■) ■) (app (app (coq.nat.minus) (app (app (mod) coq.nat.O ■) n ■) ■) coq.nat.O ■) ■) (el-∀ (coq.nat.minus_n_O) (app (app (mod) coq.nat.O ■) n ■) ■) ■) ■) (app (app (coq.nat.minus) (app (app (coq.nat.plus) (app (app (mod) coq.nat.O ■) n ■) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.minus_plus_plus_l) (app (app (mod) coq.nat.O ■) n ■) ■) (coq.nat.O) ■) (app (app (coq.nat.times) n ■) (app (app (div) coq.nat.O ■) n ■) ■) ■) ■) ■) ■) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (mod) coq.nat.O ■) n ■) ■) ■) ■) ■);
