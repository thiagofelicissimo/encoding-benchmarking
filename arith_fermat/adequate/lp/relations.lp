require open coq.sttfa;
require coq.connectives;
require coq.logic;
symbol reflexive : Els (∀ₖ (λ A, ↑ ((A ⇝ A ⇝ prop) ⇝ prop))) ≔ `Λ A, `λ' R : El ((A ⇝ A ⇝ prop)), `∀ x : El (A), ((R) ▪ x) ▪ x;
symbol transitive : Els (∀ₖ (λ A, ↑ ((A ⇝ A ⇝ prop) ⇝ prop))) ≔ `Λ A, `λ' R : El ((A ⇝ A ⇝ prop)), `∀ x : El (A), `∀ y : El (A), `∀ z : El (A), (((R) ▪ x) ▪ y) ⇒ (((R) ▪ y) ▪ z) ⇒ ((R) ▪ x) ▪ z;
symbol RC : Els (∀ₖ (λ A, ↑ ((A ⇝ A ⇝ prop) ⇝ A ⇝ A ⇝ prop))) ≔ `Λ A, `λ' R : El ((A ⇝ A ⇝ prop)), `λ' x : El (A), `λ' y : El (A), ((coq.connectives.Or) ▪ (((R) ▪ x) ▪ y)) ▪ ((((coq.logic.eq) at (A)) ▪ x) ▪ y);
symbol RC_reflexive : Prf (`∀ₚ A, `∀ R : El ((A ⇝ A ⇝ prop)), ((reflexive) at (A)) ▪ (((RC) at (A)) ▪ R)) ≔ in-∀ₚ (λ A, in-∀ (λ R : El (A ⇝ A ⇝ prop),  in-∀ (λ x : El (A),  el-⇒ (el-∀ (el-∀ (coq.connectives.or_intror) (((R) ▪ x) ▪ x)) ((((coq.logic.eq) at (A)) ▪ x) ▪ x)) (el-∀ (el-∀ₚ (coq.logic.refl) (A)) (x)))));
symbol injective_ : Els (∀ₖ (λ A, ∀ₖ (λ B, ↑ ((A ⇝ B) ⇝ prop)))) ≔ `Λ A, `Λ B, `λ' f : El ((A ⇝ B)), `∀ x : El (A), `∀ y : El (A), ((((coq.logic.eq) at (B)) ▪ ((f) ▪ x)) ▪ ((f) ▪ y)) ⇒ (((coq.logic.eq) at (A)) ▪ x) ▪ y;
symbol commutative_ : Els (∀ₖ (λ A, ↑ ((A ⇝ A ⇝ A) ⇝ prop))) ≔ `Λ A, `λ' f : El ((A ⇝ A ⇝ A)), `∀ x : El (A), `∀ y : El (A), (((coq.logic.eq) at (A)) ▪ (((f) ▪ x) ▪ y)) ▪ (((f) ▪ y) ▪ x);
symbol associative_ : Els (∀ₖ (λ A, ↑ ((A ⇝ A ⇝ A) ⇝ prop))) ≔ `Λ A, `λ' f : El ((A ⇝ A ⇝ A)), `∀ x : El (A), `∀ y : El (A), `∀ z : El (A), (((coq.logic.eq) at (A)) ▪ (((f) ▪ (((f) ▪ x) ▪ y)) ▪ z)) ▪ (((f) ▪ x) ▪ (((f) ▪ y) ▪ z));
symbol monotonic : Els (∀ₖ (λ A, ↑ ((A ⇝ A ⇝ prop) ⇝ (A ⇝ A) ⇝ prop))) ≔ `Λ A, `λ' R : El ((A ⇝ A ⇝ prop)), `λ' f : El ((A ⇝ A)), `∀ x : El (A), `∀ y : El (A), (((R) ▪ x) ▪ y) ⇒ ((R) ▪ ((f) ▪ x)) ▪ ((f) ▪ y);
symbol distributive : Els (∀ₖ (λ A, ↑ ((A ⇝ A ⇝ A) ⇝ (A ⇝ A ⇝ A) ⇝ prop))) ≔ `Λ A, `λ' f : El ((A ⇝ A ⇝ A)), `λ' g : El ((A ⇝ A ⇝ A)), `∀ x : El (A), `∀ y : El (A), `∀ z : El (A), (((coq.logic.eq) at (A)) ▪ (((f) ▪ x) ▪ (((g) ▪ y) ▪ z))) ▪ (((g) ▪ (((f) ▪ x) ▪ y)) ▪ (((f) ▪ x) ▪ z));
