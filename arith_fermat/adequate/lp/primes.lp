require open coq.sttfa;
require coq.bool;
require coq.connectives;
require coq.div_mod;
require coq.logic;
require coq.nat;
require coq.relations;
constant symbol divides : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ prop));
constant symbol quotient : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), `∀ q : El (coq.nat.nat), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ q)) ⇒ ((divides) ▪ n) ▪ m);
constant symbol match_divides_prop : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), `∀ return_type : El (prop), (`∀ q : El (coq.nat.nat), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ q)) ⇒ return_type) ⇒ (((divides) ▪ n) ▪ m) ⇒ return_type);
symbol reflexive_divides : Prf (((coq.relations.reflexive) at (coq.nat.nat)) ▪ divides) ≔ in-∀ (λ x : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (x)) (x)) ((coq.nat.S) ▪ coq.nat.O)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ x) ▪ ((coq.nat.S) ▪ coq.nat.O))) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.times) ▪ x) ▪ ((coq.nat.S) ▪ coq.nat.O)))) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat)) (((coq.nat.times) ▪ x) ▪ ((coq.nat.S) ▪ coq.nat.O)))) (x)) (el-∀ (coq.nat.times_n_1) (x))));
symbol divides_to_div_mod_spec : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ n) ⇒ (((divides) ▪ n) ▪ m) ⇒ ((((coq.div_mod.div_mod_spec) ▪ m) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n)) ▪ coq.nat.O) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ n), in-⇒ (λ _clearme : Prf (((divides) ▪ n) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (match_divides_prop) (n)) (m)) (((((coq.div_mod.div_mod_spec) ▪ m) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n)) ▪ coq.nat.O)) (in-∀ (λ q : El (coq.nat.nat),  in-⇒ (λ eqm : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ q)), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (coq.div_mod.div_mod_spec_intro) (m)) (n)) (((coq.div_mod.div) ▪ m) ▪ n)) (coq.nat.O)) (posn)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ q)) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ x) ▪ (((coq.nat.plus) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ x) ▪ n)) ▪ n)) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.times) ▪ q) ▪ n)) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ x) ▪ (((coq.nat.plus) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ x) ▪ n)) ▪ n)) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (q)) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.times) ▪ q) ▪ n)) ▪ (((coq.nat.plus) ▪ (((coq.nat.times) ▪ x) ▪ n)) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ q)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.plus) ▪ (((coq.nat.times) ▪ q) ▪ n)) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (m)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.plus) ▪ (((coq.nat.times) ▪ q) ▪ n)) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ q)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.plus) ▪ __) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (m)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.plus) ▪ __) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (m)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat)) (m))) (((coq.nat.plus) ▪ m) ▪ coq.nat.O)) (el-∀ (coq.nat.plus_n_O) (m)))) (((coq.nat.times) ▪ n) ▪ q)) (eqm))) (((coq.nat.times) ▪ q) ▪ n)) (el-∀ (el-∀ (coq.nat.commutative_times) (q)) (n)))) (((coq.nat.times) ▪ n) ▪ q)) (eqm))) (((coq.nat.times) ▪ q) ▪ n)) (el-∀ (el-∀ (coq.nat.commutative_times) (q)) (n)))) (((coq.div_mod.div) ▪ (((coq.nat.times) ▪ q) ▪ n)) ▪ n)) (el-⇒ (el-∀ (el-∀ (coq.div_mod.div_times) (q)) (n)) (posn)))) (((coq.nat.times) ▪ n) ▪ q)) (el-∀ (el-∀ (coq.nat.commutative_times) (n)) (q)))) (m)) (eqm)))))) (_clearme)))));
symbol divides_to_mod_O : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ n) ⇒ (((divides) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.div_mod.mod) ▪ m) ▪ n)) ▪ coq.nat.O) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ n), in-⇒ (λ divnm : Prf (((divides) ▪ n) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (coq.div_mod.div_mod_spec_to_eq2) (m)) (n)) (((coq.div_mod.div) ▪ m) ▪ n)) (((coq.div_mod.mod) ▪ m) ▪ n)) (((coq.div_mod.div) ▪ m) ▪ n)) (coq.nat.O)) (el-⇒ (el-∀ (el-∀ (coq.div_mod.div_mod_spec_div_mod) (m)) (n)) (posn))) (el-⇒ (el-⇒ (el-∀ (el-∀ (divides_to_div_mod_spec) (n)) (m)) (posn)) (divnm))))));
symbol mod_O_to_divides : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ n) ⇒ ((((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.div_mod.mod) ▪ m) ▪ n)) ▪ coq.nat.O) ⇒ ((divides) ▪ n) ▪ m) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ auto : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ n), in-⇒ (λ auto' : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.div_mod.mod) ▪ m) ▪ n)) ▪ coq.nat.O), el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (n)) (m)) (((coq.div_mod.div) ▪ m) ▪ n)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n))) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.times) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n)))) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n)))) (m)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.minus) ▪ m) ▪ coq.nat.O)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.times) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n))) ▪ __)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (((coq.div_mod.mod) ▪ m) ▪ n)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.times) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n))) ▪ (((coq.nat.minus) ▪ m) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ n)) ▪ n)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.minus) ▪ m) ▪ (((coq.div_mod.mod) ▪ m) ▪ n)))) (el-∀ (el-∀ (coq.div_mod.eq_times_div_minus_mod) (m)) (n))) (((coq.nat.times) ▪ n) ▪ (((coq.div_mod.div) ▪ m) ▪ n))) (el-∀ (el-∀ (coq.nat.commutative_times) (((coq.div_mod.div) ▪ m) ▪ n)) (n)))) (coq.nat.O)) (auto'))) (m)) (el-∀ (coq.nat.minus_n_O) (m))))))));
symbol divides_n_O : Prf (`∀ n : El (coq.nat.nat), ((divides) ▪ n) ▪ coq.nat.O) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (n)) (coq.nat.O)) (coq.nat.O)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ coq.nat.O)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.times) ▪ n) ▪ coq.nat.O))) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ coq.nat.O))) (coq.nat.O)) (el-∀ (coq.nat.times_n_O) (n))));
symbol divides_n_n : Prf (`∀ n : El (coq.nat.nat), ((divides) ▪ n) ▪ n) ≔ in-∀ (λ n : El (coq.nat.nat),  el-∀ (reflexive_divides) (n));
symbol eq_mod_to_divides : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), `∀ q : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ q) ⇒ ((((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.div_mod.mod) ▪ n) ▪ q)) ▪ (((coq.div_mod.mod) ▪ m) ▪ q)) ⇒ ((divides) ▪ q) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-∀ (λ q : El (coq.nat.nat),  in-⇒ (λ posq : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ q), in-⇒ (λ eqmod : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.div_mod.mod) ▪ n) ▪ q)) ▪ (((coq.div_mod.mod) ▪ m) ▪ q)), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.leb_elim) (n)) (m)) (`λ' __ : El (coq.bool.bool), ((divides) ▪ q) ▪ (((coq.nat.minus) ▪ n) ▪ m))) (in-⇒ (λ nm : Prf (((coq.nat.le) ▪ n) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((divides) ▪ q) ▪ coq.nat.O)) (((divides) ▪ q) ▪ (((coq.nat.minus) ▪ n) ▪ m))) (el-∀ (divides_n_O) (q))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (coq.nat.O)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ (((divides) ▪ q) ▪ coq.nat.O)) ▪ (((divides) ▪ q) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((divides) ▪ q) ▪ coq.nat.O))) (((coq.nat.minus) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat)) (coq.nat.O)) (((coq.nat.minus) ▪ n) ▪ m)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) ((((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ coq.nat.O) ▪ (((coq.nat.minus) ▪ m) ▪ n))) ▪ (((coq.nat.minus) ▪ (((coq.nat.plus) ▪ coq.nat.O) ▪ n)) ▪ m))) ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ (((coq.nat.minus) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.minus_le_minus_minus_comm) (m)) (n)) (coq.nat.O)) (nm))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (coq.nat.O)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.minus) ▪ (((coq.nat.plus) ▪ coq.nat.O) ▪ n)) ▪ m))) ▪ ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ (((coq.nat.minus) ▪ n) ▪ m)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (n)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ (((coq.nat.minus) ▪ __) ▪ m))) ▪ ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ (((coq.nat.minus) ▪ n) ▪ m)))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ (((coq.nat.minus) ▪ n) ▪ m)))) (((coq.nat.plus) ▪ coq.nat.O) ▪ n)) (el-∀ (coq.nat.plus_O_n) (n)))) (((coq.nat.minus) ▪ coq.nat.O) ▪ (((coq.nat.minus) ▪ m) ▪ n))) (el-∀ (coq.nat.minus_O_n) (((coq.nat.minus) ▪ m) ▪ n))))))))) (in-⇒ (λ nm : Prf ((coq.connectives.Not) ▪ (((coq.nat.le) ▪ n) ▪ m)), el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (q)) (((coq.nat.minus) ▪ n) ▪ m)) (((coq.nat.minus) ▪ (((coq.div_mod.div) ▪ n) ▪ q)) ▪ (((coq.div_mod.div) ▪ m) ▪ q))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.minus) ▪ (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ n) ▪ q))) ▪ (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ m) ▪ q)))) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ x)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ n) ▪ q)) ▪ q)) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ (((coq.nat.minus) ▪ x) ▪ (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ m) ▪ q))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q)) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ (((coq.nat.minus) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ n) ▪ q)) ▪ q)) ▪ x))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.minus) ▪ n) ▪ (((coq.div_mod.mod) ▪ n) ▪ q))) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ (((coq.nat.minus) ▪ x) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.minus) ▪ n) ▪ (((coq.nat.plus) ▪ (((coq.div_mod.mod) ▪ n) ▪ q)) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q)))) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ x)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.div_mod.mod) ▪ m) ▪ q)) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ (((coq.nat.minus) ▪ n) ▪ (((coq.nat.plus) ▪ x) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q))))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.plus) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q)) ▪ (((coq.div_mod.mod) ▪ m) ▪ q))) (`λ' x : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ (((coq.nat.minus) ▪ n) ▪ x))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat)) (m)) (`λ' x_1 : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.minus) ▪ n) ▪ m)) ▪ (((coq.nat.minus) ▪ n) ▪ x_1))) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat)) (((coq.nat.minus) ▪ n) ▪ m))) (((coq.nat.plus) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q)) ▪ (((coq.div_mod.mod) ▪ m) ▪ q))) (el-∀ (el-∀ (coq.div_mod.div_mod) (m)) (q)))) (((coq.nat.plus) ▪ (((coq.div_mod.mod) ▪ m) ▪ q)) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q))) (el-∀ (el-∀ (coq.nat.commutative_plus) (((coq.div_mod.mod) ▪ m) ▪ q)) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q)))) (((coq.div_mod.mod) ▪ n) ▪ q)) (eqmod))) (((coq.nat.minus) ▪ (((coq.nat.minus) ▪ n) ▪ (((coq.div_mod.mod) ▪ n) ▪ q))) ▪ (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q))) (el-∀ (el-∀ (el-∀ (coq.nat.minus_plus) (n)) (((coq.div_mod.mod) ▪ n) ▪ q)) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ m) ▪ q)) ▪ q)))) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ n) ▪ q)) ▪ q)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ n) ▪ q))) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.minus) ▪ n) ▪ (((coq.div_mod.mod) ▪ n) ▪ q)))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ n) ▪ q))) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ n) ▪ q))) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat)) (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ n) ▪ q)))) (((coq.nat.minus) ▪ n) ▪ (((coq.div_mod.mod) ▪ n) ▪ q))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ n) ▪ q)) ▪ q)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __) ▪ (((coq.nat.minus) ▪ n) ▪ (((coq.div_mod.mod) ▪ n) ▪ q)))) (el-∀ (el-∀ (coq.div_mod.eq_times_div_minus_mod) (n)) (q))) (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ n) ▪ q))) (el-∀ (el-∀ (coq.nat.commutative_times) (((coq.div_mod.div) ▪ n) ▪ q)) (q))))) (((coq.nat.times) ▪ (((coq.div_mod.div) ▪ n) ▪ q)) ▪ q)) (el-∀ (el-∀ (coq.nat.commutative_times) (((coq.div_mod.div) ▪ n) ▪ q)) (q))))) (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ m) ▪ q))) (el-∀ (el-∀ (coq.nat.commutative_times) (q)) (((coq.div_mod.div) ▪ m) ▪ q)))) (((coq.nat.times) ▪ q) ▪ (((coq.div_mod.div) ▪ n) ▪ q))) (el-∀ (el-∀ (coq.nat.commutative_times) (q)) (((coq.div_mod.div) ▪ n) ▪ q)))) (((coq.nat.times) ▪ q) ▪ (((coq.nat.minus) ▪ (((coq.div_mod.div) ▪ n) ▪ q)) ▪ (((coq.div_mod.div) ▪ m) ▪ q)))) (el-∀ (el-∀ (el-∀ (coq.nat.distributive_times_minus) (q)) (((coq.div_mod.div) ▪ n) ▪ q)) (((coq.div_mod.div) ▪ m) ▪ q))))))))));
symbol let_clause_1531 : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ m) ⇒ (((divides) ▪ n) ▪ m) ⇒ `∀ d : El (coq.nat.nat), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ coq.nat.O)) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ coq.nat.O) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posm : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ m), in-⇒ (λ _clearme : Prf (((divides) ▪ n) ▪ m), in-∀ (λ d : El (coq.nat.nat),  in-⇒ (λ eqm : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ coq.nat.O)), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ coq.nat.O)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ __)) (eqm)) (coq.nat.O)) (el-∀ (coq.nat.times_n_O) (n))))))));
symbol let_clause_15311 : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ m) ⇒ (((divides) ▪ n) ▪ m) ⇒ `∀ d : El (coq.nat.nat), `∀ p : El (coq.nat.nat), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ ((coq.nat.S) ▪ p))) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posm : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ m), in-⇒ (λ _clearme : Prf (((divides) ▪ n) ▪ m), in-∀ (λ d : El (coq.nat.nat),  in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ eqm : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ ((coq.nat.S) ▪ p))), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ ((coq.nat.S) ▪ p))) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ __)) (eqm)) (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p))) (el-∀ (el-∀ (coq.nat.times_n_Sm) (n)) (p)))))))));
symbol divides_to_le : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ m) ⇒ (((divides) ▪ n) ▪ m) ⇒ ((coq.nat.le) ▪ n) ▪ m) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posm : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ m), in-⇒ (λ _clearme : Prf (((divides) ▪ n) ▪ m), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (match_divides_prop) (n)) (m)) (((coq.nat.le) ▪ n) ▪ m)) (in-∀ (λ d : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (`λ' __ : El (coq.nat.nat), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ __)) ⇒ ((coq.nat.le) ▪ n) ▪ m)) (in-⇒ (λ eqm : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ coq.nat.O)), el-⇒ (el-∀ (coq.connectives.falsity) (((coq.nat.le) ▪ n) ▪ m)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((coq.nat.le) ▪ ((coq.nat.S) ▪ m)) ▪ coq.nat.O)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((coq.nat.le) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ m)) (((coq.nat.le) ▪ ((coq.nat.S) ▪ m)) ▪ coq.nat.O)) (posm)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (m)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ (((coq.nat.le) ▪ ((coq.nat.S) ▪ __)) ▪ m)) ▪ (((coq.nat.le) ▪ ((coq.nat.S) ▪ m)) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (m)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ (((coq.nat.le) ▪ ((coq.nat.S) ▪ m)) ▪ m)) ▪ (((coq.nat.le) ▪ ((coq.nat.S) ▪ m)) ▪ __))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((coq.nat.le) ▪ ((coq.nat.S) ▪ m)) ▪ m))) (coq.nat.O)) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_1531) (n)) (m)) (posm)) (_clearme)) (d)) (eqm)))) (coq.nat.O)) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_1531) (n)) (m)) (posm)) (_clearme)) (d)) (eqm))))) (el-∀ (coq.nat.not_le_Sn_O) (m)))))) (in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ eqm : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ (((coq.nat.times) ▪ n) ▪ ((coq.nat.S) ▪ p))), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (((coq.nat.times) ▪ n) ▪ ((coq.nat.S) ▪ p))) (`λ' x : El (coq.nat.nat), ((coq.nat.le) ▪ n) ▪ x)) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (((coq.nat.le) ▪ n) ▪ (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p)))) (((coq.nat.le) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ ((coq.nat.S) ▪ p)))) (el-∀ (el-∀ (coq.nat.le_plus_n_r) (((coq.nat.times) ▪ n) ▪ p)) (n))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p))) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ (((coq.nat.le) ▪ n) ▪ (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p)))) ▪ (((coq.nat.le) ▪ n) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (m)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ (((coq.nat.le) ▪ n) ▪ (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p)))) ▪ (((coq.nat.le) ▪ n) ▪ __))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (m)) (`λ' __ : El (coq.nat.nat), (((coq.logic.eq) at (prop)) ▪ (((coq.nat.le) ▪ n) ▪ __)) ▪ (((coq.nat.le) ▪ n) ▪ m))) (el-∀ (el-∀ₚ (coq.logic.refl) (prop)) (((coq.nat.le) ▪ n) ▪ m))) (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p))) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_15311) (n)) (m)) (posm)) (_clearme)) (d)) (p)) (eqm)))) (((coq.nat.plus) ▪ n) ▪ (((coq.nat.times) ▪ n) ▪ p))) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_15311) (n)) (m)) (posm)) (_clearme)) (d)) (p)) (eqm)))) (((coq.nat.times) ▪ n) ▪ ((coq.nat.S) ▪ p))) (el-∀ (el-∀ (coq.nat.times_n_Sm) (n)) (p))))) (m)) (eqm))))) (d)))) (_clearme)))));
symbol dividesb : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.bool.bool)) ≔ `λ' n : El (coq.nat.nat), `λ' m : El (coq.nat.nat), ((coq.nat.eqb) ▪ (((coq.div_mod.mod) ▪ m) ▪ n)) ▪ coq.nat.O;
symbol dividesb_true_to_divides : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true) ⇒ ((divides) ▪ n) ▪ m) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (((coq.nat.lt) ▪ coq.nat.O) ▪ n)) ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ n)) (((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true) ⇒ ((divides) ▪ n) ▪ m)) (in-⇒ (λ posn : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ n), in-⇒ (λ divbnm : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true), el-⇒ (el-⇒ (el-∀ (el-∀ (mod_O_to_divides) (n)) (m)) (posn)) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (((coq.div_mod.mod) ▪ m) ▪ n)) (coq.nat.O)) (divbnm)))))) (in-⇒ (λ eqnO : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ n), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat)) (coq.nat.O)) (`λ' x_1 : El (coq.nat.nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ x_1) ▪ m)) ▪ coq.bool.true) ⇒ ((divides) ▪ x_1) ▪ m)) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat)) (m)) (`λ' p : El (coq.nat.nat), (((coq.div_mod.mod_aux) ▪ m) ▪ m) ▪ p)) (`λ' y : El (coq.nat.nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((coq.nat.eqb) ▪ y) ▪ coq.nat.O)) ▪ coq.bool.true) ⇒ ((divides) ▪ coq.nat.O) ▪ m)) (in-⇒ (λ eqbmO : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((coq.nat.eqb) ▪ m) ▪ coq.nat.O)) ▪ coq.bool.true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat)) (coq.nat.O)) (`λ' x : El (coq.nat.nat), ((divides) ▪ coq.nat.O) ▪ x)) (el-∀ (divides_n_n) (coq.nat.O))) (m)) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (m)) (coq.nat.O)) (eqbmO)))))) (n)) (eqnO)))) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (coq.nat.O)) (n)) (el-∀ (coq.nat.le_O_n) (n)))));
symbol dividesb_false_to_not_divides : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (((coq.nat.lt) ▪ coq.nat.O) ▪ n)) ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ n)) (((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m))) (in-⇒ (λ posn : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ n), in-⇒ (λ ndivbnm : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (((divides) ▪ n) ▪ m)) ((((coq.logic.eq) at (coq.nat.nat)) ▪ (((coq.div_mod.mod) ▪ m) ▪ n)) ▪ coq.nat.O)) (el-⇒ (el-∀ (el-∀ (divides_to_mod_O) (n)) (m)) (posn))) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_false_to_not_eq) (((coq.div_mod.mod) ▪ m) ▪ n)) (coq.nat.O)) (ndivbnm)))))) (in-⇒ (λ eqnO : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ n), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat)) (coq.nat.O)) (`λ' x_1 : El (coq.nat.nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ x_1) ▪ m)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ x_1) ▪ m))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat)) (m)) (`λ' p : El (coq.nat.nat), (((coq.div_mod.mod_aux) ▪ m) ▪ m) ▪ p)) (`λ' y : El (coq.nat.nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((coq.nat.eqb) ▪ y) ▪ coq.nat.O)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ coq.nat.O) ▪ m))) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.nat.nat_case) (m)) (`λ' __ : El (coq.nat.nat), ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((coq.nat.eqb) ▪ __) ▪ coq.nat.O)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ coq.nat.O) ▪ __))) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_eqb) (coq.nat.O)) (`λ' y : El ((coq.nat.nat ⇝ coq.bool.bool)), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ coq.nat.O) ⇒ ((((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ coq.nat.O)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ coq.nat.O) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.bool.bool)) (coq.nat.eqb_body)) (`λ' y : El ((coq.nat.nat ⇝ coq.bool.bool)), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ coq.nat.O) ⇒ ((((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ coq.nat.O)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ coq.nat.O) ▪ coq.nat.O))) (el-⇒ (el-∀ (coq.nat.sym_eq_eqb_body_O) (`λ' y : El ((coq.nat.nat ⇝ coq.bool.bool)), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ coq.nat.O) ⇒ ((((coq.logic.eq) at (coq.bool.bool)) ▪ ((y) ▪ coq.nat.O)) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ coq.nat.O) ▪ coq.nat.O))) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.bool.bool)) (coq.bool.true)) (`λ' q : El (coq.nat.nat), coq.bool.false)) (`λ' y : El (coq.bool.bool), ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ coq.nat.O) ⇒ ((((coq.logic.eq) at (coq.bool.bool)) ▪ y) ▪ coq.bool.false) ⇒ (coq.connectives.Not) ▪ (((divides) ▪ coq.nat.O) ▪ coq.nat.O))) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ coq.nat.O), in-⇒ (λ auto' : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (((divides) ▪ coq.nat.O) ▪ coq.nat.O)) ((((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ coq.bool.false)) (in-⇒ (λ auto'' : Prf (((divides) ▪ coq.nat.O) ▪ coq.nat.O), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool)) (coq.bool.true)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ coq.bool.true) ▪ __)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (coq.bool.false)) (auto')))) (coq.bool.not_eq_true_false))))))))) (in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ __ : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ ((coq.nat.S) ▪ a)), in-⇒ (λ _0 : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((coq.nat.eqb) ▪ ((coq.nat.S) ▪ a)) ▪ coq.nat.O)) ▪ coq.bool.false), el-⇒ (el-∀ (coq.connectives.nmk) (((divides) ▪ coq.nat.O) ▪ ((coq.nat.S) ▪ a))) (in-⇒ (λ _clearme : Prf (((divides) ▪ coq.nat.O) ▪ ((coq.nat.S) ▪ a)), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (match_divides_prop) (coq.nat.O)) ((coq.nat.S) ▪ a)) (coq.connectives.False)) (in-∀ (λ q : El (coq.nat.nat),  in-⇒ (λ auto : Prf ((((coq.logic.eq) at (coq.nat.nat)) ▪ ((coq.nat.S) ▪ a)) ▪ (((coq.nat.times) ▪ coq.nat.O) ▪ q)), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) ((((coq.logic.eq) at (coq.nat.nat)) ▪ coq.nat.O) ▪ ((coq.nat.S) ▪ a))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (n)) (`λ' __1 : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __1) ▪ ((coq.nat.S) ▪ a))) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) ((coq.nat.S) ▪ a)) (`λ' __1 : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ __1) ▪ ((coq.nat.S) ▪ a))) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat)) ((coq.nat.S) ▪ a))) (n)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (coq.nat.O)) (`λ' __1 : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ ((coq.nat.S) ▪ a)) ▪ __1)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat)) (((coq.nat.times) ▪ q) ▪ coq.nat.O)) (`λ' __1 : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ ((coq.nat.S) ▪ a)) ▪ __1)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat)) (((coq.nat.times) ▪ coq.nat.O) ▪ q)) (`λ' __1 : El (coq.nat.nat), (((coq.logic.eq) at (coq.nat.nat)) ▪ ((coq.nat.S) ▪ a)) ▪ __1)) (auto)) (((coq.nat.times) ▪ q) ▪ coq.nat.O)) (el-∀ (el-∀ (coq.nat.commutative_times) (coq.nat.O)) (q)))) (coq.nat.O)) (el-∀ (coq.nat.times_n_O) (q)))) (n)) (eqnO)))) (coq.nat.O)) (eqnO))) (el-∀ (coq.nat.not_eq_O_S) (a)))))) (_clearme)))))))))) (n)) (eqnO)))) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (coq.nat.O)) (n)) (el-∀ (coq.nat.le_O_n) (n)))));
symbol decidable_divides : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (coq.logic.decidable) ▪ (((divides) ▪ n) ▪ m)) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true)) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false)) ((coq.logic.decidable) ▪ (((divides) ▪ n) ▪ m))) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true), el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (((divides) ▪ n) ▪ m)) ((coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-∀ (dividesb_true_to_divides) (n)) (m)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.true)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (((dividesb) ▪ n) ▪ m)) (auto)))))) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false), el-⇒ (el-∀ (el-∀ (coq.connectives.or_intror) (((divides) ▪ n) ▪ m)) ((coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m))) (el-⇒ (el-∀ (el-∀ (dividesb_false_to_not_divides) (n)) (m)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.false)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.false)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.false))) (((dividesb) ▪ n) ▪ m)) (auto)))))) (el-∀ (coq.bool.true_or_false) (((dividesb) ▪ n) ▪ m))));
symbol divides_to_dividesb_true : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ n) ⇒ (((divides) ▪ n) ▪ m) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ n), in-⇒ (λ divnm : Prf (((divides) ▪ n) ▪ m), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true)) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false)) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true)) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.true)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (((dividesb) ▪ n) ▪ m)) (auto)))) (in-⇒ (λ ndivbnm : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((divides) ▪ n) ▪ m)) (divnm)) (el-⇒ (el-∀ (el-∀ (dividesb_false_to_not_divides) (n)) (m)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.false)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.false)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.false))) (((dividesb) ▪ n) ▪ m)) (ndivbnm))))))) (el-∀ (coq.bool.true_or_false) (((dividesb) ▪ n) ▪ m))))));
symbol not_divides_to_dividesb_false : Prf (`∀ n : El (coq.nat.nat), `∀ m : El (coq.nat.nat), (((coq.nat.lt) ▪ coq.nat.O) ▪ n) ⇒ ((coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m)) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (((coq.nat.lt) ▪ coq.nat.O) ▪ n), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true)) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false)) (((coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m)) ⇒ (((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false)) (in-⇒ (λ divbnm : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.true), in-⇒ (λ ndivnm : Prf ((coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m)), el-⇒ (el-∀ (coq.connectives.falsity) ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false)) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (((divides) ▪ n) ▪ m)) (el-⇒ (el-∀ (el-∀ (dividesb_true_to_divides) (n)) (m)) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.true)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.true)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.true))) (((dividesb) ▪ n) ▪ m)) (divbnm)))) (ndivnm)))))) (in-⇒ (λ auto : Prf ((((coq.logic.eq) at (coq.bool.bool)) ▪ (((dividesb) ▪ n) ▪ m)) ▪ coq.bool.false), in-⇒ (λ auto' : Prf ((coq.connectives.Not) ▪ (((divides) ▪ n) ▪ m)), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool)) (coq.bool.false)) (`λ' __ : El (coq.bool.bool), (((coq.logic.eq) at (coq.bool.bool)) ▪ __) ▪ coq.bool.false)) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool)) (coq.bool.false))) (((dividesb) ▪ n) ▪ m)) (auto))))) (el-∀ (coq.bool.true_or_false) (((dividesb) ▪ n) ▪ m)))));
symbol prime : Els (↑ (coq.nat.nat ⇝ prop)) ≔ `λ' n : El (coq.nat.nat), ((coq.connectives.And) ▪ (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ n)) ▪ (`∀ m : El (coq.nat.nat), (((divides) ▪ m) ▪ n) ⇒ (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ m) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ n);
symbol prime_to_lt_O : Prf (`∀ p : El (coq.nat.nat), ((prime) ▪ p) ⇒ ((coq.nat.lt) ▪ coq.nat.O) ▪ p) ≔ in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf ((prime) ▪ p), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ p)) (`∀ m : El (coq.nat.nat), (((divides) ▪ m) ▪ p) ⇒ (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ m) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ p)) (((coq.nat.lt) ▪ coq.nat.O) ▪ p)) (in-⇒ (λ lt1p : Prf (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ p), in-⇒ (λ auto : Prf (`∀ m : El (coq.nat.nat), (((divides) ▪ m) ▪ p) ⇒ (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ m) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ p), el-⇒ (el-∀ (el-∀ (coq.nat.lt_S_to_lt) (coq.nat.O)) (p)) (lt1p))))) (_clearme)));
symbol prime_to_lt_SO : Prf (`∀ p : El (coq.nat.nat), ((prime) ▪ p) ⇒ ((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ p) ≔ in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf ((prime) ▪ p), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ p)) (`∀ m : El (coq.nat.nat), (((divides) ▪ m) ▪ p) ⇒ (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ m) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ p)) (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ p)) (in-⇒ (λ lt1p : Prf (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ p), in-⇒ (λ auto : Prf (`∀ m : El (coq.nat.nat), (((divides) ▪ m) ▪ p) ⇒ (((coq.nat.lt) ▪ ((coq.nat.S) ▪ coq.nat.O)) ▪ m) ⇒ (((coq.logic.eq) at (coq.nat.nat)) ▪ m) ▪ p), lt1p)))) (_clearme)));
