require open coq.sttfa;
require coq.bool;
require coq.connectives;
require coq.div_mod;
require coq.logic;
require coq.nat;
require coq.relations;
constant symbol divides : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ prop));
constant symbol quotient : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) q ■) ■) ⇒ app (app (divides) n ■) m ■))));
constant symbol match_divides_prop : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), ∀ (λ return_type : El (prop), (∀ (λ q : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) q ■) ■) ⇒ return_type)) ⇒ (app (app (divides) n ■) m ■) ⇒ return_type))));
symbol reflexive_divides : Prf (app (el-∀ₖ (coq.relations.reflexive) (coq.nat.nat) ■) divides ■) ≔ in-∀ (λ x : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (x) ■) (x) ■) (app (coq.nat.S) coq.nat.O ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) x ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.times) x ■) (app (coq.nat.S) coq.nat.O ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.times) x ■) (app (coq.nat.S) coq.nat.O ■) ■) ■) ■) (x) ■) (el-∀ (coq.nat.times_n_1) (x) ■) ■) ■);
symbol divides_to_div_mod_spec : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) n ■) ⇒ (app (app (divides) n ■) m ■) ⇒ app (app (app (app (coq.div_mod.div_mod_spec) m ■) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) coq.nat.O ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (app (app (coq.nat.lt) coq.nat.O ■) n ■), in-⇒ (λ _clearme : Prf (app (app (divides) n ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (match_divides_prop) (n) ■) (m) ■) (app (app (app (app (coq.div_mod.div_mod_spec) m ■) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) coq.nat.O ■) ■) (in-∀ (λ q : El (coq.nat.nat),  in-⇒ (λ eqm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) q ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (coq.div_mod.div_mod_spec_intro) (m) ■) (n) ■) (app (app (coq.div_mod.div) m ■) n ■) ■) (coq.nat.O) ■) (posn) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) q ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (coq.div_mod.div) x ■) n ■) ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) n ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) x ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (coq.div_mod.div) x ■) n ■) ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (q) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) n ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) x ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) q ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) q ■) n ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) q ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.plus) __ ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.plus) __ ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (m) ■) ■) (app (app (coq.nat.plus) m ■) coq.nat.O ■) ■) (el-∀ (coq.nat.plus_n_O) (m) ■) ■) ■) (app (app (coq.nat.times) n ■) q ■) ■) (eqm) ■) ■) (app (app (coq.nat.times) q ■) n ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (n) ■) ■) ■) (app (app (coq.nat.times) n ■) q ■) ■) (eqm) ■) ■) (app (app (coq.nat.times) q ■) n ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (n) ■) ■) ■) (app (app (coq.div_mod.div) (app (app (coq.nat.times) q ■) n ■) ■) n ■) ■) (el-⇒ (el-∀ (el-∀ (coq.div_mod.div_times) (q) ■) (n) ■) (posn) ■) ■) ■) (app (app (coq.nat.times) n ■) q ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (n) ■) (q) ■) ■) ■) (m) ■) (eqm) ■) ■))) ■) (_clearme) ■))));
symbol divides_to_mod_O : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) n ■) ⇒ (app (app (divides) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) m ■) n ■) ■) coq.nat.O ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (app (app (coq.nat.lt) coq.nat.O ■) n ■), in-⇒ (λ divnm : Prf (app (app (divides) n ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (el-∀ (coq.div_mod.div_mod_spec_to_eq2) (m) ■) (n) ■) (app (app (coq.div_mod.div) m ■) n ■) ■) (app (app (coq.div_mod.mod) m ■) n ■) ■) (app (app (coq.div_mod.div) m ■) n ■) ■) (coq.nat.O) ■) (el-⇒ (el-∀ (el-∀ (coq.div_mod.div_mod_spec_div_mod) (m) ■) (n) ■) (posn) ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (divides_to_div_mod_spec) (n) ■) (m) ■) (posn) ■) (divnm) ■) ■))));
symbol mod_O_to_divides : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) n ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) m ■) n ■) ■) coq.nat.O ■) ⇒ app (app (divides) n ■) m ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ auto : Prf (app (app (coq.nat.lt) coq.nat.O ■) n ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) m ■) n ■) ■) coq.nat.O ■), el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (n) ■) (m) ■) (app (app (coq.div_mod.div) m ■) n ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.times) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) ■) ■) (m) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) m ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) ■) __ ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) m ■) n ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) ■) (app (app (coq.nat.minus) m ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) n ■) ■) n ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.minus) m ■) (app (app (coq.div_mod.mod) m ■) n ■) ■) ■)) ■) (el-∀ (el-∀ (coq.div_mod.eq_times_div_minus_mod) (m) ■) (n) ■) ■) (app (app (coq.nat.times) n ■) (app (app (coq.div_mod.div) m ■) n ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (coq.div_mod.div) m ■) n ■) ■) (n) ■) ■) ■) (coq.nat.O) ■) (auto') ■) ■) (m) ■) (el-∀ (coq.nat.minus_n_O) (m) ■) ■) ■) ■))));
symbol divides_n_O : Prf (∀ (λ n : El (coq.nat.nat), app (app (divides) n ■) coq.nat.O ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (n) ■) (coq.nat.O) ■) (coq.nat.O) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) ■) (coq.nat.O) ■) (el-∀ (coq.nat.times_n_O) (n) ■) ■) ■);
symbol divides_n_n : Prf (∀ (λ n : El (coq.nat.nat), app (app (divides) n ■) n ■)) ≔ in-∀ (λ n : El (coq.nat.nat),  el-∀ (reflexive_divides) (n) ■);
symbol eq_mod_to_divides : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), ∀ (λ q : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) q ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) (app (app (coq.div_mod.mod) m ■) q ■) ■) ⇒ app (app (divides) q ■) (app (app (coq.nat.minus) n ■) m ■) ■)))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-∀ (λ q : El (coq.nat.nat),  in-⇒ (λ posq : Prf (app (app (coq.nat.lt) coq.nat.O ■) q ■), in-⇒ (λ eqmod : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) (app (app (coq.div_mod.mod) m ■) q ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.leb_elim) (n) ■) (m) ■) (abs (λ __ : El (coq.bool.bool), app (app (divides) q ■) (app (app (coq.nat.minus) n ■) m ■) ■)) ■) (in-⇒ (λ nm : Prf (app (app (coq.nat.le) n ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (divides) q ■) coq.nat.O ■) ■) (app (app (divides) q ■) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (el-∀ (divides_n_O) (q) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (divides) q ■) coq.nat.O ■) ■) (app (app (divides) q ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (divides) q ■) coq.nat.O ■) ■) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.sym_eq) (coq.nat.nat) ■) (coq.nat.O) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) coq.nat.O ■) (app (app (coq.nat.minus) m ■) n ■) ■) ■) (app (app (coq.nat.minus) (app (app (coq.nat.plus) coq.nat.O ■) n ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (coq.nat.minus_le_minus_minus_comm) (m) ■) (n) ■) (coq.nat.O) ■) (nm) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.minus) (app (app (coq.nat.plus) coq.nat.O ■) n ■) ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.nat.minus) n ■) m ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (n) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.nat.minus) __ ■) m ■) ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.nat.minus) n ■) m ■) ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (app (coq.nat.minus) n ■) m ■) ■) ■) ■) (app (app (coq.nat.plus) coq.nat.O ■) n ■) ■) (el-∀ (coq.nat.plus_O_n) (n) ■) ■) ■) (app (app (coq.nat.minus) coq.nat.O ■) (app (app (coq.nat.minus) m ■) n ■) ■) ■) (el-∀ (coq.nat.minus_O_n) (app (app (coq.nat.minus) m ■) n ■) ■) ■) ■) ■) ■) ■)) ■) (in-⇒ (λ nm : Prf (app (coq.connectives.Not) (app (app (coq.nat.le) n ■) m ■) ■), el-⇒ (el-∀ (el-∀ (el-∀ (quotient) (q) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (app (app (coq.nat.minus) (app (app (coq.div_mod.div) n ■) q ■) ■) (app (app (coq.div_mod.div) m ■) q ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) m ■) q ■) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) n ■) q ■) ■) q ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (app (app (coq.nat.minus) x ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) m ■) q ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (app (app (coq.nat.minus) (app (app (coq.nat.times) (app (app (coq.div_mod.div) n ■) q ■) ■) q ■) ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (app (app (coq.nat.minus) x ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) n ■) q ■) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) x ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) m ■) q ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (app (app (coq.nat.minus) n ■) (app (app (coq.nat.plus) x ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) (app (app (coq.div_mod.mod) m ■) q ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (app (app (coq.nat.minus) n ■) x ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (m) ■) (abs (λ x_1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) (app (app (coq.nat.minus) n ■) x_1 ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.minus) n ■) m ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) (app (app (coq.div_mod.mod) m ■) q ■) ■) ■) (el-∀ (el-∀ (coq.div_mod.div_mod) (m) ■) (q) ■) ■) ■) (app (app (coq.nat.plus) (app (app (coq.div_mod.mod) m ■) q ■) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_plus) (app (app (coq.div_mod.mod) m ■) q ■) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) ■) ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) (eqmod) ■) ■) (app (app (coq.nat.minus) (app (app (coq.nat.minus) n ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.minus_plus) (n) ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) m ■) q ■) ■) q ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) n ■) q ■) ■) q ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.minus) n ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) ■) (app (app (coq.nat.minus) n ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) n ■) q ■) ■) q ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __ ■) (app (app (coq.nat.minus) n ■) (app (app (coq.div_mod.mod) n ■) q ■) ■) ■)) ■) (el-∀ (el-∀ (coq.div_mod.eq_times_div_minus_mod) (n) ■) (q) ■) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (coq.div_mod.div) n ■) q ■) ■) (q) ■) ■) ■) ■) (app (app (coq.nat.times) (app (app (coq.div_mod.div) n ■) q ■) ■) q ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (app (app (coq.div_mod.div) n ■) q ■) ■) (q) ■) ■) ■) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) m ■) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (app (app (coq.div_mod.div) m ■) q ■) ■) ■) ■) (app (app (coq.nat.times) q ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (q) ■) (app (app (coq.div_mod.div) n ■) q ■) ■) ■) ■) (app (app (coq.nat.times) q ■) (app (app (coq.nat.minus) (app (app (coq.div_mod.div) n ■) q ■) ■) (app (app (coq.div_mod.div) m ■) q ■) ■) ■) ■) (el-∀ (el-∀ (el-∀ (coq.nat.distributive_times_minus) (q) ■) (app (app (coq.div_mod.div) n ■) q ■) ■) (app (app (coq.div_mod.div) m ■) q ■) ■) ■) ■)) ■)))));
symbol let_clause_1531 : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) m ■) ⇒ (app (app (divides) n ■) m ■) ⇒ ∀ (λ d : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) coq.nat.O ■)))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posm : Prf (app (app (coq.nat.lt) coq.nat.O ■) m ■), in-⇒ (λ _clearme : Prf (app (app (divides) n ■) m ■), in-∀ (λ d : El (coq.nat.nat),  in-⇒ (λ eqm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) __ ■)) ■) (eqm) ■) (coq.nat.O) ■) (el-∀ (coq.nat.times_n_O) (n) ■) ■))))));
symbol let_clause_15311 : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) m ■) ⇒ (app (app (divides) n ■) m ■) ⇒ ∀ (λ d : El (coq.nat.nat), ∀ (λ p : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) p ■) ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■))))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posm : Prf (app (app (coq.nat.lt) coq.nat.O ■) m ■), in-⇒ (λ _clearme : Prf (app (app (divides) n ■) m ■), in-∀ (λ d : El (coq.nat.nat),  in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ eqm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) p ■) ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) p ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) __ ■)) ■) (eqm) ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (n) ■) (p) ■) ■)))))));
symbol divides_to_le : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) m ■) ⇒ (app (app (divides) n ■) m ■) ⇒ app (app (coq.nat.le) n ■) m ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posm : Prf (app (app (coq.nat.lt) coq.nat.O ■) m ■), in-⇒ (λ _clearme : Prf (app (app (divides) n ■) m ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (match_divides_prop) (n) ■) (m) ■) (app (app (coq.nat.le) n ■) m ■) ■) (in-∀ (λ d : El (coq.nat.nat),  el-∀ (el-⇒ (el-⇒ (el-∀ (coq.nat.match_nat_prop) (abs (λ __ : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) __ ■) ■) ⇒ app (app (coq.nat.le) n ■) m ■)) ■) (in-⇒ (λ eqm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) coq.nat.O ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (coq.nat.le) n ■) m ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) coq.nat.O ■) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) (app (coq.nat.S) coq.nat.O ■) ■) m ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) coq.nat.O ■) ■) (posm) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) __ ■) ■) m ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) m ■) ■) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) __ ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) (app (coq.nat.S) m ■) ■) m ■) ■) ■) (coq.nat.O) ■) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_1531) (n) ■) (m) ■) (posm) ■) (_clearme) ■) (d) ■) (eqm) ■) ■) ■) (coq.nat.O) ■) (el-⇒ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_1531) (n) ■) (m) ■) (posm) ■) (_clearme) ■) (d) ■) (eqm) ■) ■) ■) ■) (el-∀ (coq.nat.not_le_Sn_O) (m) ■) ■) ■)) ■) (in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ eqm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) p ■) ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) p ■) ■) ■) (abs (λ x : El (coq.nat.nat), app (app (coq.nat.le) n ■) x ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.eq_coerc) (app (app (coq.nat.le) n ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■) ■) (app (app (coq.nat.le) n ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) p ■) ■) ■) ■) (el-∀ (el-∀ (coq.nat.le_plus_n_r) (app (app (coq.nat.times) n ■) p ■) ■) (n) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) n ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■) ■) (app (app (coq.nat.le) n ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) n ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■) ■) (app (app (coq.nat.le) n ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (m) ■) (abs (λ __ : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (prop) ■) (app (app (coq.nat.le) n ■) __ ■) ■) (app (app (coq.nat.le) n ■) m ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (prop) ■) (app (app (coq.nat.le) n ■) m ■) ■) ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_15311) (n) ■) (m) ■) (posm) ■) (_clearme) ■) (d) ■) (p) ■) (eqm) ■) ■) ■) (app (app (coq.nat.plus) n ■) (app (app (coq.nat.times) n ■) p ■) ■) ■) (el-⇒ (el-∀ (el-∀ (el-⇒ (el-⇒ (el-∀ (el-∀ (let_clause_15311) (n) ■) (m) ■) (posm) ■) (_clearme) ■) (d) ■) (p) ■) (eqm) ■) ■) ■) (app (app (coq.nat.times) n ■) (app (coq.nat.S) p ■) ■) ■) (el-∀ (el-∀ (coq.nat.times_n_Sm) (n) ■) (p) ■) ■) ■) ■) (m) ■) (eqm) ■))) ■) (d) ■)) ■) (_clearme) ■))));
symbol dividesb : Els (↑ (coq.nat.nat ⇝ coq.nat.nat ⇝ coq.bool.bool)) ≔ abs (λ n : El (coq.nat.nat), abs (λ m : El (coq.nat.nat), app (app (coq.nat.eqb) (app (app (coq.div_mod.mod) m ■) n ■) ■) coq.nat.O ■));
symbol dividesb_true_to_divides : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■) ⇒ app (app (divides) n ■) m ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) coq.nat.O ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) n ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■) ⇒ app (app (divides) n ■) m ■) ■) (in-⇒ (λ posn : Prf (app (app (coq.nat.lt) coq.nat.O ■) n ■), in-⇒ (λ divbnm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■), el-⇒ (el-⇒ (el-∀ (el-∀ (mod_O_to_divides) (n) ■) (m) ■) (posn) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (app (app (coq.div_mod.mod) m ■) n ■) ■) (coq.nat.O) ■) (divbnm) ■) ■))) ■) (in-⇒ (λ eqnO : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) n ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x_1 : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) x_1 ■) m ■) ■) coq.bool.true ■) ⇒ app (app (divides) x_1 ■) m ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat) ■) (m) ■) (abs (λ p : El (coq.nat.nat), app (app (app (coq.div_mod.mod_aux) m ■) m ■) p ■)) ■) (abs (λ y : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) y ■) coq.nat.O ■) ■) coq.bool.true ■) ⇒ app (app (divides) coq.nat.O ■) m ■)) ■) (in-⇒ (λ eqbmO : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) m ■) coq.nat.O ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind_r) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x : El (coq.nat.nat), app (app (divides) coq.nat.O ■) x ■)) ■) (el-∀ (divides_n_n) (coq.nat.O) ■) ■) (m) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_true_to_eq) (m) ■) (coq.nat.O) ■) (eqbmO) ■) ■)) ■) ■) (n) ■) (eqnO) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (coq.nat.O) ■) (n) ■) (el-∀ (coq.nat.le_O_n) (n) ■) ■) ■));
symbol dividesb_false_to_not_divides : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (coq.nat.lt) coq.nat.O ■) n ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) n ■) ■) ((app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■) ■) (in-⇒ (λ posn : Prf (app (app (coq.nat.lt) coq.nat.O ■) n ■), in-⇒ (λ ndivbnm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (divides) n ■) m ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (app (coq.div_mod.mod) m ■) n ■) ■) coq.nat.O ■) ■) (el-⇒ (el-∀ (el-∀ (divides_to_mod_O) (n) ■) (m) ■) (posn) ■) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.eqb_false_to_not_eq) (app (app (coq.div_mod.mod) m ■) n ■) ■) (coq.nat.O) ■) (ndivbnm) ■) ■))) ■) (in-⇒ (λ eqnO : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) n ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.eq_ind) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ x_1 : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) x_1 ■) m ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) x_1 ■) m ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.nat.nat) ■) (m) ■) (abs (λ p : El (coq.nat.nat), app (app (app (coq.div_mod.mod_aux) m ■) m ■) p ■)) ■) (abs (λ y : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) y ■) coq.nat.O ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) coq.nat.O ■) m ■) ■)) ■) (el-⇒ (el-⇒ (el-∀ (el-∀ (coq.nat.nat_case) (m) ■) (abs (λ __ : El (coq.nat.nat), (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) __ ■) coq.nat.O ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) coq.nat.O ■) __ ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.sym_eq_eqb) (coq.nat.O) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) coq.nat.O ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) coq.nat.O ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_filter_nat_type_O) (coq.nat.nat ⇝ coq.bool.bool) ■) (coq.nat.eqb_body) ■) (abs (λ y : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) coq.nat.O ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) coq.nat.O ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (coq.nat.sym_eq_eqb_body_O) (abs (λ y : El ((coq.nat.nat ⇝ coq.bool.bool)), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (y) coq.nat.O ■) ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) coq.nat.O ■) coq.nat.O ■) ■)) ■) (el-⇒ (el-∀ (el-∀ (el-∀ (el-∀ₚ (coq.nat.sym_eq_match_nat_type_O) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ q : El (coq.nat.nat), coq.bool.false)) ■) (abs (λ y : El (coq.bool.bool), (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) coq.nat.O ■) ⇒ (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) y ■) coq.bool.false ■) ⇒ app (coq.connectives.Not) (app (app (divides) coq.nat.O ■) coq.nat.O ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) coq.nat.O ■), in-⇒ (λ auto' : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■), el-⇒ (el-⇒ (el-∀ (el-∀ (coq.logic.not_to_not) (app (app (divides) coq.nat.O ■) coq.nat.O ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) coq.bool.false ■) ■) (in-⇒ (λ auto'' : Prf (app (app (divides) coq.nat.O ■) coq.nat.O ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) coq.bool.true ■) __ ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (coq.bool.false) ■) (auto') ■)) ■) (coq.bool.not_eq_true_false) ■))) ■) ■) ■) ■) ■) (in-∀ (λ a : El (coq.nat.nat),  in-⇒ (λ __ : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) (app (coq.nat.S) a ■) ■), in-⇒ (λ _0 : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (coq.nat.eqb) (app (coq.nat.S) a ■) ■) coq.nat.O ■) ■) coq.bool.false ■), el-⇒ (el-∀ (coq.connectives.nmk) (app (app (divides) coq.nat.O ■) (app (coq.nat.S) a ■) ■) ■) (in-⇒ (λ _clearme : Prf (app (app (divides) coq.nat.O ■) (app (coq.nat.S) a ■) ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (match_divides_prop) (coq.nat.O) ■) (app (coq.nat.S) a ■) ■) (coq.connectives.False) ■) (in-∀ (λ q : El (coq.nat.nat),  in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) (app (app (coq.nat.times) coq.nat.O ■) q ■) ■), el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) coq.nat.O ■) (app (coq.nat.S) a ■) ■) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (n) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __1 ■) (app (coq.nat.S) a ■) ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) __1 ■) (app (coq.nat.S) a ■) ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) ■) (n) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (coq.nat.O) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) __1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.nat.nat) ■) (app (app (coq.nat.times) q ■) coq.nat.O ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) __1 ■)) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_l) (coq.nat.nat) ■) (app (app (coq.nat.times) coq.nat.O ■) q ■) ■) (abs (λ __1 : El (coq.nat.nat), app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) (app (coq.nat.S) a ■) ■) __1 ■)) ■) (auto) ■) (app (app (coq.nat.times) q ■) coq.nat.O ■) ■) (el-∀ (el-∀ (coq.nat.commutative_times) (coq.nat.O) ■) (q) ■) ■) ■) (coq.nat.O) ■) (el-∀ (coq.nat.times_n_O) (q) ■) ■) ■) (n) ■) (eqnO) ■) ■) ■) (coq.nat.O) ■) (eqnO) ■) ■) (el-∀ (coq.nat.not_eq_O_S) (a) ■) ■))) ■) (_clearme) ■)) ■)))) ■) ■) ■) (n) ■) (eqnO) ■)) ■) (el-⇒ (el-∀ (el-∀ (coq.nat.le_to_or_lt_eq) (coq.nat.O) ■) (n) ■) (el-∀ (coq.nat.le_O_n) (n) ■) ■) ■));
symbol decidable_divides : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), app (coq.logic.decidable) (app (app (divides) n ■) m ■) ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■) ■) (app (coq.logic.decidable) (app (app (divides) n ■) m ■) ■) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-∀ (coq.connectives.or_introl) (app (app (divides) n ■) m ■) ■) (app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (dividesb_true_to_divides) (n) ■) (m) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (app (dividesb) n ■) m ■) ■) (auto) ■) ■) ■)) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■), el-⇒ (el-∀ (el-∀ (coq.connectives.or_intror) (app (app (divides) n ■) m ■) ■) (app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■) ■) (el-⇒ (el-∀ (el-∀ (dividesb_false_to_not_divides) (n) ■) (m) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (app (dividesb) n ■) m ■) ■) (auto) ■) ■) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (dividesb) n ■) m ■) ■) ■));
symbol divides_to_dividesb_true : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) n ■) ⇒ (app (app (divides) n ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (app (app (coq.nat.lt) coq.nat.O ■) n ■), in-⇒ (λ divnm : Prf (app (app (divides) n ■) m ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (app (dividesb) n ■) m ■) ■) (auto) ■)) ■) (in-⇒ (λ ndivbnm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (divides) n ■) m ■) ■) (divnm) ■) (el-⇒ (el-∀ (el-∀ (dividesb_false_to_not_divides) (n) ■) (m) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (app (dividesb) n ■) m ■) ■) (ndivbnm) ■) ■) ■) ■)) ■) (el-∀ (coq.bool.true_or_false) (app (app (dividesb) n ■) m ■) ■) ■))));
symbol not_divides_to_dividesb_false : Prf (∀ (λ n : El (coq.nat.nat), ∀ (λ m : El (coq.nat.nat), (app (app (coq.nat.lt) coq.nat.O ■) n ■) ⇒ (app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■))) ≔ in-∀ (λ n : El (coq.nat.nat),  in-∀ (λ m : El (coq.nat.nat),  in-⇒ (λ posn : Prf (app (app (coq.nat.lt) coq.nat.O ■) n ■), el-⇒ (el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_Or_prop) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■) ■) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■) ■) ((app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■) ■) (in-⇒ (λ divbnm : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.true ■), in-⇒ (λ ndivnm : Prf (app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■), el-⇒ (el-∀ (coq.connectives.falsity) (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■) ■) (el-⇒ (el-⇒ (el-∀ (coq.logic.absurd) (app (app (divides) n ■) m ■) ■) (el-⇒ (el-∀ (el-∀ (dividesb_true_to_divides) (n) ■) (m) ■) (el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.true) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.true ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.true) ■) ■) (app (app (dividesb) n ■) m ■) ■) (divbnm) ■) ■) ■) (ndivnm) ■) ■))) ■) (in-⇒ (λ auto : Prf (app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) (app (app (dividesb) n ■) m ■) ■) coq.bool.false ■), in-⇒ (λ auto' : Prf (app (coq.connectives.Not) (app (app (divides) n ■) m ■) ■), el-⇒ (el-∀ (el-⇒ (el-∀ (el-∀ (el-∀ₚ (coq.logic.rewrite_r) (coq.bool.bool) ■) (coq.bool.false) ■) (abs (λ __ : El (coq.bool.bool), app (app (el-∀ₖ (coq.logic.eq) (coq.bool.bool) ■) __ ■) coq.bool.false ■)) ■) (el-∀ (el-∀ₚ (coq.logic.refl) (coq.bool.bool) ■) (coq.bool.false) ■) ■) (app (app (dividesb) n ■) m ■) ■) (auto) ■))) ■) (el-∀ (coq.bool.true_or_false) (app (app (dividesb) n ■) m ■) ■) ■)));
symbol prime : Els (↑ (coq.nat.nat ⇝ prop)) ≔ abs (λ n : El (coq.nat.nat), app (app (coq.connectives.And) (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) n ■) ■) (∀ (λ m : El (coq.nat.nat), (app (app (divides) m ■) n ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) n ■)) ■);
symbol prime_to_lt_O : Prf (∀ (λ p : El (coq.nat.nat), (app (prime) p ■) ⇒ app (app (coq.nat.lt) coq.nat.O ■) p ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (prime) p ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) p ■) ■) (∀ (λ m : El (coq.nat.nat), (app (app (divides) m ■) p ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) p ■)) ■) (app (app (coq.nat.lt) coq.nat.O ■) p ■) ■) (in-⇒ (λ lt1p : Prf (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) p ■), in-⇒ (λ auto : Prf (∀ (λ m : El (coq.nat.nat), (app (app (divides) m ■) p ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) p ■)), el-⇒ (el-∀ (el-∀ (coq.nat.lt_S_to_lt) (coq.nat.O) ■) (p) ■) (lt1p) ■))) ■) (_clearme) ■));
symbol prime_to_lt_SO : Prf (∀ (λ p : El (coq.nat.nat), (app (prime) p ■) ⇒ app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) p ■)) ≔ in-∀ (λ p : El (coq.nat.nat),  in-⇒ (λ _clearme : Prf (app (prime) p ■), el-⇒ (el-⇒ (el-∀ (el-∀ (el-∀ (coq.connectives.match_And_prop) (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) p ■) ■) (∀ (λ m : El (coq.nat.nat), (app (app (divides) m ■) p ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) p ■)) ■) (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) p ■) ■) (in-⇒ (λ lt1p : Prf (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) p ■), in-⇒ (λ auto : Prf (∀ (λ m : El (coq.nat.nat), (app (app (divides) m ■) p ■) ⇒ (app (app (coq.nat.lt) (app (coq.nat.S) coq.nat.O ■) ■) m ■) ⇒ app (app (el-∀ₖ (coq.logic.eq) (coq.nat.nat) ■) m ■) p ■)), lt1p))) ■) (_clearme) ■));
